{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/osweb/classes/var_store.js","webpack:///./src/js/osweb/backends/clock.js","webpack:///./src/js/osweb/items/item.js","webpack:///./src/js/osweb/util/matrix.js","webpack:///./src/js/osweb/items/loop.js","webpack:///./src/js/osweb/backends/keyboard.js","webpack:///./src/js/osweb/items/sequence.js","webpack:///./src/js/osweb/items/coroutines.js","webpack:///./src/js/osweb/backends/mouse.js","webpack:///./src/js/osweb/items/generic_response.js","webpack:///./src/js/osweb/items/sketchpad.js","webpack:///./src/js/osweb/items/feedback.js","webpack:///./src/js/osweb/items/inline_script.js","webpack:///./src/js/osweb/items/inline_javascript.js","webpack:///./src/js/osweb/items/keyboard_response.js","webpack:///./src/js/osweb/items/mouse_response.js","webpack:///./src/js/osweb/items/logger.js","webpack:///./src/js/osweb/backends/sampler.js","webpack:///./src/js/osweb/items/sampler.js","webpack:///./src/js/osweb/items/synth.js","webpack:///./src/js/osweb/elements/base_element.js","webpack:///./src/js/osweb/elements/arrow.js","webpack:///./src/js/osweb/elements/circle.js","webpack:///./src/js/osweb/elements/ellipse.js","webpack:///./src/js/osweb/elements/fixdot.js","webpack:///./src/js/osweb/elements/gabor.js","webpack:///./src/js/osweb/elements/image.js","webpack:///./src/js/osweb/elements/line.js","webpack:///./src/js/osweb/elements/noise.js","webpack:///./src/js/osweb/elements/rect.js","webpack:///./src/js/osweb/elements/textline.js","webpack:///./src/js/osweb/widgets/widget.js","webpack:///./src/js/osweb/widgets/button.js","webpack:///./src/js/osweb/widgets/checkbox.js","webpack:///./src/js/osweb/widgets/themes.js","webpack:///./src/js/osweb/widgets/form.js","webpack:///./src/js/osweb/widgets/image_widget.js","webpack:///./src/js/osweb/widgets/image_button.js","webpack:///./src/js/osweb/widgets/label.js","webpack:///./src/js/osweb/widgets/rating_scale.js","webpack:///./src/js/osweb/widgets/text_input.js","webpack:///./src/js/osweb/plugins/advanced_delay.js","webpack:///./src/js/osweb/plugins/form_base.js","webpack:///./src/js/osweb/plugins/form_consent.js","webpack:///./src/js/osweb/plugins/form_multiple_choice.js","webpack:///./src/js/osweb/plugins/form_text_display.js","webpack:///./src/js/osweb/plugins/form_text_input.js","webpack:///./src/js/osweb/backends/video.js","webpack:///./src/js/osweb/system/constants.js","webpack:///./src/js/osweb/plugins/media_player.js","webpack:///./src/js/osweb/plugins/notepad.js","webpack:///./src/js/osweb/plugins/repeat_cycle.js","webpack:///./src/js/osweb/plugins/reset_feedback.js","webpack:///./src/js/osweb/plugins/touch_response.js","webpack:///./src/js/osweb/system/debugger.js","webpack:///./src/js/osweb/system/convertor.js","webpack:///./src/js/osweb/system/events.js","webpack:///./src/js/osweb/system/parameters.js","webpack:///./src/js/osweb/system/screen.js","webpack:///./src/js/osweb/system/session.js","webpack:///./src/js/osweb/util/files.js","webpack:///./src/js/osweb/system/transfer.js","webpack:///./src/js/osweb/classes/item_stack.js","webpack:///./src/js/osweb/classes/item_store.js","webpack:///./src/js/osweb/classes/file_pool_store.js","webpack:///./src/js/osweb/classes/syntax.js","webpack:///./src/js/osweb/python/python_math.js","webpack:///./src/js/osweb/python/python_opensesame.js","webpack:///./src/js/osweb/python/python_random.js","webpack:///./src/js/osweb/python/python_string.js","webpack:///./src/js/osweb/python/python.js","webpack:///./src/js/osweb/backends/log.js","webpack:///./src/js/osweb/items/experiment.js","webpack:///./src/js/osweb/system/runner.js","webpack:///./src/js/osweb/index.js","webpack:///./src/app.js","webpack:///./src/js/osweb/backends/canvas.js","webpack:///./src/js/osweb/backends/styles.js","webpack:///./src/js/osweb/classes/javascript_workspace.js","webpack:///./src/js/osweb/classes/python_workspace.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","p","jsonpArray","window","oldJsonpFunction","slice","VarStore","item","parent","this","_item","_parent","_ignored_properties","variable","defaultValue","evaluate","valid","addQuotes","_bypass_proxy","syntax","eval_text","inspect","includes","variables","pairs","has","preserve","unset","Clock","experiment","_experiment","_startTime","_now","performance","now","Math","round","webkitNow","Date","getTime","ms","_runner","_events","_run","constants","RESPONSE_DURATION","Item","script","constructor","_status","STATUS_NONE","clock","count","python_workspace","_pythonWorkspace","response_store","_responseStore","_syntax","vars","STATUS_FINALIZE","_currentItem","run","response","pMs","sleep","time","line","trim","charAt","comments","fromAscii","parse_comment","parse_cmd","cmd","args","set","_debugger","addError","reset","lines","split","parse_variable","parse_line","STATUS_INITIALIZE","addMessage","type","_prepare_complete","unstack","srcMatrix","TypeError","values","reduce","acc","cycle","entries","val","stack","columns","keys","map","row","fullfactorial","matrix","combos","shuffleVert","grouped","cols","prev","shuffleHoriz","vals","res","sortCol","col","Error","sort","reverseRows","ReferenceError","roll","amount","column","parseInt","rollN","list","unshift","pop","weight","weightCol","Loop","description","_cycles","_break_if","_index","_keyboard","_operations","_initialized","from_string","el","_eval_args","cycles","repeat","skip","offset","order","break_if","instruction","params","remove_quotes","Number","_pythonParser","_prepare","body","undefined","_runstatement","e","items","_items","set_item_onset","mtrx","func","wholeRepeats","floor","partialRepeats","remainder","Array","repeatCycles","break_if_val","compile_cond","repeat_cycle","msg","apply_cycle","breakIf","_eval","_complete","_itemStore","prepare","execute","Keyboard","timeOut","keyList","_keyList","_timeOut","_SYNONIEM_MAP","responses","synonyms","defaults","_synonyms","button","RESPONSE_KEYBOARD","moderators","keyDownEvent","event","shiftKey","ctrlKey","altKey","visible","_renderer","view","focus","tmp","document","createElement","appendChild","removeChild","Sequence","flush_keyboard","cond","_itemStack","tokens","flush","currentItem","Coroutines","tasks","schedule","arglist","kwdict","task","item_name","start_time","start","end_time","end","run_if","runif","taskParams","Task","sortBy","launch","active","dt","t0","running","_loop","started","_active","status","step","RUNNING","ABORTED","stopped","TIMER_BREAK","TIMER_EXIT","TIMER_ERROR","_state","setTimeout","kill","abort_on_end","state","UNINITIALISED","_coroutine","isFunction","coroutine","next","newState","done","FINISHED","Mouse","buttonList","_buttonList","_visible","synoniem","show_cursor","RESPONSE_MOUSE","_mouseMoveEvent","rtTime","clientX","clientY","events","_mouse_press","_mouseDownEvent","pos","show","style","cursor","GenericResponse","_allowed_responses","_duration","_duration_func","_mouse","_responsetype","RESPONSE_NONE","_timeout","auto_response","process_feedback","timeout","_timeStamp","process_response_timeout","process_response_keypress","process_response_mouseclick","allowed_responses","String","replace","filter","Boolean","duration","_get_default_from_synoniem","prepare_duration_keypress","prepare_duration_mouseclick","RESPONSE_SOUND","RESPONSE_VIDEO","auto_responder","final_duration","_set_config","auto_responder_mouse","sleep_for_duration","get_key","get_click","_sampler","wait","_video_player","rect","getBoundingClientRect","scale","min","right","left","width","bottom","top","height","center_x","center_y","cursor_x","cursor_y","retval","_start_response_interval","sri","_end_response_interval","sanitize","resp","response_bookkeeping","set_mouse_coordinates","correct","toString","total_correct","total_response_time","response_time","total_responses","accuracy","average_response_time","avg_rt","self","prepare_timeout","prepare_allowed_responses","prepare_duration","Sketchpad","canvas","Canvas","elements","a","b","z_index","_isClass","element","_newElementClass","_compare","clear","is_shown","draw","backgroundColor","_styles","background_color","set_sri","process_response","Feedback","reset_variables","reset_feedback","InlineScript","_prepare_run","_prepare_tree","_run_tree","_process_nodes","read_run_lines","read_prepare_lines","_parse","InlineJavaScript","workspace","_javascriptWorkspace","KeyboardResponse","_flush","correct_response","keyDownHandler","keypress","_processKeyboardEvent","addEventListener","proceed","removeEventListener","MouseResponse","resp_codes","mouseDownHandler","_processMouseEvent","touchHandler","changedTouches","Logger","logvars","auto_log","_log","write_vars","concat","audioCtx","AudioContext","webkitAudioContext","console","warning","SamplerBackend","source","volume","pitch","pan","fade","block","sample","cloneNode","error","onended","_audioEnded","createMediaElementSource","resume","connect","applyFilters","play","nodes","destination","gainNode","createGain","gain","setValueAtTime","currentTime","linearRampToValueAtTime","StereoPannerNode","Sampler","_sample","fade_in","stop_after","_pool","Synth","BaseElement","sketchpad","show_if","fix_coordinates","uniform_coordinates","only_keywords","pool","properties","_properties","xc","yc","prop","eval_properties","Arrow","color","penwidth","x1","y1","x2","y2","styles","Styles","fill","arrow","arrow_body_width","arrow_body_length","arrow_head_width","Circle","x","y","circle","Ellipse","w","h","ellipse","Fixdot","fixdot","Gabor","gabor","orient","freq","env","size","stdev","phase","color1","color2","bgmode","ImageElement","_file","image","file","center","Line","Noise","noise","Rect","Textline","font_family","font_size","font_bold","font_italic","html","text","font_underline","Widget","form","var","_container","Container","Graphics","lineStyle","_canvas","_convertColorValue","_themes","theme","lineColorLeftTop","moveTo","_width","lineTo","_height","lineColorRightBottom","rectangle","beginFill","drawRect","endFill","addChild","ButtonWidget","frame","set_var","text_style","fontFamily","fontSize","fontStyle","fontWeight","foreground","text_element","Text","only_render","interactive","buttonMode","hitArea","Rectangle","on","draw_frame","draw_text","CheckBoxWidget","checked","click_accepts","group","_checkbox","box_lines","box_fill","removeChildren","set_checked","widgets","pVal","pVar","join","Themes","box_size","FormWidget","rows","spacing","margins","clicks","span","colNr","rowNr","_groupId","background","focus_widget","render","setFocus","TIMER_FORM","widget","colSpan","rowSpan","form_width","form_height","range","ImageWidget","adjust","path","img","getContext","drawImage","sprite","PIXI","Sprite","Texture","fromCanvas","ar","ImageButtonWidget","LabelWidget","buffer_context","font","words","line_length","word","word_length","measureText","text_elements","text_lines","lineProperties","_getTextBaseline","RatingScaleWidget","default","orientation","_checkBoxes","_getGroupId","_processNodes","_nodes","isNaN","parseFloat","isFinite","labels","box_check","container","horizontal","cx","cy","_h","dx","_drawBorder","_x","_drawCheckBox","_drawText","dy","_y","children","set_value","currentTarget","TextInputWidget","stub","return_accepts","inputField","keyCode","AdvancedDelay","mean","std","u","v","random","max","sqrt","log","cos","PI","jitter","jitter_mode","_random_uniform","_random_gauss","FormBase","itemType","options","_form_options","_form_text","item_type","TIMER_NONE","_theme","_widgets","form_clicks","parameters","varName","substr","indexOf","varValue","substring","_type","colspan","rowspan","_w","_newWidgetClass","set_widget","_exec","FormConsent","decline_form","decline_message","exit","FormMultipleChoice","FormTextDisplay","FormTextInput","Video","audio","full_screen","_playing","_script","_video","_texture","from","_videoSprite","pause","_videoEnded","onplay","_videoPlay","_event_handler_always","itemClasses","loop","sequence","feedback","inline_script","inline_javascript","keyboard_response","mouse_response","logger","sampler","synth","coroutines","textline","TextLine","button_widget","checkbox_widget","form_widget","image_button_widget","image_widget","label_widget","rating_scale_widget","text_input_widget","themes","advanced_delay","form_base","form_consent","form_multiple_choice","form_text_display","form_text_input","media_player_mpy","_script_executed","stop","_update","event_handler","event_handler_trigger","notepad","condition","touch_response","_ncol","_nrow","cell","PRESSES_ONLY","RELEASES_ONLY","PRESSES_AND_RELEASES","RESPONSE_AUTOKEYBOARD","RESPONSE_AUTOMOUSE","STATUS_BUILD","STATUS_EXECUTE","TIMER_WAIT","TIMER_PAUSE","TIMER_RESUME","TIMER_DONE","Debugger","runner","enabled","messageLog","errorText","context","isPlainObject","notify","_onError","url","messageText","Convertor","variabelName","match","newItem","pair","parseValue","variableName","parseLine","Events","_keyDownEvent","_keyDownHandler","_keyPressMode","_keyUpHandler","_mouseDownHandler","_mouseMoveHandler","_mousePressMode","_mouseUpHandler","_responseGiven","_responseList","_responseType","_soundHasEnded","_statePrevious","_timeHandler","_videoHasEnded","_KEY_CODES","_KEY_SHIFTCODES","_keyDown","_keyUp","_mouseDown","_mouseMove","_mouseUp","_touchStartHandler","_touchStart","Ticker","add","_time","remove","location","_screen","_showPauseScreen","keyboardState","keyboardResponse","_convertKeyCode","preventDefault","mouseState","mouseResponse","_finalize","responseType","responseList","Parameters","_itemCounter","_parameters","_subject","set_subject","_setupClickScreen","_updateIntroScreen","dataType","title","prompt","promptEnabled","_processParameters","_processParameter","_transferParameters","parameter","_exit","_prompt","_onParamConfirm","_onParamCancel","Screen","_click","_fullScreen","requestFullscreen","_fullScreenChanged","_fullScreenError","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","_scaleMode","margin","display","position","_currentCanvas","clientWidth","clientHeight","resize","_scale_x","_scale_y","_confirm","_onFullScreenConfirm","_onFullScreenCancel","debugger","_introScreen","screenCenter","logoPath","logoSrc","oswebLogo","oswebTitle","versionInfo","VERSION_NUMBER","copyrightText","getFullYear","_statusText","clickHandler","_clearIntroScreen","_initialize","percentage","yOuter","_progressBarOuter","_progressBarInner","xOuter","hOuter","_onPauseScreenConfirm","_onPauseScreenCancel","Session","_date","_session","_getSessionInformation","navigator","appCodeName","appName","appVersion","getDate","getMonth","getHours","getMinutes","getSeconds","getUTCDate","getUTCMonth","getUTCFullYear","screen","availHeight","availWidth","colorDepth","outerheight","outerwidth","pixelDepth","screenX","screenY","platform","FileStreamer","chunkSize","rewind","getFileSize","fileReader","FileReader","blob","Promise","resolve","reject","onloadend","target","byteLength","progress","readAsArrayBuffer","decompress","zipfile","onProgress","fs","inflator","pako","Inflate","isEndOfFile","readBlock","err","untar","buffer","readFileAsText","inputFile","temporaryFileReader","onerror","abort","DOMException","onload","readAsText","parseUrl","str","host","getHost","origin","URL","Transfer","isString","isObject","File","_readOsexpFromFile","osScript","uri","fetch","href","remoteFile","_processScript","_readWebFonts","osexp","Blob","osexpFile","_readExpFile","message","_updateProgressBar","files","expFileIndex","findIndex","expFile","poolFiles","_processOsexpPoolItems","axios","onDownloadProgress","lengthComputable","loaded","total","test","userAgent","contents","asyncIterator","currentIndex","currentFile","folder","whole","group1","fromCharCode","ext","lastIndexOf","toLowerCase","Image","src","getBlobUrl","ado","Audio","WebFont","load","google","families","urls","inactive","resultData","FormData","append","xhr","XMLHttpRequest","open","send","ItemStack","stackItem","ItemStore","className","string","_newItemClass","suggestion","uniqueName","FilePoolStore","new_name","old_path","new_path","Syntax","isNumber","cnd","bytecode","expression","ast","_run_statement","content","in_entity","escapeBrackets","unescapeBrackets","nr","strip_slashes","add_slashes","count_quotes","kwargs","parsed","convert_if_numeric","safe_wrap","strict","allowVars","NBrackets","chartype","i1","i2","nBrackets","PythonMath","E","pi","filbert","pythonRuntime","imports","ceil","copysign","fabs","factorial","fmod","frexp","fsum","acos","asin","atan","atan2","hypot","sin","tan","iterable","PythonOpenSesame","_objects","close","write","functions","copy_sketchpad","keyboard","mouse","set_subject_nr","sometimes","xy_circle","xy_distance","xy_from_polar","xy_grid","xy_random","xy_to_polar","auto_prepare","style_args","resp_args","playback_args","osc","attack","decay","rho","phi0","pole","phi","min_dist","PythonRandom","shuffle","temporaryValue","randomIndex","PythonString","fillchar","PythonParser","python_math","python_opensesame","python_random","python_string","_classes","_function_stack","_global_return_value","_inline_script","_node","_onConsole","_stack","_statement","_variables","parseFn","parse","locations","ranges","identifier","toNumber","node","return_values","index","_set_node","_get_element_value","return_value","_set_return_value","tmp_value","operator","_set_element_value","break","arguments","callee","tmp_arguments","caller","_get_element","_get_context","global_return_value","init","update","tmp_range","consequent","alternate","returnValue","argument","declarations","id","_process_nodes_jump","_process_nodes_timeout","_array_expression","_assignment_expression","_binary_expression","_block_statement","_break_statement","_call_expression","_empty_statement","_expression_statement","_for_statement","_for_in_statement","_function_expression","_identifier","_if_statement","_literal","_logical_expression","_member_expression","_new_expression","_program","_return_statement","_unary_expression","_update_expression","_variable_declaration","_variable_declarator","_while_statement","ast_tree","Log","varList","entry","onLog","_data","Experiment","JavaScriptWorkspace","debug","bidi","round_decimals","sessionid","valueOf","sound_freq","sound_sample_size","sound_channels","sound_buf_size","canvas_backend","pNr","subject_nr","subject_parity","def_str","_source","read_definition","init_display","datetime","opensesame_version","opensesame_codename","VERSION_NAME","init_clock","toUTCString","Runner","_mimetype","_name","_onFinished","_onLog","_target","_convertor","PythonWorkspace","_transfer","_setupContent","getElementById","autoDetectRenderer","antialias","transparent","resolution","confirm","fullScreen","introClick","introScreen","mimetype","onConsole","onFinished","onError","scaleMode","subject","_setupIntroScreen","_readSource","_build","parseScript","_clean_up","_fullScreenExit","_exitDisplay","_setupContext","OSWEB_VERSION_NAME","OSWEB_VERSION_NO","replaceAll","str1","str2","ignore","RegExp","_pySlice","osweb","printVersionInfo","getRunner","alertify","require","_font_string","sx","sy","ex","ey","bodyWidth","bodyLength","headWidth","pow","angle","_headWidth","p4","p1","p2","p3","p7","p6","doc","DOMParser","parseFromString","childNodes","some","nodeType","styleArgs","assign","textLine","fontBold","innerHTML","lineHeight","div","top1","top2","verticalAlign","scrollTop","ascent","descent","htmlNode","textBlock","currentStyle","elementStyle","_getStyle","nodeName","prev_height","x_pos","y_pos","text_dimensions","text_underline","attributes","textStyle","bounds","textElement","textContent","getBounds","dimension","_parseHtmlNode","points","_arrow_shape","polygon","drawCircle","shape","clone","drawEllipse","_fill","_background_color","_color","_penwidth","_match_env","ctx","px","getImageData","_convertColorValueToRGB","rx","ry","ux","uy","f","amp","exp","g","putImageData","fname","_fullScreenInit","verticles","drawPolygon","rgb","txt","_containsHTML","element_style","visibility","_initConstants","_bidi","_font_bold","_font_family","_font_italic","_font_size","_font_underline","_html","convertedColor","_DEFAULT_COLOURS","_isInt","isInteger","_DEFAULT_FONTS","_checkVal","VarStoreHandler","vars_proxy","Proxy","js","CanvasClass","eval","evalString"],"mappings":"aACE,SAASA,qBAAqBC,GAQ7B,IAPA,IAMIC,EAAUC,EANVC,EAAWH,EAAK,GAChBI,EAAcJ,EAAK,GACnBK,EAAiBL,EAAK,GAIHM,EAAI,EAAGC,EAAW,GACpCD,EAAIH,EAASK,OAAQF,IACzBJ,EAAUC,EAASG,GAChBG,OAAOC,UAAUC,eAAeC,KAAKC,EAAiBX,IAAYW,EAAgBX,IACpFK,EAASO,KAAKD,EAAgBX,GAAS,IAExCW,EAAgBX,GAAW,EAE5B,IAAID,KAAYG,EACZK,OAAOC,UAAUC,eAAeC,KAAKR,EAAaH,KACpDc,EAAQd,GAAYG,EAAYH,IAKlC,IAFGe,GAAqBA,EAAoBhB,GAEtCO,EAASC,QACdD,EAASU,OAATV,GAOD,OAHAW,EAAgBJ,KAAKK,MAAMD,EAAiBb,GAAkB,IAGvDe,uBAER,SAASA,uBAER,IADA,IAAIC,EACIf,EAAI,EAAGA,EAAIY,EAAgBV,OAAQF,IAAK,CAG/C,IAFA,IAAIgB,EAAiBJ,EAAgBZ,GACjCiB,GAAY,EACRC,EAAI,EAAGA,EAAIF,EAAed,OAAQgB,IAAK,CAC9C,IAAIC,EAAQH,EAAeE,GACG,IAA3BX,EAAgBY,KAAcF,GAAY,GAE3CA,IACFL,EAAgBQ,OAAOpB,IAAK,GAC5Be,EAASM,oBAAoBA,oBAAoBC,EAAIN,EAAe,KAItE,OAAOD,EAIR,IAAIQ,EAAmB,GAKnBhB,EAAkB,CACrBiB,EAAG,GAGAZ,EAAkB,GAGtB,SAASS,oBAAoB1B,GAG5B,GAAG4B,EAAiB5B,GACnB,OAAO4B,EAAiB5B,GAAU8B,QAGnC,IAAIC,EAASH,EAAiB5B,GAAY,CACzCK,EAAGL,EACHgC,GAAG,EACHF,QAAS,IAUV,OANAhB,EAAQd,GAAUW,KAAKoB,EAAOD,QAASC,EAAQA,EAAOD,QAASJ,qBAG/DK,EAAOC,GAAI,EAGJD,EAAOD,QAKfJ,oBAAoBO,EAAInB,EAGxBY,oBAAoBQ,EAAIN,EAGxBF,oBAAoBS,EAAI,SAASL,EAASM,EAAMC,GAC3CX,oBAAoBY,EAAER,EAASM,IAClC5B,OAAO+B,eAAeT,EAASM,EAAM,CAAEI,YAAY,EAAMC,IAAKJ,KAKhEX,oBAAoBgB,EAAI,SAASZ,GACX,oBAAXa,QAA0BA,OAAOC,aAC1CpC,OAAO+B,eAAeT,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DrC,OAAO+B,eAAeT,EAAS,aAAc,CAAEe,OAAO,KAQvDnB,oBAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,oBAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKzC,OAAO0C,OAAO,MAGvB,GAFAxB,oBAAoBgB,EAAEO,GACtBzC,OAAO+B,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,oBAAoBS,EAAEc,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,oBAAoB2B,EAAI,SAAStB,GAChC,IAAIM,EAASN,GAAUA,EAAOiB,WAC7B,SAASM,aAAe,OAAOvB,EAAgB,SAC/C,SAASwB,mBAAqB,OAAOxB,GAEtC,OADAL,oBAAoBS,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRX,oBAAoBY,EAAI,SAASkB,EAAQC,GAAY,OAAOjD,OAAOC,UAAUC,eAAeC,KAAK6C,EAAQC,IAGzG/B,oBAAoBgC,EAAI,GAExB,IAAIC,EAAaC,OAAqB,aAAIA,OAAqB,cAAK,GAChEC,EAAmBF,EAAW9C,KAAKuC,KAAKO,GAC5CA,EAAW9C,KAAOf,qBAClB6D,EAAaA,EAAWG,QACxB,IAAI,IAAIzD,EAAI,EAAGA,EAAIsD,EAAWpD,OAAQF,IAAKP,qBAAqB6D,EAAWtD,IAC3E,IAAIU,EAAsB8C,EAI1B5C,EAAgBJ,KAAK,CAAC,EAAE,IAEjBM,uB,yqHCtJY4C,E,WAMnB,kBAAaC,EAAMC,GAAQ,mBAEzBC,KAAKC,MAAQH,EACbE,KAAKE,QAAUH,EACfC,KAAKG,oBAAsB,CACzB,QAAS,UAAW,gBAAiB,uB,mDAapCC,EAAUC,EAAcC,EAAUC,EAAOC,GAE5CH,OAAwC,IAAjBA,EAAgC,KAAOA,EAC9DC,OAAgC,IAAbA,GAAmCA,EACtDC,OAA0B,IAAVA,EAAyB,KAAOA,EAChD,IAAI5B,EAAQ,KAsBZ,OApBIyB,KAAYJ,OACdA,KAAKS,eAAgB,EAEnB9B,EAD4B,iBAAnBqB,KAAKI,KAAuC,IAAbE,EAChCN,KAAKC,MAAMS,OAAOC,UAAUX,KAAKI,GAAW,KAAMI,GAElDR,KAAKI,GAEfJ,KAAKS,eAAgB,GAGV,MAAT9B,GAAiBqB,KAAKE,SAAWE,KAAYJ,KAAKE,UACpDF,KAAKE,QAAQO,eAAgB,EAE3B9B,EADoC,iBAA3BqB,KAAKE,QAAQE,KAAuC,IAAbE,EACxCN,KAAKC,MAAMS,OAAOC,UAAUX,KAAKE,QAAQE,GAAW,KAAMI,GAE1DR,KAAKE,QAAQE,GAEvBJ,KAAKE,QAAQO,eAAgB,GAGxB9B,I,8BAQJyB,GACH,OAAOJ,KAAKY,UAAUC,SAAST,K,wCAO/B,IAAIU,EAAY,GAChB,IAAK,IAAIV,KAAYJ,KACfA,KAAKG,oBAAoBU,SAAST,IACtCU,EAAUnE,KAAKyD,GAEjB,OAAOU,I,oCAOP,IADO,EACHC,EAAQ,GADL,6BAEcf,KAAKY,WAFnB,IAEP,2BAAqC,KAA5BR,EAA4B,QACnCW,EAAMX,GAAYJ,KAAKI,IAHlB,8BAKP,OAAOW,I,8BAQJX,EAAUzB,GACbqB,KAAKI,GAAYzB,I,kCAOZyB,IACsB,IAAvBJ,KAAKgB,IAAIZ,WACJJ,KAAKI,K,kCAQd,OAAOJ,KAAKY,Y,kCAQPK,GACLA,OAAgC,IAAbA,EAA4B,GAAKA,EADrC,mCAEMjB,KAAKY,WAFX,IAEf,2BAAqC,KAA5BR,EAA4B,QAC/Ba,EAASJ,SAAST,IACtBJ,KAAKkB,MAAMd,IAJE,mC,YCjHEe,E,WAKnB,eAAaC,GAAY,gBAEvBpB,KAAKqB,YAAcD,EACnBpB,KAAKsB,YAAc,E,kEAMnBtB,KAAKsB,WAAatB,KAAKuB,S,kCAQvB,OAAI7B,OAAO8B,YAAYC,IACdC,KAAKC,MAAMjC,OAAO8B,YAAYC,OAC5B/B,OAAO8B,YAAYI,UACrBF,KAAKC,MAAMjC,OAAO8B,YAAYI,cAE9B,IAAIC,MAAOC,Y,kCAQfC,GAEoB,OAArB/B,KAAKqB,aAEPrB,KAAKqB,YAAYW,QAAQC,QAAQC,KAAKH,EAAII,GAAUC,kBAAmB,Q,kCASzE,OAAyB,IAArBpC,KAAKsB,WACCtB,KAAKuB,OAASvB,KAAKsB,WAEpB,M,SCnDQe,E,WACnB,cAAajB,EAAYlD,EAAMoE,GAAQ,eAErCtC,KAAKE,QAAU,KACfF,KAAKgC,QAA2C,WAAhCZ,EAAWmB,YAAYrE,KAAqBkD,EAAaA,EAAWY,QACpFhC,KAAKwC,QAAUL,GAAUM,YAGzBzC,KAAK0C,MAAyC,WAAhCtB,EAAWmB,YAAYrE,KAAqB,IAAIiD,EAAMnB,MAAQoB,EAAWsB,MACvF1C,KAAK2C,MAAQ,EACb3C,KAAKoB,WAA8C,WAAhCA,EAAWmB,YAAYrE,KAAqB8B,KAAOoB,EACtEpB,KAAK9B,KAAOA,EACZ8B,KAAK4C,iBAAmB5C,KAAKgC,QAAQa,iBACrC7C,KAAK8C,eAAiB9C,KAAKgC,QAAQe,eACnC/C,KAAKU,OAASV,KAAKgC,QAAQgB,QAC3BhD,KAAKiD,KAAO,IAAIpD,EAASG,KAAuC,WAAhCoB,EAAWmB,YAAYrE,KAAqB,KAAO8B,KAAKoB,WAAW6B,M,6DAMnGjD,KAAKwC,QAAUL,GAAUe,gBAGJ,OAAjBlD,KAAKE,SAAoBF,KAAKgC,QAAQC,QAAQkB,eAEhDnD,KAAKgC,QAAQC,QAAQkB,aAAenD,KAAKE,QACzCF,KAAKgC,QAAQC,QAAQkB,aAAaC,S,qGAS7BC,M,kCAOFC,GACLtD,KAAK0C,MAAMa,MAAMD,K,kCASjB,OAAOtD,KAAK0C,MAAMc,S,kDAQLC,GAGb,OADAA,EAAOA,EAAKC,QACFrH,OAAS,GAA0B,MAAnBoH,EAAKE,OAAO,IAEpC3D,KAAK4D,SAASjH,KAAK8G,EAAK7D,MAAM,KACvB,GACG6D,EAAKpH,OAAS,GAA0B,MAAnBoH,EAAKE,OAAO,KAE3C3D,KAAK4D,SAASjH,KAAK8G,EAAK7D,MAAM,KACvB,K,kDAaI6D,EAAMI,EAAWvD,M,4CAOpBmD,M,oDAQIA,GAEd,GAAIzD,KAAK8D,cAAcL,GACrB,OAAO,EACF,MAEuBzD,KAAKgC,QAAQgB,QAAQe,UAAUN,GAFtD,WAEEO,EAFF,KAEOC,EAFP,UAGL,MAAY,QAARD,IACkB,IAAhBC,EAAK5H,QAGP2D,KAAKiD,KAAKiB,IAAID,EAAK,GAAIA,EAAK,KACrB,QAHPjE,KAAKgC,QAAQmC,UAAUC,SAAS,+BAAiCX,M,8CAe5DnB,GAOX,GALAtC,KAAKc,UAAY,GACjBd,KAAK4D,SAAW,GAChB5D,KAAKqE,QAGU,OAAX/B,EAEF,IADA,IAAIgC,EAAQhC,EAAOiC,MAAM,MAChBpI,EAAI,EAAGA,EAAImI,EAAMjI,OAAQF,IACd,KAAbmI,EAAMnI,KAAiD,IAAlC6D,KAAKwE,eAAeF,EAAMnI,KAClD6D,KAAKyE,WAAWH,EAAMnI,M,+EAa5B6D,KAAKoB,WAAW6B,KAAKiB,IAAI,SAAWlE,KAAK9B,KAAM8B,KAAK2C,OACpD3C,KAAK2C,QAGL3C,KAAKwC,QAAUL,GAAUuC,kBAGzB1E,KAAKgC,QAAQmC,UAAUQ,WAAW,WAAa3E,KAAK9B,MAGhC,aAAd8B,KAAK4E,MAA6C,aAAtB5E,KAAKE,QAAQ0E,MACvB,OAAjB5E,KAAKE,SAAoC,aAAdF,KAAK4E,MAEnC5E,KAAKE,QAAQ2E,sB,oDASHrB,GAEdA,OAAwB,IAATA,EAAwBxD,KAAK0C,MAAMc,OAASA,EAG3DxD,KAAKoB,WAAW6B,KAAKiB,IAAI,QAAUlE,KAAK9B,KAAMsF,K,gCAK9CxD,KAAKgC,QAAQmC,UAAUQ,WAAW,OAAS3E,KAAK9B,U,guDChK7C,SAAS4G,QAASC,GACvB,IAAK,IAAQA,GACX,MAAM,IAAIC,UAAU,gCAEtB,OAAO1I,OAAO2I,OAAOF,GAAWG,QAAO,SAACC,EAAKC,GAC3C,cAAyB9I,OAAO+I,QAAQD,GAAxC,eAAgD,mBAApCnG,EAAoC,KAA/BqG,EAA+B,KAC1CrG,KAAOkG,EACTA,EAAIlG,GAAKtC,KAAK2I,GAEdH,EAAIlG,GAAO,CAACqG,GAGhB,OAAOH,IACN,IAQE,SAASI,MAAOR,GACrB,IAAK,KAAcA,GACjB,MAAM,IAAIC,UAAU,iCAEtB,IAAMQ,EAAUlJ,OAAOmJ,KAAKV,GAE5B,OADa,sBAAOzI,OAAO2I,OAAOF,KACtBW,KAAI,SAAAC,GAAG,OAAI,IAAUH,EAASG,MAQrC,SAASC,cAAeC,GAE7B,OADeC,KAAOhB,QAAQe,IAazB,SAASE,YAAaF,EAAQL,GACnC,IAAK,IAAQK,GACX,MAAM,IAAIb,UAAU,kCAEtB,QAAyB,IAAbQ,GAA6B,IAAQA,IAA+B,IAAnBA,EAAQnJ,OACnE,OAAO,IAAQwJ,GACV,GAAK,IAAQL,GAEb,CACL,IAAIQ,EAAUlB,QAAQe,GAClBI,EAAO,IAAKD,EAASR,GAKzB,OAJAS,EAAO3J,OAAO+I,QAAQY,GAAMf,QAAO,SAACgB,EAAD,GAAyB,eAAjBjH,EAAiB,KAAZgG,EAAY,KAE1D,OADAiB,EAAKjH,GAAO,IAAQgG,GACbiB,IACN,IACIX,MAAM,cAAD,iBAAMS,GAAYC,IAR9B,MAAM,IAAIjB,UAAU,gGAqBjB,SAASmB,aAAcN,EAAQL,GACpC,IAAK,IAAQK,GACX,MAAM,IAAIb,UAAU,kCAGtB,QADuB,IAAZQ,IAAyBA,EAAU,KACzC,IAAQA,GACX,MAAM,IAAIR,UAAU,iHAEtB,OAAO1I,OAAO2I,OAAOY,GAAQH,KAAI,SAAAC,GAC/B,IAAM1C,EAA0B,IAAnBuC,EAAQnJ,OACjBsJ,EACA,IAAKA,EAAKH,GACRC,EAAOnJ,OAAOmJ,KAAKxC,GACrBmD,EAAO9J,OAAO2I,OAAOhC,GACzBmD,EAAO,IAAQA,GACf,IAAMC,EAAM,IAAU,KAAIZ,EAAMW,IAChC,sCAAYT,GAAQU,MAYjB,SAASC,QAAST,EAAQU,GAC/B,IAAK,IAAQV,GACX,MAAM,IAAIb,UAAU,kCAEtB,IAAK,KAASuB,IAAgB,KAARA,EACpB,MAAM,IAAIC,MAAM,gEAElB,IAAMR,EAAUlB,QAAQe,GAExB,OADAG,EAAQO,GAAKE,OACNlB,MAAMS,GAWR,SAASU,YAAab,EAAQL,GACnC,IAAK,IAAQK,GACX,MAAM,IAAIb,UAAU,kCAGtB,QADuB,IAAZQ,IAAyBA,EAAU,KACzC,IAAQA,GACX,MAAM,IAAIR,UAAU,wFAEtB,GAAuB,IAAnBQ,EAAQnJ,OACV,OAAO,IAAQwJ,GAEf,IAAIG,EAAUlB,QAAQe,GAClBI,EAAO,IAAKD,EAASR,GACzB,GAAI,KAAQS,GACV,MAAM,IAAIU,eAAJ,yBAAqCnB,EAArC,kCAMR,OAJAS,EAAO3J,OAAO+I,QAAQY,GAAMf,QAAO,SAACgB,EAAD,GAAyB,eAAjBjH,EAAiB,KAAZgG,EAAY,KAE1D,OADAiB,EAAKjH,GAAO,IAAQgG,GACbiB,IACN,IACIX,MAAM,cAAD,iBAAMS,GAAYC,IAa3B,SAASW,KAAMf,EAAQgB,EAAQC,GACpC,IAAK,IAAQjB,GACX,MAAM,IAAIb,UAAU,kCAMtB,GAHAa,EAAS,IAAIA,GAEbgB,EAASE,SAASF,IACb,KAAUA,GACb,MAAM,IAAI7B,UAAJ,6CAAoD6B,IAG5D,IAAKC,EACH,OAAOE,MAAMnB,EAAQgB,GAGvB,GAAK,KAASC,GAEP,CACL,IAAId,EAAUlB,QAAQe,GACtB,IAAKG,EAAQxJ,eAAesK,GAC1B,MAAM,IAAIH,eAAJ,gCAA4CG,EAA5C,eAGR,OADAd,EAAQc,GAAUE,MAAMhB,EAAQc,GAASD,GAClCtB,MAAMS,GAPb,MAAM,IAAIhB,UAAJ,uCAA8C8B,IAkBxD,SAASE,MAAOC,EAAMJ,GACpB,GAAIA,EAAS,EACX,IAAK,IAAI1K,EAAI,EAAGA,EAAI0K,EAAQ1K,IAC1B8K,EAAKC,QAAQD,EAAKE,YAGpB,IAAK,IAAIhL,EAAI,EAAGA,EAAI0K,EAAQ1K,IAC1B8K,EAAKtK,KAAKsK,EAAKnK,SAGnB,OAAOmK,EASF,SAASG,cAAQvB,EAAQwB,GAC9B,IAAK,IAAQxB,GACX,MAAM,IAAIb,UAAU,kCAEtB,IAAK,KAASqC,GACZ,MAAM,IAAIrC,UAAU,4DAEtB,IAAKa,EAAO,GAAGrJ,eAAe6K,GAC5B,MAAM,IAAIV,eAAJ,kBAA8BU,EAA9B,0BAER,OAAOxB,EAAOX,QAAO,SAAChI,EAAQ4C,GAC5B,IAAMsH,EAASL,SAASjH,EAAKuH,IAC7B,IAAK,KAAUD,GACb,MAAM,IAAIpC,UAAU,4CAEtB,IAAK,IAAI7I,EAAI,EAAGA,EAAIiL,EAAQjL,IAC1Be,EAAOP,KAAKmD,GAEd,OAAO5C,IACN,I,idCrOgBoK,G,iDAOnB,cAAalG,EAAYlD,EAAMoE,GAAQ,6BAErC,cAAMlB,EAAYlD,EAAMoE,IAGnBiF,YAAc,+BACnB,EAAK1B,OAAS,KACd,EAAK2B,QAAU,GAGf,EAAKC,UAAY,GACjB,EAAKD,QAAU,GACf,EAAKE,OAAS,EACd,EAAKC,UAAY,KACjB,EAAKC,YAAc,GACnB,EAAKC,cAAe,EAGpB,EAAKC,YAAYxF,GAlBoB,E,6DAuBrCtC,KAAKwC,QAAUL,GAAUe,gBACzB,uD,4CAWUe,GAAM,WAChB,OAAK,IAAQA,GACNA,EAAKyB,KAAK,SAAAqC,GACf,OAAI,IAAQA,GACH,EAAKC,WAAWD,GAEhB,EAAK/F,QAAQgB,QAAQrC,UAAUoH,MALf9D,I,oCAY3BjE,KAAK6F,OAAS,GACd7F,KAAKiD,KAAKgF,OAAS,EACnBjI,KAAKiD,KAAKiF,OAAS,EACnBlI,KAAKiD,KAAKkF,KAAO,EACjBnI,KAAKiD,KAAKmF,OAAS,KACnBpI,KAAKiD,KAAKoF,MAAQ,SAClBrI,KAAKiD,KAAKnD,KAAO,GACjBE,KAAKiD,KAAKqF,SAAW,QACrBtI,KAAKwH,QAAU,GACfxH,KAAK0H,OAAS,EACd1H,KAAK4H,YAAc,GACnB5H,KAAK6H,cAAe,I,8CAOTvF,GAOX,GALAtC,KAAK4D,SAAW,GAChB5D,KAAKc,UAAY,GACjBd,KAAKqE,QAGS,MAAV/B,EAAgB,CAElB,IADA,IAAMgC,EAAQhC,EAAOiC,MAAM,MAClBpI,EAAI,EAAGA,EAAImI,EAAMjI,OAAQF,IAChC,GAAkB,KAAbmI,EAAMnI,KAAiD,IAAlC6D,KAAKwE,eAAeF,EAAMnI,IAAgB,OACjC6D,KAAKU,OAAO6D,MAAMD,EAAMnI,IADS,SAC3DoM,EAD2D,KAC3CC,EAD2C,WAGlE,OAAQD,GACN,IAAK,MACCC,EAAOnM,OAAS,IAAG2D,KAAKiD,KAAKnD,KAAO0I,EAAO,IAC/C,MACF,IAAK,WACH,GAAIA,EAAOnM,QAAU,EAAG,CACtB2D,KAAKgC,QAAQmC,UAAUC,SAAvB,6CAAsEpE,KAAK9B,OAC3E,MAEF,IAAMkH,EAAQoD,EAAO,GACftK,EAAOsK,EAAO,GAChB7J,EAAQqB,KAAKU,OAAO+H,cAAcD,EAAO,IAI5B,OAFjB7J,EAAQ,IAASA,GAAS+J,OAAO/J,GAASA,GAEhC,IAGM,QADdA,EAAQqB,KAAKgC,QAAQ2G,cAAcC,SAASjK,EAAMiB,MAAM,OAEtDjB,EAAQA,EAAMkK,KAAK,SAGIC,IAAvB9I,KAAK6F,OAAOT,KACdpF,KAAK6F,OAAOT,GAAS,IAEvBpF,KAAK6F,OAAOT,GAAOlH,GAAQS,EAC3B,MACF,IAAK,gBACHqB,KAAK4H,YAAYjL,KAAK,CAACiJ,cAAe,KAEtC,MACF,IAAK,UACH5F,KAAK4H,YAAYjL,KAAK,CAACoJ,YAAa,CAACyC,KAErC,MACF,IAAK,gBACHxI,KAAK4H,YAAYjL,KAAK,CAACwJ,aAAc,CAACqC,KAEtC,MACF,IAAK,QACHxI,KAAK4H,YAAYjL,KAAK,CAAC,SAACkJ,EAAQ5B,GAAT,OAAkB4B,EAAOjG,MAAP,MAAAiG,EAAM,IAAU5B,KAAO,CAACuE,KAEjE,MACF,IAAK,OACHxI,KAAK4H,YAAYjL,KAAK,CAAC2J,QAAD,IAAckC,KAEpC,MACF,IAAK,SACHxI,KAAK4H,YAAYjL,KAAK,CAAC,IAAQ,CAAC6L,KAEhC,MACF,IAAK,UACHxI,KAAK4H,YAAYjL,KAAK,CAAC+J,YAAa,CAAC8B,KAErC,MACF,IAAK,OACHxI,KAAK4H,YAAYjL,KAAK,CAACiK,KAAD,IAAW4B,KAEjC,MACF,IAAK,SACHxI,KAAK4H,YAAYjL,KAAK,CAACyK,cAAD,IAAaoB,MAO3CxI,KAAKiD,KAAKgF,OAASjI,KAAK6F,OAAOxJ,U,8CAQtB+I,GAEX,GAAIA,KAASpF,KAAK6F,OAChB,IAAK,IAAMzF,KAAYJ,KAAK6F,OAAOT,GAAQ,CAEzC,IAAIzG,EAAQqB,KAAK6F,OAAOT,GAAOhF,GAG/B,GAAqB,WAAjB,IAAOzB,GAET,IAEEA,EAAQqB,KAAKgC,QAAQ2G,cAAcI,cAAcpK,GACjD,MAAOqK,GAEPhJ,KAAKgC,QAAQmC,UAAUC,SACrB,kDAAoDpE,KAAK9B,KAAO,KAAOS,EAAQ,UAInFA,EAAQqB,KAAKgC,QAAQgB,QAAQrC,UAAUhC,GAGzCqB,KAAKoB,WAAW6B,KAAKiB,IAAI9D,EAAUzB,M,wCASc,cAAjDqB,KAAKoB,WAAW6H,MAAMC,OAAOlJ,KAAKiD,KAAKnD,OACzCE,KAAKgC,QAAQmC,UAAUC,SAAS,wDAChCpE,KAAK9B,KAAO,KAAO8B,KAAKiD,KAAKnD,KAAO,KAEtCE,KAAK6H,cAAe,EACpB,mDACA7H,KAAKmJ,mB,gCAIA,WAGL,GAFA,gDAEKnJ,KAAK6H,aAAc,CAEtB7H,KAAK6F,OAAS7F,KAAK4H,YAAY1C,QAAO,SAACkE,EAAD,kBAAQC,EAAR,KAAcpF,EAAd,YACpCoF,EAAI,WAAJ,GAAKD,GAAL,WAAc,EAAKpB,WAAW/D,QAAQjE,KAAK6F,QAE7C7F,KAAKiD,KAAKgF,OAASjI,KAAK6F,OAAOxJ,OAI/B,IADA,IAAMiN,EAAe5H,KAAK6H,MAAMvJ,KAAKiD,KAAK1E,IAAI,WACrClB,EAAI,EAAGA,EAAIiM,EAAcjM,IAChC,IAAK,IAAIlB,EAAI,EAAGA,EAAI6D,KAAKiD,KAAKgF,OAAQ9L,IACpC6D,KAAKwH,QAAQ7K,KAAKR,GAKtB,IAAMqN,EAAiBxJ,KAAKiD,KAAK1E,IAAI,UAAY+K,EACjD,GAAIE,EAAiB,EAAG,CAEtB,IAAMC,EAAY/H,KAAK6H,MAAMvJ,KAAKiD,KAAKgF,OAASuB,GAE5CvB,EAAS,IAAIyB,MAAM1J,KAAKiD,KAAKgF,QAAQxC,QAEV,WAA3BzF,KAAKiD,KAAK1E,IAAI,WAIhB0J,EAAS,IAAQA,IAGnB,IAAI0B,EAAe1B,EAAO1K,OAAO,EAAGkM,GAEpCzJ,KAAKwH,QAAL,cAAmBxH,KAAKwH,SAAxB,IAAoCmC,IAIP,WAA3B3J,KAAKiD,KAAK1E,IAAI,WAChByB,KAAKwH,QAAU,IAAQxH,KAAKwH,UAG9BxH,KAAK6H,cAAe,EAGtB,IAAM+B,EAAe5J,KAAKiD,KAAK1E,IAAI,YAenC,GAdAyB,KAAKyH,UAAY,CAAC,QAAS,IAAI5G,SAAS+I,GACpC,KACA5J,KAAKU,OAAOmJ,aAAaD,GAGa,IAAtC5J,KAAKoB,WAAW6B,KAAK6G,cAAsB,IAAS9J,KAAK0H,UAC3D1H,KAAKgC,QAAQmC,UAAU4F,IAAI,oBAAsB/J,KAAK0H,QACtD1H,KAAKwH,QAAQ7K,KAAKqD,KAAK0H,QACQ,WAA3B1H,KAAKiD,KAAK1E,IAAI,WAChByB,KAAKwH,QAAU,IAAQxH,KAAKwH,UAE9BxH,KAAKoB,WAAW6B,KAAK6G,aAAe,GAGlC9J,KAAKwH,QAAQnL,OAAS,EAAG,CAI3B,GAHA2D,KAAK0H,OAAS1H,KAAKwH,QAAQ1K,QAC3BkD,KAAKgK,YAAYhK,KAAK0H,QAEC,OAAnB1H,KAAKyH,UAAoB,CAC3BzH,KAAK4C,iBAAL,KAAgC5C,KAEhC,IAAMiK,EAAUjK,KAAKU,OAAOC,UAAUX,KAAKyH,UAAW,MAAM,GAE5D,IAA6C,IAAzCzH,KAAK4C,iBAAiBsH,MAAMD,GAE9B,YADAjK,KAAKmK,YAKmD,aAAxDnK,KAAKgC,QAAQoI,WAAWlB,OAAOlJ,KAAKiD,KAAKnD,MAAM8E,KACjD5E,KAAKgC,QAAQoI,WAAWC,QAAQrK,KAAKiD,KAAKnD,KAAME,MAEhDA,KAAKgC,QAAQoI,WAAWE,QAAQtK,KAAKiD,KAAKnD,KAAME,WAIlDA,KAAKmK,gB,MA9RuB9H,GCrBbkI,G,WAOnB,kBAAanJ,EAAYoJ,EAASC,GAAS,mBAEzCzK,KAAKqB,YAAcD,EACnBpB,KAAK0K,cAA+B,IAAZD,EAA2B,GAAKA,EACxDzK,KAAK2K,cAA+B,IAAZH,EAA2B,KAAOA,EAG1DxK,KAAK4K,cAAgB,CACnB,CAAC,QAAS,IAAK,SACf,CAAC,IAAK,WAAY,YAClB,CAAC,IAAK,UAAW,WACjB,CAAC,IAAK,OAAQ,QACd,CAAC,IAAK,SAAU,UAChB,CAAC,IAAK,YAAa,aACnB,CAAC,IAAK,QAAS,SACf,CAAC,IAAK,cAAe,YAAa,cAAe,aACjD,CAAC,IAAK,eAAgB,aAAc,eAAgB,cACpD,CAAC,IAAK,WAAY,YAClB,CAAC,IAAK,OAAQ,QACd,CAAC,IAAK,QAAS,SACf,CAAC,IAAK,QAAS,SACf,CAAC,IAAK,SAAU,UAChB,CAAC,IAAK,QAAS,SACf,CAAC,KACD,CAAC,KACD,CAAC,KACD,CAAC,KACD,CAAC,KACD,CAAC,KACD,CAAC,KACD,CAAC,KACD,CAAC,KACD,CAAC,KACD,CAAC,IAAK,SAAU,UAChB,CAAC,IAAK,QAAS,SACf,CAAC,IAAK,YAAa,aACnB,CAAC,IAAK,OAAQ,QACd,CAAC,IAAK,UAAW,WACjB,CAAC,IAAK,WAAY,YAClB,CAAC,IAAK,KAAM,MACZ,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,YAAa,aACd,CAAC,WAAY,YACb,CAAC,YAAa,aACd,CAAC,WAAY,YACb,CAAC,cAAe,eAChB,CAAC,YAAa,aACd,CAAC,UAAW,WACZ,CAAC,KAAM,YAAa,aACpB,CAAC,IAAK,QAAS,QAAS,QAAS,SACjC,CAAC,IAAK,aAAc,cACpB,CAAC,IAAK,YAAa,aACnB,CAAC,KAAM,KAAM,OAAQ,QACrB,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,KAAM,MACP,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,QAAS,SACV,CAAC,OAAQ,QACT,CAAC,SAAU,aAAc,SAAU,cACnC,CAAC,QAAS,YAAa,QAAS,aAChC,CAAC,OAAQ,WAAY,OAAQ,YAC7B,CAAC,SAAU,cAAe,SAAU,eACpC,CAAC,QAAS,aAAc,QAAS,cACjC,CAAC,OAAQ,YAAa,SAAU,OAAQ,YAAa,UACrD,CAAC,UAAW,SAAU,UAAW,UACjC,CAAC,YAAa,WAAY,YAAa,YACvC,CAAC,QAAS,SACV,CAAC,cAAe,YAAa,cAAe,aAC5C,CAAC,YAAa,WAAY,YAAa,YACvC,CAAC,WAAY,YACb,CAAC,QAAS,SACV,CAAC,QAAS,QAAS,SAAU,UAC7B,CAAC,MAAO,OACR,CAAC,YAAa,aACd,CAAC,MAAO,OACR,CAAC,OAAQ,QACT,CAAC,SAAU,UACX,CAAC,SAAU,UACX,CAAC,SAAU,UAAW,SAAU,WAChC,CAAC,QAAS,SACV,CAAC,SAAU,UACX,CAAC,QAAS,SACV,CAAC,eAAgB,gBACjB,CAAC,QAAS,YAAa,QAAS,YAAa,SAAU,SAAU,aAAc,cAC/E,CAAC,QAAS,aAAc,QAAS,aAAc,SAAU,cAAe,SAAU,eAElF,CAAC,OAAQ,QACT,CAAC,QAAS,SACV,CAAC,OAAQ,QACT,CAAC,WAAY,YACb,CAAC,YAAa,aACd,CAAC,OAAQ,QACT,CAAC,UAAW,WACZ,CAAC,cAAe,gB,iGASQC,GAG1B,IAFA,IACIC,EADEC,EAAW,GAER5O,EAAI,EAAGA,EAAI0O,EAAUxO,OAAQF,IAAK,CAEzC,QAAwB,KADxB2O,EAAW9K,KAAKgL,UAAUH,EAAU1O,KAElC,MAAM,IAAIwK,eAAJ,uBAAmCkE,EAAU1O,GAA7C,MAER4O,EAASpO,KAAKmO,EAAS,IAEzB,OAAOC,I,8CAQIP,EAASC,GAEpBzK,KAAK0K,SAAWD,EAChBzK,KAAK2K,SAAWH,I,0CAQPS,GACT,QAAsB,IAAXA,EAST,OAAO,KARP,IAAK,IAAI9O,EAAI,EAAGA,EAAI6D,KAAK4K,cAAcvO,OAAQF,IAC7C,IAAK,IAAIkB,EAAI,EAAGA,EAAI2C,KAAK4K,cAAczO,GAAGE,OAAQgB,IAChD,GAAI2C,KAAK4K,cAAczO,GAAGkB,KAAO4N,EAC/B,OAAOjL,KAAK4K,cAAczO,K,oCAYlC,OAAO,I,sCAQAqO,EAASC,GAEhBzK,KAAK0K,cAA+B,IAAZD,EAA2BzK,KAAK0K,SAAWD,EACnEzK,KAAK2K,cAA+B,IAAZH,EAA2BxK,KAAK2K,SAAWH,EAE1C,OAArBxK,KAAKqB,aAEPrB,KAAKqB,YAAYW,QAAQC,QAAQC,KAAKlC,KAAK2K,SAAUxI,GAAU+I,kBAAmBlL,KAAK0K,Y,0CASzF,IAAIS,EAAa,GAYjB,OAXsD,OAAlDnL,KAAKqB,YAAYW,QAAQC,QAAQmJ,gBACkC,IAAjEpL,KAAKqB,YAAYW,QAAQC,QAAQmJ,aAAaC,MAAMC,UACtDH,EAAWxO,KAAK,UAEkD,IAAhEqD,KAAKqB,YAAYW,QAAQC,QAAQmJ,aAAaC,MAAME,SACtDJ,EAAWxO,KAAK,SAEiD,IAA/DqD,KAAKqB,YAAYW,QAAQC,QAAQmJ,aAAaC,MAAMG,QACtDL,EAAWxO,KAAK,QAGbwO,I,kEAOcM,GAErB,IAAgB,IAAZA,EAEFzL,KAAKqB,YAAYW,QAAQ0J,UAAUC,KAAKC,YACnC,CAEL,IAAIC,EAAMC,SAASC,cAAc,SACjCD,SAASjD,KAAKmD,YAAYH,GAC1BA,EAAID,QACJE,SAASjD,KAAKoD,YAAYJ,Q,6eC9PXK,G,iEAEnB,kBAAa9K,EAAYlD,EAAMoE,GAAQ,iCAErC,cAAMlB,EAAYlD,EAAMoE,IAGnBoF,QAAU,EACf,EAAKwB,OAAS,KACd,EAAKvB,UAAY,KAGjB,EAAKJ,YAAc,qCACnB,EAAK4E,eAAiB,MACtB,EAAKlD,MAAQ,KAGb,EAAKnB,YAAYxF,GAfoB,E,iEAqBrCtC,KAAKwC,QAAUL,GAAUe,gBAGzB,2D,4DAMIlD,KAAK0H,OAAS1H,KAAKiJ,MAAM5M,OACtB2D,KAAKiJ,MAAMjJ,KAAK0H,QAAQ5H,QAAQE,KAAKgC,QAAQoI,WAAWlB,SAAY,EACvElJ,KAAKgC,QAAQmC,UAAUC,SAAS,iEAAmEpE,KAAK9B,KAAO,KAAO8B,KAAKiJ,MAAMjJ,KAAK0H,QAAQ5H,KAAK5B,KAAO,MAG1J8B,KAAK0H,SAGL1H,KAAKkJ,OAAOvM,KAAK,CACf,KAAQqD,KAAKiJ,MAAMjJ,KAAK0H,OAAS,GAAG5H,KACpC,KAAQE,KAAKU,OAAOmJ,aAAa7J,KAAKiJ,MAAMjJ,KAAK0H,OAAS,GAAG0E,QAI/DpM,KAAKgC,QAAQoI,WAAWC,QAAQrK,KAAKiJ,MAAMjJ,KAAK0H,OAAS,GAAG5H,KAAME,QAIpEA,KAAK0H,OAAS,EAGd1H,KAAKgC,QAAQqK,WAAWlF,MAGE,aAAtBnH,KAAKE,QAAQ0E,KACf5E,KAAKE,QAAQ2E,oBAGb7E,KAAKgC,QAAQoI,WAAWhH,IAAIpD,KAAK9B,KAAM8B,KAAKE,Y,oCAOhDF,KAAKiJ,MAAQ,GACbjJ,KAAKiD,KAAKkJ,eAAiB,Q,8CAOhB7J,GAOX,GALAtC,KAAKc,UAAY,GACjBd,KAAK4D,SAAW,GAChB5D,KAAKqE,QAGU,OAAX/B,EAEF,IADA,IAAIgC,EAAQhC,EAAOiC,MAAM,MAChBpI,EAAI,EAAGA,EAAImI,EAAMjI,OAAQF,IAChC,GAAkB,KAAbmI,EAAMnI,KAAiD,IAAlC6D,KAAKwE,eAAeF,EAAMnI,IAAgB,CAClE,IAAImQ,EAAStM,KAAKU,OAAO6D,MAAMD,EAAMnI,IACrC,GAAKmQ,EAAOjQ,OAAS,GAAqB,QAAdiQ,EAAO,GAAe,CAChD,IAAIxM,EAAOwM,EAAO,GACdF,EAAO,SACPE,EAAOjQ,OAAS,IAClB+P,EAAOE,EAAO,IAGhBtM,KAAKiJ,MAAMtM,KAAK,CACd,KAAQmD,EACR,KAAQsM,Q,wCAWlB,uDAGiC,QAA7BpM,KAAKiD,KAAKkJ,eACZnM,KAAK2H,UAAY,IAAI4C,GAASvK,KAAKoB,YAEnCpB,KAAK2H,UAAY,KAInB3H,KAAK0H,OAAS,EACd1H,KAAKkJ,OAAS,GAGdlJ,KAAK6E,sB,gCASL,GAHA,mDAGI7E,KAAK0H,OAAS1H,KAAKkJ,OAAO7M,OAAQ,CAEf,IAAhB2D,KAAK0H,QAA+C,QAA7B1H,KAAKiD,KAAKkJ,gBACpCnM,KAAK2H,UAAU4E,QAIjBvM,KAAK0H,SACL,IAAM8E,EAAcxM,KAAKkJ,OAAOlJ,KAAK0H,OAAS,GAG9C1H,KAAKgC,QAAQa,iBAAb,KAAwC7C,MAGsB,IAA1DA,KAAKgC,QAAQa,iBAAiBqH,MAAMsC,EAAYJ,MAElDpM,KAAKgC,QAAQoI,WAAWhH,IAAIoJ,EAAY1M,KAAME,MAG9CA,KAAKoD,WAIPpD,KAAKmK,gB,UAzJ2B9H,G,kqDCEjBoK,G,uEACnB,oBAAarL,EAAYlD,EAAMoE,GAAQ,mCAErC,cAAMlB,EAAYlD,EAAMoE,IAEnBiF,YAAc,+BAEnB,EAAKmF,MAAQ,GAEb,EAAKC,SAAW,GAEhB,EAAK7E,YAAYxF,GAVoB,E,qEAa1BA,GACX,GAAe,OAAXA,EAAJ,CADmB,6CAELA,EAAOiC,MAAM,OAFR,IAEnB,2BAAkC,KAAzB9G,EAAyB,UACDuC,KAAKoB,WAAWV,OAAOqD,UAAUtG,GADhC,WACzBuG,EADyB,KACpB4I,EADoB,KACXC,EADW,KAEhC,GAAY,QAAR7I,EAAe,WACS4I,EADT,GACVxM,EADU,KACAzB,EADA,KAEjBqB,KAAKiD,KAAK7C,GAAYzB,EAExB,GAAY,QAARqF,GAAiB4I,EAAQvQ,OAAQ,CACnC,IAAMyQ,EAAO,CACXC,UAAWH,EAAQ9P,QACnBkQ,WAAYH,EAAOI,OAAS,EAC5BC,SAAUL,EAAOM,KAAO,EACxBC,OAAQP,EAAOQ,OAAS,UAE1BrN,KAAK0M,MAAM/P,KAAKmQ,KAfD,kC,wCAoBV,WACT9M,KAAKgC,QAAQmC,UAAUQ,WAAvB,qCAAgE3E,KAAK9B,KAArE,MACA8B,KAAK2M,SAAW3M,KAAK0M,MAAMxH,QAAO,SAAChI,EAAQoQ,GACzC,IAAMP,EAAY,EAAK/K,QAAQgB,QAAQrC,UAAU2M,EAAWP,UAAW,EAAK9J,MACtEnD,EAAO,EAAKkC,QAAQoI,WAAWlB,OAAO6D,GAC5C,IAAKjN,EAAM,CACT,IAAMiK,EAAM,eAAH,OAAkB,EAAK7L,KAAvB,oCAAuD6O,GAEhE,MADA,EAAK/K,QAAQmC,UAAUC,SAAS2F,GAC1B,IAAIvD,MAAMuD,GAGlB,GADA,EAAK/H,QAAQa,iBAAb,KAAwC,GACuB,IAA3D,EAAKb,QAAQa,iBAAiBqH,MAAMoD,EAAWF,QAAkB,CACnE,IAAMJ,EAAa,EAAKhL,QAAQgB,QAAQrC,UAAU2M,EAAWN,WAAY,EAAK/J,MACxEiK,EAAW,EAAKlL,QAAQgB,QAAQrC,UAAU2M,EAAWJ,SAAU,EAAKjK,MAC1E/F,EAAOP,KAAK,IAAI4Q,GAAKzN,EAAMiN,EAAWC,EAAYE,EAChDI,EAAWP,YAAc,EAAK9J,KAAK1E,IAAI,oBAE3C,OAAOrB,IACN,IACH,2D,gCAIA8C,KAAKgC,QAAQmC,UAAUQ,WAAvB,mCAA8D3E,KAAK9B,KAAnE,MACA,qDAFK,6CAIY8B,KAAK2M,UAJjB,IAIL,2BAAgC,KAAvBG,EAAuB,QAC9B9M,KAAKgC,QAAQoI,WAAWC,QAAQyC,EAAKC,UAAW/M,OAL7C,8BAOLA,KAAK2M,SAAWa,IAAOxN,KAAK2M,SAAU,cAPjC,6CASY3M,KAAK2M,UATjB,IASL,2BAAgC,KAAvBG,EAAuB,QAC9B9M,KAAKgC,QAAQmC,UAAUQ,WAAvB,0BAAqDmI,EAAKC,UAA1D,MACAD,EAAKW,UAXF,8BAcLzN,KAAK0N,OAAS,GACd1N,KAAK2N,GAAK,EACV3N,KAAK4N,GAAKpM,YAAYC,MACtBzB,KAAK6N,SAAU,EAEf7N,KAAK8N,U,oCAIL,KAAO9N,KAAK2M,SAAStQ,OAAS,GAAK2D,KAAK2M,SAAS,GAAGoB,QAAQ/N,KAAK2N,KAC/D3N,KAAK0N,OAAO/Q,KAAKqD,KAAK2M,SAAS7P,SAEjCkD,KAAK0N,OAASF,IAAOxN,KAAK0N,OAAQ,YAClC,IALO,EAKHM,EAAU,GALP,uCAMUhO,KAAK0N,QANf,IAMP,2BAA8B,KAArBZ,EAAqB,QACxBmB,EAASnB,EAAKoB,OACdD,IAAWnB,EAAKqB,QAIhBF,IAAWnB,EAAKsB,UAClBpO,KAAK6N,SAAU,GAJfG,EAAQrR,KAAKmQ,IATV,8BAiBP,IADA9M,KAAK0N,OAASM,EACPhO,KAAK0N,OAAOrR,OAAS,GAAK2D,KAAK0N,OAAO,GAAGW,QAAQrO,KAAK2N,KAC3D3N,KAAK0N,OAAO5Q,QAId,GADAkD,KAAK2N,GAAKnM,YAAYC,MAAQzB,KAAK4N,GAC/B5N,KAAK6N,SAAW7N,KAAK2N,GAAK3N,KAAKiD,KAAK1E,IAAI,cACzC,CAAC4D,GAAUmM,YAAanM,GAAUoM,WAAYpM,GAAUqM,aACtD3N,SAASb,KAAKgC,QAAQC,QAAQwM,QACjCC,WAAW1O,KAAK8N,MAAM5O,KAAKc,MAAO,OAC7B,8CAEYA,KAAK0N,QAFjB,IAEL,2BAA8B,KAArBZ,EAAqB,QAC5B9M,KAAKgC,QAAQmC,UAAUQ,WAAvB,wBAAmDmI,EAAKC,UAAxD,MACAD,EAAK6B,QAJF,8BAML3O,KAAKmK,iB,YA9G6B9H,GAmHlCkL,G,WAMJ,cAAazN,EAAMiN,EAAWC,EAAYE,EAAU0B,GAAc,wCALlD,GAKkD,mBAJxD,GAIwD,oBAHvD,GAGuD,oBAFvD,GAGT5O,KAAKF,KAAOA,EACZE,KAAK+M,UAAYA,EACjB/M,KAAKgN,WAAaA,EAClBhN,KAAKkN,SAAWA,EAChBlN,KAAK4O,aAAeA,EACpB5O,KAAK6O,MAAQ7O,KAAK8O,cAClB9O,KAAK+O,WAAa,KAClB/O,KAAKkO,KAAO,WAAQ,MAAM,IAAI1H,MAAM,kC,uDAG5B,WACR,IAAKwI,KAAWhP,KAAKF,KAAKmP,WACxB,MAAM,IAAIzI,MAAJ,eAAkBxG,KAAK+M,UAAvB,oDAER/M,KAAK+O,WAAa/O,KAAKF,KAAKmP,YAC5BjP,KAAK+O,WAAWG,OAChBlP,KAAKkO,KAAO,WAAM,IAQViB,EARU,EAEQ,EAAKJ,WAAWG,MAAK,GAArCvQ,EAFQ,EAERA,MAAOyQ,EAFC,EAEDA,KACf,OAAc,IAAVzQ,GACF,EAAKkQ,MAAQ,EAAKT,QACX,EAAKA,UAED,IAATgB,GAGAD,EADE,EAAKP,aACI,EAAKR,QAEL,EAAKiB,SAElB,EAAKR,MAAQM,EACN,EAAKN,OAEP,EAAKA,OAEd7O,KAAK6O,MAAQ7O,KAAKmO,U,sCAGXR,GACP,OAAOA,GAAM3N,KAAKgN,a,sCAGXW,GACP,QAAIA,EAAK3N,KAAKkN,WAGPlN,KAAK2O,S,kCAKZ,OAAsB,IADP3O,KAAK+O,WAAWG,MAAK,GACvBE,OACXpP,KAAK6O,MAAQ7O,KAAKqP,UACX,O,QCpLQC,G,WAQnB,eAAalO,EAAYoJ,EAAS+E,EAAY9D,GAAS,gBAErDzL,KAAKqB,YAAcD,EACnBpB,KAAK2K,cAA+B,IAAZH,EAA2B,KAAOA,EAC1DxK,KAAKwP,iBAAqC,IAAfD,EAA8B,KAAOA,EAChEvP,KAAKyP,cAA+B,IAAZhE,GAAmCA,EAG3DzL,KAAK4K,cAAgB,CACnB,CAAC,IAAK,eACN,CAAC,IAAK,iBACN,CAAC,IAAK,gBACN,CAAC,IAAK,aACN,CAAC,IAAK,gB,8FASkBC,GAG1B,IADA,IAAIE,EAAW,GACN5O,EAAI,EAAGA,EAAI0O,EAAUxO,OAAQF,IAAK,CACzC,IAAIuT,EAAW1P,KAAKgL,UAAUH,EAAU1O,IACxC4O,EAASpO,KAAK+S,EAAS,IAEzB,OAAO3E,I,8CASIP,EAAS+E,EAAY9D,GAEhCzL,KAAK2K,SAAWH,EAChBxK,KAAKwP,YAAcD,EACnBvP,KAAKyP,SAAWhE,I,0CAQPR,GACT,QAAsB,IAAXA,EAST,OAAO,KARP,IAAK,IAAI9O,EAAI,EAAGA,EAAI6D,KAAK4K,cAAcvO,OAAQF,IAC7C,IAAK,IAAIkB,EAAI,EAAGA,EAAI2C,KAAK4K,cAAczO,GAAGE,OAAQgB,IAChD,GAAI2C,KAAK4K,cAAczO,GAAGkB,KAAO4N,EAC/B,OAAOjL,KAAK4K,cAAczO,K,oCAYlC,OAAO,I,0CASEqO,EAAS+E,EAAY9D,GAE9BzL,KAAK2K,cAA+B,IAAZH,EAA2BxK,KAAK2K,SAAWH,EACnExK,KAAKwP,iBAAqC,IAAfD,EAA8BvP,KAAKwP,YAAcD,EAC5EvP,KAAKyP,cAA+B,IAAZhE,EAA2BzL,KAAKyP,SAAWhE,EAE1C,OAArBzL,KAAKqB,cAEPrB,KAAK2P,YAAY3P,KAAKyP,UAGtBzP,KAAKqB,YAAYW,QAAQC,QAAQC,KAAKlC,KAAK2K,SAAUxI,GAAUyN,eAAgB5P,KAAKwP,gB,wCAWtF,OAAyD,OAArDxP,KAAKqB,YAAYW,QAAQC,QAAQ4N,gBAC5B,CACL,OAAU7P,KAAKqB,YAAYW,QAAQC,QAAQ4N,gBAAgBC,OAC3D,EAAK9P,KAAKqB,YAAYW,QAAQC,QAAQ4N,gBAAgBxE,MAAM0E,QAC5D,EAAK/P,KAAKqB,YAAYW,QAAQC,QAAQ4N,gBAAgBxE,MAAM2E,SAGvD,CACL,QAAW,EACX,GAAM,EACN,GAAM,K,gDAYV,OAAqD,OAAjDhQ,KAAKqB,YAAYW,QAAQiO,OAAOC,aAC3B,CACL,QAAW,CAAoE,IAAlElQ,KAAKqB,YAAYW,QAAQC,QAAQkO,gBAAgB9E,MAAMJ,OACC,IAAlEjL,KAAKqB,YAAYW,QAAQC,QAAQkO,gBAAgB9E,MAAMJ,OACW,IAAlEjL,KAAKqB,YAAYW,QAAQC,QAAQkO,gBAAgB9E,MAAMJ,SAIrD,CACL,QAAW,CAAC,KAAM,KAAM,S,sCAMrBmF,M,8CAMIC,GAEXrQ,KAAKyP,SAAWY,EAKdrQ,KAAKqB,YAAYW,QAAQ0J,UAAUC,KAAK2E,MAAMC,QAFnC,IAATF,EAEqD,UAGA,W,0fCzJxCG,G,uFAEnB,yBAAapP,EAAYlD,EAAMoE,GAAQ,wCAErC,cAAMlB,EAAYlD,EAAMoE,IAGnBmO,mBAAqB,KAC1B,EAAKC,UAAY,EACjB,EAAKC,eAAiB,KACtB,EAAKhJ,UAAY,KACjB,EAAKiJ,OAAS,KACd,EAAKC,cAAgB1O,GAAU2O,cAC/B,EAAKC,UAAY,EAGjB,EAAKC,cAAgB,IACrB,EAAKC,kBAAmB,EACxB,EAAKnG,SAAW,KAhBqB,E,6EAsBH,IAAtB9K,KAAKiD,KAAKiO,SAClBlR,KAAKoB,WAAWY,QAAQC,QAAQkP,WAAanR,KAAKoB,WAAW6B,KAAK1E,IAAI,QAAUyB,KAAK9B,MAAS8B,KAAKiD,KAAKiO,SAE1GlR,KAAKoR,2BAIP,kE,sCAOO/N,GACU,OAAbA,IAEGrD,KAAK6Q,gBAAkB1O,GAAU+I,mBACnC7H,EAASuB,OAASzC,GAAU+I,kBAC7BlL,KAAKqR,0BAA0BhO,GACrBrD,KAAK6Q,gBAAkB1O,GAAUyN,gBAC1CvM,EAASuB,OAASzC,GAAUyN,gBAC7B5P,KAAKsR,4BAA4BjO,M,0MAcrC,GAA2C,OAAvCrD,KAAKiD,KAAK1E,IAAI,qBAChByB,KAAKyQ,mBAAqB,SACrB,CAGL,IAAMc,EAAoBC,OAAOxR,KAAKiD,KAAK1E,IAAI,sBAAsBgG,MAAM,KACxEmB,KAAI,SAAA5F,GAAI,MAAqB,iBAATA,EACjBA,EAAK2R,QAAQ,YAAa,MAAM/N,OAChC5D,KAAM4R,OAAOC,SACQ,aAAvB3R,KAAKiD,KAAK2O,SAEZ5R,KAAKyQ,mBAAqBzQ,KAAK2H,UAAUkK,2BAA2BN,GACpC,eAAvBvR,KAAKiD,KAAK2O,WAEnB5R,KAAKyQ,mBAAqBzQ,KAAK4Q,OAAOiB,2BAA2BN,IAI5B,IAAnCvR,KAAKyQ,mBAAmBpU,QAC1B2D,KAAKoB,WAAWY,QAAQmC,UAAUC,SAChC,yDACApE,KAAK9B,KAAO,KAAO8B,KAAKiD,KAAK1E,IAAI,qBAAuB,Q,0DAQ9DyB,KAAK0Q,UAAY1Q,KAAKU,OAAO+H,cAAczI,KAAKiD,KAAK1E,IAAI,aAGlC,OAAnByB,KAAK0Q,YACiB,aAAnB1Q,KAAK0Q,WAAiD,eAAnB1Q,KAAK0Q,WACf,UAAnB1Q,KAAK0Q,WAA8C,UAAnB1Q,KAAK0Q,WAC9C1Q,KAAK0Q,WAAa,EACS,aAAvB1Q,KAAKiD,KAAK2O,UACZ5R,KAAK8R,4BACL9R,KAAK6Q,cAAgB1O,GAAU+I,mBACC,eAAvBlL,KAAKiD,KAAK2O,UACnB5R,KAAK+R,8BACL/R,KAAK6Q,cAAgB1O,GAAUyN,gBACC,UAAvB5P,KAAKiD,KAAK2O,SACnB5R,KAAK6Q,cAAgB1O,GAAU6P,eACC,UAAvBhS,KAAKiD,KAAK2O,WACnB5R,KAAK6Q,cAAgB1O,GAAU8P,kBAIjCjS,KAAK0Q,UAAYhI,OAAO1I,KAAK0Q,WACN,IAAnB1Q,KAAK0Q,UACP1Q,KAAK6Q,cAAgB1O,GAAU2O,cAE/B9Q,KAAK6Q,cAAgB1O,GAAUC,sB,4EAUrC,GADApC,KAAK2H,UAAY,IAAI4C,GAASvK,KAAKoB,aACG,IAAlCpB,KAAKoB,WAAW4P,cAClBhR,KAAK2Q,eAAiB3Q,KAAKkS,mBACtB,CACL,IAAIC,GAAqC,IAAnBnS,KAAK+Q,SAAmB/Q,KAAK+Q,SAAW/Q,KAAK0Q,UACnE1Q,KAAK2H,UAAUyK,YAAYD,EAAgBnS,KAAKyQ,uB,gFAQlD,GADAzQ,KAAK4Q,OAAS,IAAItB,GAAMtP,KAAKoB,aACS,IAAlCpB,KAAKoB,WAAW4P,cAClBhR,KAAK2Q,eAAiB3Q,KAAKqS,yBACtB,CACL,IAAIF,GAAqC,IAAnBnS,KAAK+Q,SAAmB/Q,KAAK+Q,SAAW/Q,KAAK0Q,UACnE1Q,KAAK4Q,OAAOwB,YAAYD,EAAgBnS,KAAKyQ,oBAAoB,M,wDAOlC,OAA7BzQ,KAAKiD,KAAK1E,IAAI,aACiB,iBAAtByB,KAAKiD,KAAKiO,QAEnBlR,KAAK+Q,SAAW/Q,KAAKiD,KAAKiO,QAE1BlR,KAAK+Q,UAAY,K,0DAQrB,OAAQ/Q,KAAK6Q,eACb,KAAK1O,GAAU2O,cAEb9Q,KAAKwC,QAAUL,GAAUe,gBACzBlD,KAAKmK,YACL,MACF,KAAKhI,GAAUC,kBACbpC,KAAKsS,qBACL,MACF,KAAKnQ,GAAU+I,kBACblL,KAAK2H,UAAU4K,UACf,MACF,KAAKpQ,GAAUyN,eACb5P,KAAK4Q,OAAO4B,YACZ,MACF,KAAKrQ,GAAU6P,eACbhS,KAAKyS,SAASC,OACd,MACF,KAAKvQ,GAAU8P,eACbjS,KAAK2S,cAAcD,U,kEAMA3C,EAASC,GAK9B,IAAM4C,EAAO5S,KAAKgC,QAAQ0J,UAAUC,KAAKkH,wBACnCC,EAAQpR,KAAKqR,KAChBH,EAAKI,MAAQJ,EAAKK,MAAQjT,KAAKoB,WAAW6B,KAAKiQ,OAC/CN,EAAKO,OAASP,EAAKQ,KAAOpT,KAAKoB,WAAW6B,KAAKoQ,QAE5CC,EAAWR,EAAQ9S,KAAKoB,WAAW6B,KAAKiQ,MAAQ,EAChDK,EAAWT,EAAQ9S,KAAKoB,WAAW6B,KAAKoQ,OAAS,EACvDrT,KAAKoB,WAAW6B,KAAKuQ,UAAYzD,EAAUuD,EAAWV,EAAKK,MAAQH,EACnE9S,KAAKoB,WAAW6B,KAAKwQ,UAAYzD,EAAUuD,EAAWX,EAAKQ,KAAON,I,0EAIzCY,GACzB1T,KAAKoB,WAAWuS,yBAA2B3T,KAAK4T,IAChD5T,KAAKoB,WAAWyS,uBAAyBH,EAAO5D,OAChD9P,KAAKoB,WAAW6B,KAAKI,SAAWrD,KAAKU,OAAOoT,SAASJ,EAAOK,MAC5D/T,KAAK8K,SAAW9K,KAAK2H,UAAUqD,UAAUhL,KAAKoB,WAAW6B,KAAKI,UAC9DrD,KAAKgU,yB,8EAIsBN,GAC3B1T,KAAKoB,WAAWuS,yBAA2B3T,KAAK4T,IAChD5T,KAAKoB,WAAWyS,uBAAyBH,EAAO5D,OAChD9P,KAAKoB,WAAW6B,KAAKI,SAAWqQ,EAAOK,KACvC/T,KAAK8K,SAAW9K,KAAK4Q,OAAO5F,UAAUhL,KAAKoB,WAAW6B,KAAKI,UAC3DrD,KAAKiU,sBAAsBP,EAAOrI,MAAM0E,QAAS2D,EAAOrI,MAAM2E,SAC9DhQ,KAAKgU,yB,0EAKLhU,KAAKoB,WAAWuS,yBAA2B3T,KAAK4T,IAChD5T,KAAKoB,WAAWyS,uBAAyB7T,KAAKoB,WAAWY,QAAQC,QAAQkP,WACzEnR,KAAKoB,WAAW6B,KAAKI,SAAW,OAChCrD,KAAK8K,SAAW,CAAC,OAAQ,QACzB9K,KAAKgU,yB,kEAMLhU,KAAKoB,WAAW6B,KAAKiB,IAAI,gBAAiBlE,KAAKoB,WAAWyS,uBAAyB7T,KAAKoB,WAAWuS,0BACnG3T,KAAKoB,WAAW6B,KAAKiB,IAAI,YAAclE,KAAK9B,KAAM8B,KAAKoB,WAAW6B,KAAK1E,IAAI,aAC3EyB,KAAKoB,WAAW6B,KAAKiB,IAAI,iBAAmBlE,KAAK9B,KAAM8B,KAAKoB,WAAW6B,KAAK1E,IAAI,kBAChFyB,KAAKoB,WAAWuS,yBAA2B,MAIb,IAA1B3T,KAAKiR,mBACPjR,KAAKoB,WAAW6B,KAAKiR,QAAU,GACW,OAAtClU,KAAKiD,KAAK1E,IAAI,qBAEM,OAAlByB,KAAK8K,WACH9K,KAAK8K,SAASjK,SAASb,KAAKU,OAAO+H,cAAczI,KAAKiD,KAAK1E,IAAI,oBAAoB4V,cACrFnU,KAAKoB,WAAW6B,KAAKiR,QAAU,EAC/BlU,KAAKoB,WAAW6B,KAAKmR,cAAgBpU,KAAKoB,WAAW6B,KAAKmR,cAAgB,GAE1EpU,KAAKoB,WAAW6B,KAAKiR,QAAU,GAKrClU,KAAKoB,WAAW6B,KAAKoR,oBAAsBrU,KAAKoB,WAAW6B,KAAKoR,oBAAsBrU,KAAKoB,WAAW6B,KAAKqR,cAC3GtU,KAAKoB,WAAW6B,KAAKsR,gBAAkBvU,KAAKoB,WAAW6B,KAAKsR,gBAAkB,EAC9EvU,KAAKoB,WAAW6B,KAAKuR,SAAW9S,KAAKC,MAAM,IAAQ3B,KAAKoB,WAAW6B,KAAKmR,cAAgBpU,KAAKoB,WAAW6B,KAAKsR,iBAC7GvU,KAAKoB,WAAW6B,KAAKkC,IAAMnF,KAAKoB,WAAW6B,KAAKuR,SAChDxU,KAAKoB,WAAW6B,KAAKwR,sBAAwB/S,KAAKC,MAAM3B,KAAKoB,WAAW6B,KAAKoR,oBAAsBrU,KAAKoB,WAAW6B,KAAKsR,iBACxHvU,KAAKoB,WAAW6B,KAAKyR,OAAS1U,KAAKoB,WAAW6B,KAAKwR,sBACnDzU,KAAKoB,WAAW6B,KAAKiB,IAAI,WAAalE,KAAK9B,KAAM8B,KAAKiD,KAAKiR,Y,sCAQtD7P,IAEO,IAAVA,IACFrE,KAAK4T,IAAMe,KAAK1R,KAAK1E,IAAI,QAAUyB,KAAK9B,MACxC8B,KAAKoB,WAAWuS,yBAA2B3T,KAAKiD,KAAK1E,IAAI,QAAUyB,KAAK9B,OAErE8B,KAAKoB,WAAWuS,yBAGnB3T,KAAK4T,IAAM5T,KAAKoB,WAAWuS,yBAF3B3T,KAAK4T,IAAM5T,KAAKoB,WAAW6B,KAAK1E,IAAI,QAAUyB,KAAK9B,Q,8DASrD8B,KAAKuD,MAAMvD,KAAK0Q,a,wCAMhB1Q,KAAK4U,kBACL5U,KAAK6U,4BACL7U,KAAK8U,mBAGL,kE,iBArSyCzS,G,6gBCJxB0S,G,oEACnB,mBAAa3T,EAAYlD,EAAMoE,GAAQ,kCACrC,cAAMlB,EAAYlD,EAAMoE,IAGnB0S,OAAS,IAAIC,KAAO7T,GAAY,GACrC,EAAK8T,SAAW,GAGhB,EAAKpN,YAAYxF,GARoB,E,8DAiB7B6S,EAAGC,GAEX,OAAID,EAAEE,UAAYD,EAAEC,UAAoB,EAAaF,EAAEE,UAAYD,EAAEC,WAAqB,EAAkB,I,4CAM5G,4D,oCAMArV,KAAKkV,SAAW,GAChBlV,KAAKiD,KAAK2O,SAAW,a,8CAOVtP,GAOX,GALAtC,KAAKc,UAAY,GACjBd,KAAK4D,SAAW,GAChB5D,KAAKqE,QAGU,OAAX/B,EAAiB,CAEnB,IADA,IAAMgC,EAAQhC,EAAOiC,MAAM,MAClBpI,EAAI,EAAGA,EAAImI,EAAMjI,OAAQF,IAChC,GAAkB,KAAbmI,EAAMnI,KAAiD,IAAlC6D,KAAKwE,eAAeF,EAAMnI,IAAgB,CAClE,IAAMmQ,EAAStM,KAAKU,OAAO6D,MAAMD,EAAMnI,IACvC,GAAKmQ,EAAOjQ,OAAS,GAAqB,SAAdiQ,EAAO,GACjC,IAAkD,IAA9CtM,KAAKoB,WAAW6H,MAAMqM,SAAShJ,EAAO,IAAc,CACtD,IAAIiJ,EAAUvV,KAAKoB,WAAW6H,MAAMuM,iBAAiBlJ,EAAO,GAAItM,KAAMsE,EAAMnI,IAC5E6D,KAAKkV,SAASvY,KAAK4Y,QAEnBvV,KAAKoB,WAAWY,QAAQmC,UAAUC,SAAS,+BAAiCkI,EAAO,IAO3FtM,KAAKkV,SAASzO,KAAKzG,KAAKyV,a,wCAO1BzV,KAAKgV,OAAOU,QAGZ,IAAK,IAAIvZ,EAAI,EAAGA,EAAI6D,KAAKkV,SAAS7Y,OAAQF,KACJ,IAAhC6D,KAAKkV,SAAS/Y,GAAGwZ,YACnB3V,KAAKkV,SAAS/Y,GAAGyZ,OAKrB,0D,gCAMA,oDAGA,IAAMC,EAAkB7V,KAAKiD,KAAK1E,IAAI,cAClCsX,IACF7V,KAAKgV,OAAOc,QAAQC,iBAAmBF,GAIzC7V,KAAKmJ,eAAenJ,KAAKgV,OAAO3E,QAChCrQ,KAAKgW,SAAQ,GACbhW,KAAKiW,qB,kIAIL,Y,iBACAjW,KAAKmJ,eAAenJ,KAAKgV,OAAO3E,Q,qEAvGGG,I,ieCDlB0F,G,iEAOnB,kBAAa9U,EAAYlD,EAAMoE,GAAQ,iCAErC,cAAMlB,EAAYlD,EAAMoE,IAGnBiF,YAAc,uCALkB,E,iEAWrC,yDAGkC,QAA9BvH,KAAKiD,KAAKkT,iBACZnW,KAAKoB,WAAWgV,mB,oCAOlB,qDAGApW,KAAKiD,KAAKkT,gBAAkB,Q,wCAK5BnW,KAAKE,QAAQ2E,sB,gCAMb,uDACA,uD,UA5CkCkQ,I,2eCAjBsB,G,8EAOnB,sBAAajV,EAAYlD,EAAMoE,GAAQ,qCAErC,cAAMlB,EAAYlD,EAAMoE,IAGnBiF,YAAc,uBAGnB,EAAK+O,cAAe,EACpB,EAAKC,cAAgB,KACrB,EAAKC,UAAY,KAGjB,EAAK1O,YAAYxF,GAboB,E,qEAmBiB,IAAlDtC,KAAKoB,WAAWY,QAAQ2G,cAAcnG,QAExCxC,KAAKoB,WAAWY,QAAQ2G,cAAc8N,kBAEZ,IAAtBzW,KAAKsW,aAEP,2DAGA,+D,0DAQJtW,KAAKmK,c,oCAKLnK,KAAKiD,KAAK2F,SAAW,GACrB5I,KAAKiD,KAAKf,KAAO,K,8CAONI,GAKX,GAHAtC,KAAKqE,QAGU,OAAX/B,EAIF,IAHA,IAAIoU,GAAiB,EACjBC,GAAqB,EACrBrS,EAAQhC,EAAOiC,MAAM,MAChBpI,EAAI,EAAGA,EAAImI,EAAMjI,OAAQF,IAAK,CACrC,IAAImQ,EAAStM,KAAKU,OAAO6D,MAAMD,EAAMnI,IACrC,GAAgB,OAAXmQ,GAAqBA,EAAOjQ,OAAS,EACxC,OAAQiQ,EAAO,IACb,IAAK,MACHtM,KAAKwE,eAAeF,EAAMnI,IAC1B,MACF,IAAK,UACHua,GAAiB,EACjBC,GAAqB,EACrB,MACF,IAAK,eACHA,GAAqB,EACrB,MACF,IAAK,WACHD,GAAiB,EACjB,MACF,SACyB,IAAnBA,EACF1W,KAAKiD,KAAKf,KAAOlC,KAAKiD,KAAKf,KAAOoC,EAAMnI,GAAK,MACb,IAAvBwa,IACT3W,KAAKiD,KAAK2F,SAAW5I,KAAKiD,KAAK2F,SAAWtE,EAAMnI,GAAK,WAIpC,IAAnBua,EACF1W,KAAKiD,KAAKf,KAAOlC,KAAKiD,KAAKf,KAAOoC,EAAMnI,GAAK,MACb,IAAvBwa,IACT3W,KAAKiD,KAAK2F,SAAW5I,KAAKiD,KAAK2F,SAAWtE,EAAMnI,GAAK,S,wCAU7D6D,KAAKuW,cAAgBvW,KAAKoB,WAAWY,QAAQ2G,cAAciO,OAAO5W,KAAKiD,KAAK2F,UAC5E5I,KAAKwW,UAAYxW,KAAKoB,WAAWY,QAAQ2G,cAAciO,OAAO5W,KAAKiD,KAAKf,MAG7C,OAAvBlC,KAAKuW,eAEPvW,KAAKoB,WAAWY,QAAQC,QAAQkB,aAAenD,KAG/CA,KAAKsW,cAAe,EAGpBtW,KAAKmJ,iBAGLnJ,KAAKoB,WAAWY,QAAQ2G,cAAczG,KAAKlC,KAAMA,KAAKuW,gBAGtD,6D,gCAOF,uDAGAvW,KAAKsW,cAAe,EAGpBtW,KAAKmJ,iBAGkB,OAAnBnJ,KAAKwW,UAEPxW,KAAKoB,WAAWY,QAAQ2G,cAAczG,KAAKlC,KAAMA,KAAKwW,YAGtDxW,KAAKoB,WAAWY,QAAQ2G,cAAcnG,QAAU,EAGhDxC,KAAKmK,iB,cAjJ+B9H,G,mfCArBwU,G,0FAOnB,0BAAazV,EAAYlD,EAAMoE,GAAQ,yCAErC,cAAMlB,EAAYlD,EAAMoE,IAEnBiF,YAAc,sCACnB,EAAKuP,UAAY1V,EAAW2V,qBAE5B,EAAKjP,YAAYxF,GAPoB,E,iEAYrCtC,KAAKiD,KAAK2F,SAAW,GACrB5I,KAAKiD,KAAKf,KAAO,K,8CAONI,GAIX,GAFAtC,KAAKqE,QAEU,OAAX/B,EAIF,IAHA,IAAIoU,GAAiB,EACjBC,GAAqB,EACrBrS,EAAQhC,EAAOiC,MAAM,MAChBpI,EAAI,EAAGA,EAAImI,EAAMjI,OAAQF,IAAK,CACrC,IAAImQ,EAAStM,KAAKU,OAAO6D,MAAMD,EAAMnI,IACrC,GAAgB,OAAXmQ,GAAqBA,EAAOjQ,OAAS,EACxC,OAAQiQ,EAAO,IACb,IAAK,MACHtM,KAAKwE,eAAeF,EAAMnI,IAC1B,MACF,IAAK,UACHua,GAAiB,EACjBC,GAAqB,EACrB,MACF,IAAK,eACHA,GAAqB,EACrB,MACF,IAAK,WACHD,GAAiB,EACjB,MACF,SACyB,IAAnBA,EACF1W,KAAKiD,KAAKf,KAAOlC,KAAKiD,KAAKf,KAAOoC,EAAMnI,GAAK,MACb,IAAvBwa,IACT3W,KAAKiD,KAAK2F,SAAW5I,KAAKiD,KAAK2F,SAAWtE,EAAMnI,GAAK,WAIpC,IAAnBua,EACF1W,KAAKiD,KAAKf,KAAOlC,KAAKiD,KAAKf,KAAOoC,EAAMnI,GAAK,MACb,IAAvBwa,IACT3W,KAAKiD,KAAK2F,SAAW5I,KAAKiD,KAAK2F,SAAWtE,EAAMnI,GAAK,S,wCAS7D6D,KAAK8W,UAAU5M,MAAMlK,KAAKiD,KAAK2F,UAC/B,iE,gCAKA,2DACA5I,KAAKmJ,iBACLnJ,KAAK8W,UAAU5M,MAAMlK,KAAKiD,KAAKf,MAC/BlC,KAAKmK,gB,kBAjFqC9H,G,mfCCzB2U,G,0FAOnB,0BAAa5V,EAAYlD,EAAMoE,GAAQ,yCAErC,cAAMlB,EAAYlD,EAAMoE,IAGnBiF,YAAc,8BAGnB,EAAK0P,OAAS,MACd,EAAKtP,UAAY,IAAI4C,GAAS,EAAKnJ,YAGnC,EAAK0G,YAAYxF,GAZoB,E,iEAiBrCtC,KAAKgR,cAAgB,QACrBhR,KAAKiR,kBAAmB,EACxBjR,KAAKiD,KAAKsO,kBAAoB,KAC9BvR,KAAKiD,KAAKiU,iBAAmB,KAC7BlX,KAAKiD,KAAK2O,SAAW,WACrB5R,KAAKiD,KAAKsJ,MAAQ,MAClBvM,KAAKiD,KAAKiO,QAAU,a,wCAMpBlR,KAAKiX,OAAUjX,KAAKiD,KAAKsJ,MAASvM,KAAKiD,KAAKsJ,MAAQ,MAGpD,iE,gCAMA,2DAGAvM,KAAKmJ,iBAGe,QAAhBnJ,KAAKiX,QACPjX,KAAK2H,UAAU4E,QAGjBvM,KAAKgW,UACLhW,KAAKiW,qB,iJAmBL,OAfMkB,EAAiB,SAAjBA,eAAkB9L,GACtB,IAAM+L,EAAW,EAAKhW,WAAWY,QAAQC,QAAQoV,sBAAsBhM,EAAO,GAC1EkG,EAAoB,MACpB,EAAKtO,KAAK1E,IAAI,uBAChBgT,EAAoB,EAAK5J,UAAUkK,2BACjC,EAAK5O,KAAK1E,IAAI,qBAAqBgG,MAAM,KAAKmB,KAAI,SAAAzG,GAAG,OAAIA,EAAIyE,aAIvC,QAAtB6N,GAA+BA,EAAkB1Q,SAASuW,EAASrD,SACrE,EAAK1Q,SAAW+T,IAIpB1X,OAAO4X,iBAAiB,UAAWH,Q,iBAGnCnX,KAAKmJ,iBAELnJ,KAAKgW,UACDuB,GAAU,EACdvX,KAAKqD,SAAW,K,UACRrD,KAAKqD,WAAYkU,E,iBACb,O,WAAM,E,QAAhBA,E,8BAEF7X,OAAO8X,oBAAoB,UAAWL,GAClCnX,KAAKqD,UAAUrD,KAAKqR,0BAA0BrR,KAAKqD,U,6EAtFbmN,I,6eCAzBiH,G,iFAOnB,uBAAarW,EAAYlD,EAAMoE,GAAQ,sCAErC,cAAMlB,EAAYlD,EAAMoE,IAGnBiF,YAAc,2BACnB,EAAKmQ,WAAa,GAGlB,EAAKT,OAAS,MACd,EAAKrG,OAAS,IAAItB,GAAM,EAAKlO,YAG7B,EAAK0G,YAAYxF,GAboB,E,sEAmBrCtC,KAAK4Q,OAAOjB,aAAY,GAGxB,gE,oCAKA3P,KAAKgR,cAAgB,EACrBhR,KAAKiR,kBAAmB,EACxBjR,KAAK0X,WAAa,GAClB1X,KAAK0X,WAAW,GAAO,UACvB1X,KAAK0X,WAAW,GAAO,cACvB1X,KAAK0X,WAAW,GAAO,gBACvB1X,KAAK0X,WAAW,GAAO,eACvB1X,KAAK0X,WAAW,GAAO,YACvB1X,KAAK0X,WAAW,GAAO,cACvB1X,KAAKiD,KAAKsO,kBAAoB,KAC9BvR,KAAKiD,KAAKiU,iBAAmB,KAC7BlX,KAAKiD,KAAK2O,SAAW,aACrB5R,KAAKiD,KAAKsJ,MAAQ,MAClBvM,KAAKiD,KAAK0M,YAAc,MACxB3P,KAAKiD,KAAKiO,QAAU,a,wCAMpBlR,KAAKiX,OAAUjX,KAAKiD,KAAKsJ,MAASvM,KAAKiD,KAAKsJ,MAAQ,MAGpD,8D,gCAMA,wDAGAvM,KAAKmJ,iBAGyB,QAA1BnJ,KAAKiD,KAAK0M,aACZ3P,KAAK4Q,OAAOjB,aAAY,GAIN,QAAhB3P,KAAKiX,QACPjX,KAAK4Q,OAAOrE,QAGdvM,KAAKgW,UACLhW,KAAKiW,qB,mJAkBL,OAdM0B,EAAmB,SAAnBA,iBAAoBtM,GACxB,EAAKhI,SAAW,EAAKjC,WAAWY,QAAQC,QAAQ2V,mBAAmBvM,EAAO,IAGtEwM,EAAe,SAAfA,aAAgBxM,GACpBA,EAAMJ,OAAS,EACfI,EAAM0E,QAAU1E,EAAMyM,eAAe,GAAG/H,QACxC1E,EAAM2E,QAAU3E,EAAMyM,eAAe,GAAG9H,QACxC,EAAK3M,SAAW,EAAKjC,WAAWY,QAAQC,QAAQ2V,mBAAmBvM,EAAO,IAG5E3L,OAAO4X,iBAAiB,YAAaK,GACrCjY,OAAO4X,iBAAiB,aAAcO,Q,iBAIR,QAA1B7X,KAAKiD,KAAK0M,aACZ3P,KAAK4Q,OAAOjB,aAAY,GAI1B3P,KAAKmJ,iBAELnJ,KAAKgW,UACDuB,GAAU,EACdvX,KAAKqD,SAAW,K,WACRrD,KAAKqD,WAAYkU,E,iBACb,O,WAAM,E,QAAhBA,E,+BAEF7X,OAAO8X,oBAAoB,YAAaG,GACxCjY,OAAO8X,oBAAoB,aAAcK,GACrC7X,KAAKqD,UAAUrD,KAAKsR,4BAA4BtR,KAAKqD,U,0EAlHlBmN,I,6dCAtBuH,G,2DAOnB,gBAAa3W,EAAYlD,EAAMoE,GAAQ,+BACrC,cAAMlB,EAAYlD,EAAMoE,IACnBiF,YAAc,yBACnB,EAAKO,YAAYxF,GAHoB,E,+DASrC,yD,oCAKAtC,KAAKgY,QAAU,GACfhY,KAAKiD,KAAKgV,SAAW,Q,8CAOV3V,GAEX,GADAtC,KAAKqE,QACU,OAAX/B,EAEF,IADA,IAAIgC,EAAQhC,EAAOiC,MAAM,MAChBpI,EAAI,EAAGA,EAAImI,EAAMjI,OAAQF,IAChC,GAAkB,KAAbmI,EAAMnI,KAAiD,IAAlC6D,KAAKwE,eAAeF,EAAMnI,IAAgB,CAClE,IAAImQ,EAAStM,KAAKU,OAAO6D,MAAMD,EAAMnI,IAClB,QAAdmQ,EAAO,IAAkBA,EAAOjQ,OAAS,GAC5C2D,KAAKgY,QAAQrb,KAAK2P,EAAO,IAKjCtM,KAAKgY,QAAQvR,S,gCAKb,iDACIzG,KAAKwC,UAAYL,GAAUe,kBAC7BlD,KAAKwC,QAAUL,GAAUe,gBACzBlD,KAAKmJ,iBACLnJ,KAAKoB,WAAW8W,KAAKC,WACY,QAA9BnY,KAAKiD,KAAK1E,IAAI,YACXyB,KAAKgY,QAAQI,OAAOpY,KAAKoB,WAAW6B,KAAKrC,WAAW6F,OACpDzG,KAAKgY,SAEXhY,KAAKmK,iB,QAxDyB9H,GCHhCgW,GAAW,KACf,IACEA,GAAW,IAAK3Y,OAAO4Y,cAAgB5Y,OAAO6Y,oBAC9C,MAAOvP,GACPwP,QAAQC,QAAQ,kD,IAIGC,G,WAYnB,wBAAatX,EAAYuX,EAAQC,EAAQC,EAAOC,EAAKlH,EAAUmH,EAAMC,GAAO,oCAE1EhZ,KAAKgZ,WAA0B,IAAVA,GAAiCA,EACtDhZ,KAAK4R,cAAgC,IAAbA,EAA4B,QAAUA,EAC9D5R,KAAKoB,WAAaA,EAClBpB,KAAK4Y,YAA4B,IAAXA,EAA0B,EAAIA,EACpD5Y,KAAK+Y,UAAwB,IAATA,EAAwB,EAAIA,EAChD/Y,KAAK8Y,SAAsB,IAARA,EAAuB,EAAIA,EAC9C9Y,KAAK6Y,WAA0B,IAAVA,EAAyB,EAAIA,EAElD,IACE7Y,KAAKiZ,OAASN,EAAO9c,KAAKqd,YAC1B,MAAOlQ,GAEP,MADAwP,QAAQW,MAAR,wBAAuCR,GACjC3P,EAERhJ,KAAKiZ,OAAOG,QAAU,kBAAM,EAAKhY,WAAWY,QAAQC,QAAQoX,YAAY,IAGtErZ,KAAK2Y,OADHN,GACYA,GAASiB,yBAAyBtZ,KAAKiZ,QAEvCjZ,KAAKiZ,O,2DAajBL,EAAQC,EAAOC,EAAKlH,EAAUmH,EAAMC,GAExChZ,KAAKgZ,MAAQA,GAAShZ,KAAKgZ,MAC3BhZ,KAAK4R,cAA+B,IAAbA,EAA2B5R,KAAK4R,SAAWA,EAClE5R,KAAK4Y,YAA2B,IAAXA,EAAyB5Y,KAAK4Y,OAASA,EAC5D5Y,KAAK6Y,WAAyB,IAAVA,EAAwB7Y,KAAK6Y,MAAQA,EACzD7Y,KAAK8Y,SAAqB,IAARA,EAAsB9Y,KAAK8Y,IAAMA,EACnD9Y,KAAK+Y,UAAuB,IAATA,EAAuB/Y,KAAK+Y,KAAOA,EAElDV,IACqB,cAAnBA,GAASxJ,OAAuBwJ,GAASkB,SAC7CvZ,KAAK2Y,OAAOa,QAAQxZ,KAAKyZ,iBAEzBzZ,KAAK2Y,OAAOC,OAAS5Y,KAAK4Y,OAG5B5Y,KAAKiZ,OAAOS,S,kCAMZ1Z,KAAKoB,WAAWY,QAAQC,QAAQC,KAAKlC,MAAO,EAAGmC,GAAU6P,eAAgB,M,kDAIzE,IAAM2H,EAAQ,CAACtB,GAASuB,aAExB,IACE,IAAMC,EAAWxB,GAASyB,aAC1BD,EAASE,KAAKC,eAAeha,KAAK4Y,OAAQP,GAAS4B,aAE/Cja,KAAK+Y,OACPc,EAASE,KAAKC,eAAe,EAAG3B,GAAS4B,aACzCJ,EAASE,KAAKG,wBAAwBla,KAAK4Y,OAAQP,GAAS4B,YAAcja,KAAK+Y,KAAO,MAGxFY,EAAMzS,QAAQ2S,GACd,MAAO7Q,GACPwP,QAAQC,QAAQ,iCAAkCzP,GAGpD,GAAIhJ,KAAK8Y,IACP,IACEa,EAAMzS,QAAQ,IAAIiT,iBAAiB9B,GAAU,CAAES,IAAK9Y,KAAK8Y,OACzD,MAAO9P,GACPwP,QAAQC,QAAQ,0BAA2BzP,GAK/C,IAAK,IAAI7M,EAAI,EAAGA,EAAIwd,EAAMtd,OAAQF,IAC5Bwd,EAAMxd,KAAOkc,GAASuB,aACxBD,EAAMxd,GAAGqd,QAAQG,EAAMxd,EAAI,IAI/B,OAAOwd,EAAM7c,MAAM,O,ifC5GFsd,G,8DAOnB,iBAAahZ,EAAYlD,EAAMoE,GAAQ,gCAErC,cAAMlB,EAAYlD,EAAMoE,IAGnB0W,OAAQ,EACb,EAAKzR,YAAc,4CAGnB,EAAK8S,QAAU,KACf,EAAK5H,SAAW,KAGhB,EAAK3K,YAAYxF,GAboB,E,wDAkBrCtC,KAAKgZ,OAAQ,EACbhZ,KAAKiD,KAAKgW,OAAS,GACnBjZ,KAAKiD,KAAK6V,IAAM,EAChB9Y,KAAKiD,KAAK4V,MAAQ,EAClB7Y,KAAKiD,KAAKqX,QAAU,EACpBta,KAAKiD,KAAKsX,WAAa,EACvBva,KAAKiD,KAAK2V,OAAS,EACnB5Y,KAAKiD,KAAK2O,SAAW,U,wCAMI,KAArB5R,KAAKiD,KAAKgW,QAEZjZ,KAAKqa,QAAUra,KAAKgC,QAAQwY,MAAMxa,KAAKU,OAAOC,UAAUX,KAAKiD,KAAKgW,OAAQjZ,KAAKiD,MAAM,IACrFjD,KAAKyS,SAAW,IAAIiG,GAAe1Y,KAAKoB,WAAYpB,KAAKqa,SACzDra,KAAKyS,SAASmG,OAAS5Y,KAAKiD,KAAK2V,OACjC5Y,KAAKyS,SAASb,SAAW5R,KAAKiD,KAAK2O,SACnC5R,KAAKyS,SAASsG,KAAO/Y,KAAKiD,KAAK8V,KAC/B/Y,KAAKyS,SAASqG,IAAM9Y,KAAKiD,KAAK6V,IAC9B9Y,KAAKyS,SAASoG,MAAQ7Y,KAAKiD,KAAK4V,OAGhC7Y,KAAKgC,QAAQmC,UAAUC,SAAS,4CAA8CpE,KAAKiD,KAAKgW,QAI1F,wD,gCAKAjZ,KAAKmJ,iBACLnJ,KAAKgW,UACLhW,KAAKyS,SAASiH,OACd1Z,KAAKiW,uB,SA7D4BzF,I,2dCDhBiK,G,wDAOnB,eAAarZ,EAAYlD,EAAMoE,GAAQ,8BAErC,cAAMlB,EAAYlD,EAAMoE,IAGnBiF,YAAc,4BALkB,E,cAPN6S,ICLdM,I,gEAOnB,qBAAaC,EAAWrY,EAAQyI,GAAU,sBAExC/K,KAAKgV,OAAS2F,EAAU3F,OACxBhV,KAAK+K,SAAWA,EAChB/K,KAAK+K,SAAS6P,QAAU,SACxB5a,KAAK+K,SAASsK,QAAU,EACxBrV,KAAKoB,WAAauZ,EAAUvZ,WAC5BpB,KAAK6a,gBAA0D,QAAvCF,EAAU1X,KAAK6X,oBACvC9a,KAAK9B,KAAOyc,EAAUzc,KACtB8B,KAAK+a,eAAgB,EACrB/a,KAAKgb,KAAOL,EAAUvZ,WAAW4Z,KACjChb,KAAKib,WAAa,GAClBjb,KAAK2a,UAAYA,EACjB3a,KAAKU,OAASia,EAAUja,OACxBV,KAAKiD,KAAO0X,EAAU1X,KAGtBjD,KAAKkb,YAAc,KAGnBlb,KAAK8H,YAAYxF,G,sEASNA,GACXtC,KAAKib,WAAajb,KAAK2a,UAAUja,OAAOqD,UAAUzB,GAAQ,K,wCAU1D,OAAOtC,KAAKib,WAAW5F,U,wDAQN,WAEX8F,EAAKnb,KAAKoB,WAAW6B,KAAKiQ,MAAQ,EAClCkI,EAAKpb,KAAKoB,WAAW6B,KAAKoQ,OAAS,EAEzCrT,KAAKkb,YAAc5e,OAAO+I,QAAQrF,KAAKib,YAAY/V,QAAO,SAAChI,EAAD,GAAyB,eAAfme,EAAe,KAAT/V,EAAS,KAC7E3G,EAAQ,EAAK+B,OAAOC,UAAU2E,EAAK,EAAKrC,MAAM,GAWlD,MATI,CAAC,IAAK,KAAM,MAAMpC,SAASwa,KAC7B1c,EAAQ+C,KAAKC,MAAM+G,OAAO/J,GAASwc,IAGjC,CAAC,IAAK,KAAM,MAAMta,SAASwa,KAC7B1c,EAAQ+C,KAAKC,MAAM+G,OAAO/J,GAASyc,IAGrCle,EAAOme,GAAQ1c,EACRzB,IACN,M,0CAcH,OAHA8C,KAAKoB,WAAWwB,iBAAhB,KAA2C5C,KAAK2a,UAGzC3a,KAAKoB,WAAWwB,iBAAiBsH,MAAMlK,KAAKoB,WAAWV,OAAOmJ,aAAa7J,KAAKib,WAAL,Y,kCAUlFjb,KAAKsb,sB,qhBC3FYC,G,wDAMnB,eAAaZ,EAAWrY,GAAQ,gBAE9B,IAAIyI,EAAW,CACfA,kBAA6B,GAC7BA,iBAA4B,GAC5BA,iBAA4B,GAC5BA,KAAgB,GANc,OAO9BA,EAASyQ,MAAQb,EAAU1X,KAAK1E,IAAI,cACpCwM,EAAS0Q,SAAW,EACpB1Q,EAAS2Q,GAAK,KACd3Q,EAAS4Q,GAAK,KACd5Q,EAAS6Q,GAAK,KACd7Q,EAAS8Q,GAAK,KAZgB,YAexBlB,EAAWrY,EAAQyI,G,oDAMzB,iDAGA,IAAI+Q,EAAS,IAAIC,KACjBD,EAAO/F,iBAAmB/V,KAAKkb,YAAYM,MAC3CM,EAAON,MAAQxb,KAAKkb,YAAYM,MAChCM,EAAOE,KAAOhc,KAAKkb,YAAYc,KAC/BF,EAAOL,SAAWzb,KAAKkb,YAAYO,SAGnCzb,KAAK2a,UAAU3F,OAAOiH,MAAMjc,KAAKkb,YAAYQ,GAAI1b,KAAKkb,YAAYS,GAChE3b,KAAKkb,YAAYU,GAAI5b,KAAKkb,YAAYW,GAAI7b,KAAKkb,YAAYgB,iBAC3Dlc,KAAKkb,YAAYiB,kBAAmBnc,KAAKkb,YAAYkB,iBACrDN,O,OAxC6BpB,I,6dCAd2B,G,2DAMnB,gBAAa1B,EAAWrY,GAAQ,iBAE9B,IAAIyI,EAAW,GAFe,OAG9BA,EAASyQ,MAAQb,EAAU1X,KAAK1E,IAAI,cACpCwM,EAASiR,KAAO,EAChBjR,EAAS0Q,SAAW,EACpB1Q,EAASuR,EAAI,KACbvR,EAASwR,EAAI,KACbxR,EAASvM,EAAI,KARiB,YAWxBmc,EAAWrY,EAAQyI,G,qDAMzB,kDAGA,IAAI+Q,EAAS,IAAIC,KACjBD,EAAO/F,iBAAmB/V,KAAKkb,YAAYM,MAC3CM,EAAON,MAAQxb,KAAKkb,YAAYM,MAChCM,EAAOE,KAAOhc,KAAKkb,YAAYc,KAC/BF,EAAOL,SAAWzb,KAAKkb,YAAYO,SAGnCzb,KAAK2a,UAAU3F,OAAOwH,OAAOxc,KAAKkb,YAAYoB,EAAGtc,KAAKkb,YAAYqB,EAChEvc,KAAKkb,YAAY1c,EAAGsd,O,QAlCUpB,I,+dCAf+B,G,8DAMnB,iBAAa9B,EAAWrY,GAAQ,kBAE9B,IAAMyI,EAAW,CACfiR,KAAM,EACNR,MAAOb,EAAU1X,KAAK1E,IAAI,cAC1Bkd,SAAU,EACVa,EAAG,KACHC,EAAG,KACHG,EAAG,KACHC,EAAG,MATyB,mBAaxBhC,EAAWrY,EAAQyI,G,sDAMzB,mDAGA,IAAI+Q,EAAS,IAAIC,KACjBD,EAAO/F,iBAAmB/V,KAAKkb,YAAYM,MAC3CM,EAAON,MAAQxb,KAAKkb,YAAYM,MAChCM,EAAOE,KAAOhc,KAAKkb,YAAYc,KAC/BF,EAAOL,SAAWzb,KAAKkb,YAAYO,SAGnCzb,KAAK2a,UAAU3F,OAAO4H,QAAQlU,OAAO1I,KAAKkb,YAAYoB,GACpD5T,OAAO1I,KAAKkb,YAAYqB,GAAI7T,OAAO1I,KAAKkb,YAAYwB,GACpDhU,OAAO1I,KAAKkb,YAAYyB,GAAIb,O,SArCGpB,I,6dCAhBmC,G,2DAMnB,gBAAalC,EAAWrY,GAAQ,iBAE9B,IAAIyI,EAAW,GAFe,OAG9BA,EAASyQ,MAAQb,EAAU1X,KAAK1E,IAAI,cACpCwM,EAASuF,MAAQ,UACjBvF,EAASuR,EAAI,KACbvR,EAASwR,EAAI,KANiB,YASxB5B,EAAWrY,EAAQyI,G,qDAMzB,kDAGA,IAAI+Q,EAAS,IAAIC,KAAO/b,KAAK2a,WAC7BmB,EAAON,MAAQxb,KAAKkb,YAAYM,MAEhCxb,KAAK2a,UAAU3F,OAAO8H,OAAO9c,KAAKkb,YAAYoB,EAAGtc,KAAKkb,YAAYqB,EAChEvc,KAAKkb,YAAY5K,MAAOwL,O,QA5BMpB,I,2dCDfqC,G,wDAMnB,eAAapC,EAAWrY,GAAQ,gBAE9B,IAAIyI,EAAW,CACfA,OAAkB,MAClBA,OAAkB,QAClBA,OAAkB,QAClBA,IAAe,WACfA,KAAgB,EAChBA,OAAkB,EAClBA,MAAiB,EACjBA,KAAgB,GAChBA,MAAiB,GACjBA,EAAa,KACbA,EAAa,MAbiB,mBAgBxB4P,EAAWrY,EAAQyI,G,oDAMzB,iDAGA/K,KAAK2a,UAAU3F,OAAOgI,MAAMhd,KAAKkb,YAAYoB,EAAGtc,KAAKkb,YAAYqB,EAC/Dvc,KAAKkb,YAAY+B,OAAQjd,KAAKkb,YAAYgC,KAAMld,KAAKkb,YAAYiC,IACjEnd,KAAKkb,YAAYkC,KAAMpd,KAAKkb,YAAYmC,MAAOrd,KAAKkb,YAAYoC,MAChEtd,KAAKkb,YAAYqC,OAAQvd,KAAKkb,YAAYsC,OAAQxd,KAAKkb,YAAYuC,Y,OAlCtC/C,I,2dCAdgD,G,sEAMnB,sBAAa/C,EAAWrY,GAAQ,6BAE9B,IAAMyI,EAAW,CACjBA,OAAkB,EAClBA,KAAgB,KAChBA,MAAiB,EACjBA,EAAa,KACbA,EAAa,MAPiB,OAU9B,cAAM4P,EAAWrY,EAAQyI,IAGpB4S,MAAQ,KAbiB,E,2DAmB9B,wDAGA3d,KAAK2a,UAAU3F,OAAO4I,MAAM5d,KAAKkb,YAAY2C,KAAM7d,KAAKkb,YAAY4C,OAClE9d,KAAKkb,YAAYoB,EAAGtc,KAAKkb,YAAYqB,EAAGvc,KAAKkb,YAAYpI,W,cA7BrB4H,I,ydCCrBqD,G,qDAMnB,cAAapD,EAAWrY,GAAQ,eAE9B,IAAIyI,EAAW,GAFe,OAG9BA,EAASyQ,MAAQb,EAAU1X,KAAK1E,IAAI,cACpCwM,EAAS0Q,SAAW,EACpB1Q,EAAS2Q,GAAK,KACd3Q,EAAS4Q,GAAK,KACd5Q,EAAS6Q,GAAK,KACd7Q,EAAS8Q,GAAK,KARgB,YAWxBlB,EAAWrY,EAAQyI,G,mDAMzB,gDAGA,IAAI+Q,EAAS,IAAIC,KACjBD,EAAON,MAAQxb,KAAKkb,YAAYM,MAChCM,EAAOL,SAAWzb,KAAKkb,YAAYO,SAGnCzb,KAAK2a,UAAU3F,OAAOvR,KAAKzD,KAAKkb,YAAYQ,GAAI1b,KAAKkb,YAAYS,GAC/D3b,KAAKkb,YAAYU,GAAI5b,KAAKkb,YAAYW,GAAIC,O,MAhCdpB,I,2dCDbsD,G,wDAMnB,eAAarD,EAAWrY,GAAQ,gBAE9B,IAAIyI,EAAW,CACfA,OAAkB,QAClBA,OAAkB,QAClBA,IAAe,WACfA,KAAgB,GAChBA,MAAiB,GACjBA,EAAa,KACbA,EAAa,KACbA,OAAkB,OAVY,mBAaxB4P,EAAWrY,EAAQyI,G,oDAMzB,iDAGA/K,KAAK2a,UAAU3F,OAAOiJ,MAAMje,KAAKkb,YAAYoB,EAAGtc,KAAKkb,YAAYqB,EAC/Dvc,KAAKkb,YAAYiC,IAAKnd,KAAKkb,YAAYkC,KAAMpd,KAAKkb,YAAYmC,MAC9Drd,KAAKkb,YAAYqC,OAAQvd,KAAKkb,YAAYsC,OAAQxd,KAAKkb,YAAYuC,Y,OA9BtC/C,I,ydCCdwD,G,qDAMnB,cAAavD,EAAWrY,GAAQ,eAE9B,IAAIyI,EAAW,CACfA,KAAgB,GAHc,OAI9BA,EAASyQ,MAAQb,EAAU1X,KAAK1E,IAAI,cACpCwM,EAAS0Q,SAAW,EACpB1Q,EAASuR,EAAI,KACbvR,EAASwR,EAAI,KACbxR,EAAS2R,EAAI,KACb3R,EAAS4R,EAAI,KATiB,YAYxBhC,EAAWrY,EAAQyI,G,mDAMzB,gDAGA,IAAI+Q,EAAS,IAAIC,KACjBD,EAAOE,KAAOhc,KAAKkb,YAAYc,KAC/BF,EAAON,MAAQxb,KAAKkb,YAAYM,MAChCM,EAAO/F,iBAAmB/V,KAAKkb,YAAYM,MAC3CM,EAAOL,SAAWzb,KAAKkb,YAAYO,SAGnCzb,KAAK2a,UAAU3F,OAAOpC,KAAK5S,KAAKkb,YAAYoB,EAAGtc,KAAKkb,YAAYqB,EAC9Dvc,KAAKkb,YAAYwB,EAAG1c,KAAKkb,YAAYyB,EAAGb,O,MAnCZpB,I,ieCAbyD,G,iEAMnB,kBAAaxD,EAAWrY,GAAQ,mBAE9B,IAAIyI,EAAW,CACfA,OAAkB,GAHY,OAI9BA,EAASyQ,MAAQb,EAAU1X,KAAK1E,IAAI,cACpCwM,EAASqT,YAAczD,EAAU1X,KAAK1E,IAAI,eAC1CwM,EAASsT,UAAY1D,EAAU1X,KAAK1E,IAAI,aACxCwM,EAASuT,UAAY3D,EAAU1X,KAAK1E,IAAI,aACxCwM,EAASwT,YAAc5D,EAAU1X,KAAK1E,IAAI,eAC1CwM,EAASyT,KAAO,MAChBzT,EAAS0T,KAAO,KAChB1T,EAASuR,EAAI,KACbvR,EAASwR,EAAI,KAZiB,YAexB5B,EAAWrY,EAAQyI,G,uDAMzB,oDACA,IAAM0T,EAAOze,KAAKkb,YAAYuD,KAExB3C,EAAS,IAAIC,KACnBD,EAAON,MAAQxb,KAAKkb,YAAYM,MAChCM,EAAOsC,YAAcpe,KAAKkb,YAAYkD,YACtCtC,EAAOuC,UAAY3V,OAAO1I,KAAKkb,YAAYmD,WAC3CvC,EAAOyC,YAAgD,QAAjCve,KAAKkb,YAAYqD,YACvCzC,EAAOwC,UAA4C,QAA/Bte,KAAKkb,YAAYoD,UACrCxC,EAAO4C,eAAsD,QAApC1e,KAAKkb,YAAYwD,eAE1C1e,KAAK2a,UAAU3F,OAAOyJ,KAAKA,EAAMze,KAAKkb,YAAY4C,OAChD9d,KAAKkb,YAAYoB,EAAGtc,KAAKkb,YAAYqB,EAAGvc,KAAKkb,YAAYsD,KACzD1C,O,UAxCgCpB,ICLjBiE,G,WAKnB,gBAAaC,GAAM,iBAEjB5e,KAAK4L,OAAQ,EACb5L,KAAK4e,KAAOA,EACZ5e,KAAK4S,KAAO,KACZ5S,KAAK4E,KAAO,SACZ5E,KAAK6e,IAAM,KAGX7e,KAAK8e,WAAa,IAAIC,I,+DAQZnM,EAAMtC,GAEhB,IAAI7M,EAAO,IAAIub,IACfvb,EAAKwb,UAAU,EAAGjf,KAAK4e,KAAKM,QAAQpJ,QAAQqJ,mBAAmBnf,KAAK4e,KAAKQ,QAAQC,MAAlB,KAAgCC,kBAAmB,GAClH7b,EAAK8b,OAAOvf,KAAK8e,WAAWU,OAAQ,GACpC/b,EAAKgc,OAAO,EAAG,GACfhc,EAAKgc,OAAO,EAAGzf,KAAK8e,WAAWY,SAC/Bjc,EAAKwb,UAAU,EAAGjf,KAAK4e,KAAKM,QAAQpJ,QAAQqJ,mBAAmBnf,KAAK4e,KAAKQ,QAAQC,MAAlB,KAAgCM,sBAAuB,GACtHlc,EAAKgc,OAAOzf,KAAK8e,WAAWU,OAAQxf,KAAK8e,WAAWY,SACpDjc,EAAKgc,OAAOzf,KAAK8e,WAAWU,OAAQ,GACpC/b,EAAK6Y,EAAI,EACT7Y,EAAK8Y,EAAI,EAGT,IAAIqD,EAAY,IAAIZ,IACpBY,EAAUX,UAAU,EAAGjf,KAAK4e,KAAKM,QAAQpJ,QAAQqJ,mBAAmBnf,KAAK4e,KAAKQ,QAAQC,MAAlB,KAAgCxJ,iBAAkB,GACtH+J,EAAUC,UAAU7f,KAAK4e,KAAKM,QAAQpJ,QAAQqJ,mBAAmBnf,KAAK4e,KAAKQ,QAAQC,MAAlB,KAAgCxJ,kBACjG+J,EAAUE,SAAS,EAAG,EAAG9f,KAAK8e,WAAWU,OAAS,EAAGxf,KAAK8e,WAAWY,QAAU,GAC/EE,EAAUG,UACVH,EAAUtD,EAAI,EACdsD,EAAUrD,EAAI,EAGdvc,KAAK8e,WAAWkB,SAASJ,GACzB5f,KAAK8e,WAAWkB,SAASvc,K,sCAQlB9E,EAAOyB,GAEG,OAAbA,IACFA,EAAWJ,KAAK6e,KAGD,OAAbze,GACFJ,KAAK4e,KAAKxd,WAAW6B,KAAKiB,IAAI9D,EAAUzB,O,ueCvDzBshB,G,uEAMnB,sBAAarB,EAAM3D,GAAY,qCAE7B,cAAM2D,EAAM3D,IAGP6C,YAA0C,IAAzB7C,EAAU,QAAwD,QAAzBA,EAAU,OACzE,EAAKiF,WAAwC,IAAxBjF,EAAU,OAAsD,QAAxBA,EAAU,MACvE,EAAKwD,KAAOxD,EAAU,KACtB,EAAKrW,KAAO,SACZ,EAAKia,SAAoC,IAAtB5D,EAAU,IAA2BA,EAAU,IAAU,EAAK4D,IAGjF,EAAKsB,SAAQ,EAAO,EAAKtB,KAZI,E,mEAoBpBJ,EAAMD,GAEf,IAAI4B,EAAa,CACfC,WAAYrgB,KAAK4e,KAAKM,QAAQpJ,QAAQsI,YACtCkC,SAAUtgB,KAAK4e,KAAKxd,WAAW6B,KAAKob,UACpCkC,UAAsD,QAA1CvgB,KAAK4e,KAAKxd,WAAW6B,KAAKsb,YAAyB,SAAW,SAC1EiC,WAAqD,QAAxCxgB,KAAK4e,KAAKxd,WAAW6B,KAAKqb,UAAuB,OAAS,SACvEtC,KAAMhc,KAAK4e,KAAKxd,WAAW6B,KAAKwd,YAE9BC,EAAe,IAAIC,IAAKlC,EAAM2B,IAGd,IAAhBpgB,KAAK8d,QACP4C,EAAapE,GAAKtc,KAAK8e,WAAWU,OAASkB,EAAaxN,OAAS,EACjEwN,EAAanE,GAAKvc,KAAK8e,WAAWY,QAAUgB,EAAarN,QAAU,IAEnEqN,EAAapE,EAAI,EACjBoE,EAAanE,EAAI,GAInBvc,KAAK8e,WAAWkB,SAASU,K,sCAMgB,OAApC1gB,KAAK4e,KAAK9e,KAAKmD,KAAK2d,cAA0D,IAAhC5gB,KAAK8e,WAAW+B,cACjE7gB,KAAK8e,WAAW+B,aAAc,EAC9B7gB,KAAK8e,WAAWgC,YAAa,EAC7B9gB,KAAK8e,WAAWiC,QAAU,IAAIC,IAAU,EAAG,EAAGhhB,KAAK8e,WAAWU,OAAQxf,KAAK8e,WAAWY,SACtF1f,KAAK8e,WAAWmC,GAAG,YAAa,SAAU5V,GAASrL,KAAKqD,SAASgI,IAASnM,KAAKc,OAC/EA,KAAK8e,WAAWmC,GAAG,aAAc,SAAU5V,GAASrL,KAAKqD,SAASgI,IAASnM,KAAKc,SAI/D,IAAfA,KAAKkgB,OACPlgB,KAAKkhB,aAIP,IAAIzC,EAAOze,KAAK4e,KAAKxd,WAAWV,OAAOC,UAAUX,KAAKye,KAAM,MAAM,GAGlEze,KAAKmhB,UAAU1C,K,wCAOPpT,GAERrL,KAAKmgB,SAAQ,EAAMngB,KAAK6e,KAGE,OAAtB7e,KAAK4e,KAAK1N,QACZlR,KAAK4e,KAAK9e,KAAKqK,YAEfnK,KAAK4e,KAAKxd,WAAWY,QAAQC,QAAQkB,aAAaX,QAAUL,GAAUe,oB,cArFlCyb,I,shBCHrByC,G,6EAMnB,wBAAaxC,EAAM3D,GAAY,uCAE7B,cAAM2D,IAGDyC,aAA4C,IAA1BpG,EAAU,SAA0D,QAA1BA,EAAU,QAC3E,EAAKqG,mBAAwD,IAAhCrG,EAAU,eAAsE,QAAhCA,EAAU,cACvF,EAAKiF,WAAwC,IAAxBjF,EAAU,OAAsD,QAAxBA,EAAU,MACvE,EAAKsG,WAAwC,IAAxBtG,EAAU,MAA6BA,EAAU,MAAY,KAClF,EAAKwD,UAAsC,IAAvBxD,EAAU,KAA4BA,EAAU,KAAW,GAC/E,EAAK4D,SAAoC,IAAtB5D,EAAU,IAA2BA,EAAU,IAAU,KAC5E,EAAKrW,KAAO,WAGZ,EAAK4c,UAAY,KAdY,E,qEAsBpB/C,EAAMD,GAEf,IAAI4B,EAAa,CACfC,WAAYrgB,KAAK4e,KAAKM,QAAQpJ,QAAQsI,YACtCkC,SAAUtgB,KAAK4e,KAAKxd,WAAW6B,KAAKob,UACpCkC,UAAsD,QAA1CvgB,KAAK4e,KAAKxd,WAAW6B,KAAKsb,YAAyB,SAAW,SAC1EiC,WAAqD,QAAxCxgB,KAAK4e,KAAKxd,WAAW6B,KAAKqb,UAAuB,OAAS,SACvEtC,KAAMhc,KAAK4e,KAAKxd,WAAW6B,KAAKwd,YAE9BC,EAAe,IAAIC,IAAKlC,EAAM2B,GAClCM,EAAapE,EAAI,GACjBoE,EAAanE,EAAI,EAGjB,IAAIkF,EAAY,IAAIzC,IACpByC,EAAUxC,UAAU,EAAG,GACvBwC,EAAUlC,OAAO,EAAG,GACpBkC,EAAUhC,OAAO,GAAI,GACrBgC,EAAUlC,OAAO,GAAI,GACrBkC,EAAUhC,OAAO,GAAI,IACrBgC,EAAUlC,OAAO,EAAG,GACpBkC,EAAUhC,OAAO,EAAG,IACpBgC,EAAUlC,OAAO,EAAG,IACpBkC,EAAUhC,OAAO,GAAI,IACrBgC,EAAUnF,EAAI,EACdmF,EAAUlF,EAAI,EAGd,IAAImF,EAAW,IAAI1C,IACnB0C,EAASzC,UAAU,EAAG,SAAU,GAChCyC,EAAS7B,UAAU,UACnB6B,EAAS5B,SAAS,EAAG,EAAG,GAAI,IAC5B4B,EAAS3B,UACT2B,EAASpF,EAAI,EACboF,EAASnF,EAAI,EAGbvc,KAAKwhB,UAAY,IAAIxC,IACrBhf,KAAKwhB,UAAUvC,UAAU,EAAG,QAC5Bjf,KAAKwhB,UAAUjC,OAAO,EAAG,GACzBvf,KAAKwhB,UAAU/B,OAAO,EAAG,IACzBzf,KAAKwhB,UAAU/B,OAAO,GAAI,GAC1Bzf,KAAKwhB,UAAUlF,EAAI,EACnBtc,KAAKwhB,UAAUjF,EAAI,EACnBvc,KAAKwhB,UAAU/V,SAAU,EAGzBzL,KAAK8e,WAAWkB,SAASyB,GACzBzhB,KAAK8e,WAAWkB,SAAS0B,GACzB1hB,KAAK8e,WAAWkB,SAAShgB,KAAKwhB,WAC9BxhB,KAAK8e,WAAWkB,SAASU,K,uCAMW,IAAhC1gB,KAAK8e,WAAW+B,cAClB7gB,KAAK8e,WAAW+B,aAAc,EAC9B7gB,KAAK8e,WAAWgC,YAAa,EAC7B9gB,KAAK8e,WAAWiC,QAAU,IAAIC,IAAU,EAAG,EAAGhhB,KAAK8e,WAAWU,OAAQxf,KAAK8e,WAAWY,SACtF1f,KAAK8e,WAAWmC,GAAG,YAAa,SAAU5V,GACxCrL,KAAKqD,SAASgI,IACdnM,KAAKc,OACPA,KAAK8e,WAAWmC,GAAG,aAAc,SAAU5V,GACzCrL,KAAKqD,SAASgI,IACdnM,KAAKc,QAITA,KAAK8e,WAAW6C,kBAGG,IAAf3hB,KAAKkgB,OACPlgB,KAAKkhB,aAIP,IAAIzC,EAAOze,KAAK4e,KAAKxd,WAAWV,OAAOC,UAAUX,KAAKye,KAAM,MAAM,GAGlEze,KAAKmhB,UAAU1C,GAGfze,KAAK4hB,YAAY5hB,KAAKqhB,W,8CAOXA,GAEXrhB,KAAKqhB,QAAUA,EAGfrhB,KAAKwhB,UAAU/V,QAAU4V,EAGzBrhB,KAAK4e,KAAKM,QAAQ7O,KAAKrQ,KAAK4e,KAAKxd,YAGjCpB,KAAKmgB,QAAQkB,K,wCAOLhW,GAER,GAAmB,OAAfrL,KAAKuhB,MAAgB,CAEvB,IAAK,IAAIplB,EAAI,EAAGA,EAAI6D,KAAK4e,KAAKiD,QAAQxlB,OAAQF,IACT,aAA9B6D,KAAK4e,KAAKiD,QAAQ1lB,GAAGyI,MAAyB5E,KAAK4e,KAAKiD,QAAQ1lB,KAAO6D,MACzEA,KAAK4e,KAAKiD,QAAQ1lB,GAAGolB,QAAUvhB,KAAKuhB,OACrCvhB,KAAK4e,KAAKiD,QAAQ1lB,GAAGylB,aAAY,GAKrC5hB,KAAK4hB,aAAY,QAGjB5hB,KAAK4hB,aAAa5hB,KAAKqhB,UAIE,IAAvBrhB,KAAKshB,gBACmB,OAAtBthB,KAAK4e,KAAK1N,QACZlR,KAAK4e,KAAK9e,KAAKqK,YAEfnK,KAAK4e,KAAKxd,WAAWY,QAAQC,QAAQkB,aAAaX,QAAUL,GAAUe,mB,sCAUnE4e,EAAMC,GAEb,IAAI3hB,OAA4B,IAAT2hB,EAAwBA,EAAO/hB,KAAK6e,IAG3D,GAAiB,OAAbze,EAAmB,CAErB,IADA,IAAI6E,EAAS,GACJ9I,EAAI,EAAGA,EAAI6D,KAAK4e,KAAKiD,QAAQxlB,OAAQF,IACT,aAA9B6D,KAAK4e,KAAKiD,QAAQ1lB,GAAGyI,MAAyB5E,KAAK4e,KAAKiD,QAAQ1lB,GAAG0iB,MAAQ7e,KAAK6e,MAA0C,IAAjC7e,KAAK4e,KAAKiD,QAAQ1lB,GAAGklB,SACjHpc,EAAOtI,KAAKqD,KAAK4e,KAAKiD,QAAQ1lB,GAAGsiB,MAKjCxZ,IAAW,GACb,4DAAc,KAAM7E,GAEpB,4DAAc6E,EAAO+c,KAAK,KAAM5hB,Q,gBA1LIue,ICJvBsD,GAEnB,kBAAe,iBAEbjiB,KAAKqf,MAAQ,GACbrf,KAAKqf,MAAL,KAAqB,CACnBxJ,gBAAiB,UACjBqM,SAAU,GACV5C,iBAAkB,UAClBK,qBAAsB,YCLPwC,G,WAanB,oBAAa/gB,EAAY6E,EAAMmc,EAAMC,EAASC,EAASjD,EAAOvf,EAAMoR,EAASqR,GAAQ,qBAEnFviB,KAAKuiB,OAASA,EACdviB,KAAKiG,KAAOA,EACZjG,KAAKoB,WAAaA,EAClBpB,KAAKqT,OAASrT,KAAKoB,WAAW6B,KAAKoQ,OACnCrT,KAAKF,KAAiB,OAATA,EAAiBA,EAAOsB,EACrCpB,KAAKsiB,QAAUA,EACftiB,KAAKoiB,KAAOA,EACZpiB,KAAKqiB,QAAUA,EACfriB,KAAKwiB,KAAO,GACZxiB,KAAKqf,MAAQA,EACbrf,KAAKkR,QAAUA,EACflR,KAAK6hB,QAAU,GACf7hB,KAAKkT,MAAQlT,KAAKoB,WAAW6B,KAAKiQ,MAGlClT,KAAKyiB,MAAQ,EACb,IAAK,IAAItmB,EAAI,EAAGA,EAAI8J,EAAK5J,OAAQF,IAC/B6D,KAAKyiB,MAAQziB,KAAKyiB,MAAQ/Z,OAAOzC,EAAK9J,IAExC6D,KAAK0iB,MAAQ,EACb,IAAK,IAAIvmB,EAAI,EAAGA,EAAIimB,EAAK/lB,OAAQF,IAC/B6D,KAAK0iB,MAAQ1iB,KAAK0iB,MAAQha,OAAO0Z,EAAKjmB,IAIxC6D,KAAK2iB,SAAW,EAGhB3iB,KAAKkf,QAAU,IAAIjK,KAAOjV,KAAKoB,YAAY,GAC3CpB,KAAKkf,QAAQpJ,QAAQC,iBAAmB3U,EAAW6B,KAAK2f,WAGxD5iB,KAAKkf,QAAQJ,WAAWzL,OAASjS,EAAW6B,KAAKoQ,OACjDrT,KAAKkf,QAAQJ,WAAW5L,MAAQ9R,EAAW6B,KAAKiQ,MAChDlT,KAAKkf,QAAQpJ,QAAQsI,YAAchd,EAAW6B,KAAKmb,YAGnDpe,KAAKof,QAAU,IAAI6C,G,uEAMnB,OAAOjiB,KAAK2iB,a,kCAOPE,GAEL7iB,KAAK8iB,SAGgB,OAAjBD,GAEFA,EAAaE,WAIf/iB,KAAKoB,WAAWY,QAAQC,QAAQwM,OAAStM,GAAU6gB,WAGnDhjB,KAAKoB,WAAWY,QAAQ0J,UAAUC,KAAK2E,MAAMC,OAAS,UAGtDvQ,KAAKF,KAAKqJ,iBAGY,OAAjBnJ,KAAKkR,SAAoC,OAAdlR,KAAKF,MACnCE,KAAKF,KAAKyD,MAAMvD,KAAKkR,W,sCAOvBlR,KAAKkf,QAAQJ,WAAW6C,iBAGxB,IAAK,IAAIxlB,EAAI,EAAGA,EAAI6D,KAAK6hB,QAAQxlB,OAAQF,IAEvC6D,KAAKkf,QAAQJ,WAAWkB,SAAShgB,KAAK6hB,QAAQ1lB,GAAG2iB,YAGjD9e,KAAK6hB,QAAQ1lB,GAAG2mB,SAIlB9iB,KAAKkf,QAAQ7O,KAAKrQ,KAAKoB,c,4CAUb6hB,EAAQ7S,EAAK8S,EAASC,GAOhC,IALA,IAAIC,EAAapjB,KAAKoB,WAAW6B,KAAKiQ,MAAQxK,OAAO1I,KAAKsiB,QAAQ,IAAM5Z,OAAO1I,KAAKsiB,QAAQ,IACxFe,EAAcrjB,KAAKoB,WAAW6B,KAAKoQ,OAAS3K,OAAO1I,KAAKsiB,QAAQ,IAAM5Z,OAAO1I,KAAKsiB,QAAQ,IAG1FhG,EAAI5T,OAAO1I,KAAKsiB,QAAQ,IAAM5Z,OAAO1I,KAAKqiB,SACrClmB,EAAI,EAAGA,EAAIuM,OAAO0H,EAAI,IAAKjU,IAClCmgB,GAAS5T,OAAO1I,KAAKiG,KAAK9J,IAAM6D,KAAKyiB,MAASW,EAGhD,IADA,IAAI7G,EAAI7T,OAAO1I,KAAKsiB,QAAQ,IAAM5Z,OAAO1I,KAAKqiB,SACrClmB,EAAI,EAAGA,EAAIuM,OAAO0H,EAAI,IAAKjU,IAClCogB,GAAS7T,OAAO1I,KAAKoiB,KAAKjmB,IAAM6D,KAAK0iB,MAASW,EAIhD,IAFA,IAAInQ,EAAQ,EACRoQ,EAAQ5a,OAAOA,OAAO0H,EAAI,IAAM1H,OAAOwa,IAClC/mB,EAAIuM,OAAO0H,EAAI,IAAKjU,EAAImnB,EAAOnnB,IACtC+W,GAAgBxK,OAAO1I,KAAKiG,KAAK9J,IAEnC+W,EAASA,EAAQlT,KAAKyiB,MAASW,EAAa,EAAI1a,OAAO1I,KAAKqiB,SAE5D,IAAIhP,EAAS,EACbiQ,EAAQ5a,OAAOA,OAAO0H,EAAI,IAAM1H,OAAOya,IACvC,IAAK,IAAIhnB,EAAIuM,OAAO0H,EAAI,IAAKjU,EAAImnB,EAAOnnB,IACtCkX,GAAkB3K,OAAO1I,KAAKoiB,KAAKjmB,IAErCkX,EAAUA,EAASrT,KAAK0iB,MAASW,EAAc,EAAI3a,OAAO1I,KAAKqiB,SAG/DY,EAAOnE,WAAW5L,MAAQxR,KAAKC,MAAMuR,GACrC+P,EAAOnE,WAAWzL,OAAS3R,KAAKC,MAAM0R,GACtC4P,EAAOnE,WAAWxC,EAAI5a,KAAKC,MAAM2a,GACjC2G,EAAOnE,WAAWvC,EAAI7a,KAAKC,MAAM4a,GAGjCvc,KAAK6hB,QAAQllB,KAAKsmB,O,ufCrJDM,G,2EAMnB,qBAAa3E,EAAM3D,GAAY,oCAE7B,cAAM2D,IAGD4E,YAA0C,IAAzBvI,EAAU,QAAwD,SAAzBA,EAAU,OACzE,EAAKiF,WAAwC,IAAxBjF,EAAU,OAAsD,QAAxBA,EAAU,MACvE,EAAKwI,UAAsC,IAAvBxI,EAAU,KAA4BA,EAAU,KAAW,KAC/E,EAAKrW,KAAO,QARiB,E,8DAc7B5E,KAAK8e,WAAW6C,kBAGG,IAAf3hB,KAAKkgB,OACPlgB,KAAKkhB,aAIP,IAAIhjB,EAAO8B,KAAK4e,KAAKxd,WAAWY,QAAQgB,QAAQyF,cAAczI,KAAKyjB,MAC/DC,EAAM1jB,KAAK4e,KAAKxd,WAAWY,QAAQwY,MAAMtc,GAAMrC,KAG/CmZ,EAASlJ,SAASC,cAAc,UACpCiJ,EAAO9B,MAAQwQ,EAAIxQ,MACnB8B,EAAO3B,OAASqQ,EAAIrQ,OACV2B,EAAO2O,WAAW,MACxBC,UAAUF,EAAK,EAAG,GAGtB,IAAIG,EAAS,IAAIC,QAAKC,OAAOD,QAAKE,QAAQC,WAAWjP,IAGrD,IAAoB,IAAhBhV,KAAKwjB,OAAiB,CAExB,IAAIU,EAAMR,EAAIxQ,MAAQwQ,EAAIrQ,OAEtBrT,KAAK8e,WAAWY,SAAW1f,KAAK8e,WAAWU,QAE7CqE,EAAO3Q,MAAQlT,KAAK8e,WAAWU,OAC/BqE,EAAOxQ,OAAS6Q,EAAKlkB,KAAK8e,WAAWU,OACrCqE,EAAOvH,EAAI,EACXuH,EAAOtH,GAAKvc,KAAK8e,WAAWY,QAAUmE,EAAOxQ,QAAU,IAGvDwQ,EAAOxQ,OAASrT,KAAK8e,WAAWY,QAChCmE,EAAO3Q,MAAQgR,EAAKlkB,KAAK8e,WAAWY,QACpCmE,EAAOvH,GAAKtc,KAAK8e,WAAWU,OAASqE,EAAO3Q,OAAS,EACrD2Q,EAAOtH,EAAI,QAIbsH,EAAOvH,EAAKtc,KAAK8e,WAAWU,OAAS,EAAMqE,EAAO3Q,MAAQ,EAC1D2Q,EAAOtH,EAAKvc,KAAK8e,WAAWY,QAAU,EAAMmE,EAAOxQ,OAAS,EAI9DrT,KAAK8e,WAAWkB,SAAS6D,O,aAlEYlF,I,yeCEpBwF,G,uFAMnB,2BAAavF,EAAM3D,GAAY,0CAE7B,cAAM2D,EAAM3D,IAGPrW,KAAO,eACZ,EAAKia,SAAoC,IAAtB5D,EAAU,IAA2BA,EAAU,IAAU,KAG5E,EAAKkF,SAAQ,EAAO,EAAKtB,KATI,E,oEAeY,OAApC7e,KAAK4e,KAAK9e,KAAKmD,KAAK2d,cAA0D,IAAhC5gB,KAAK8e,WAAW+B,cACjE7gB,KAAK8e,WAAW+B,aAAc,EAC9B7gB,KAAK8e,WAAWgC,YAAa,EAC7B9gB,KAAK8e,WAAWiC,QAAU,IAAIC,IAAU,EAAG,EAAGhhB,KAAK8e,WAAWU,OAAQxf,KAAK8e,WAAWY,SACtF1f,KAAK8e,WAAWmC,GAAG,YAAa,SAAU5V,GACxCrL,KAAKqD,SAASgI,IACdnM,KAAKc,OACPA,KAAK8e,WAAWmC,GAAG,aAAc,SAAU5V,GACzCrL,KAAKqD,SAASgI,IACdnM,KAAKc,QAIT,iE,wCAOQqL,GAERrL,KAAKmgB,SAAQ,EAAMngB,KAAK6e,KAGE,OAAtB7e,KAAK4e,KAAK1N,QACZlR,KAAK4e,KAAK9e,KAAKqK,YAEfnK,KAAK4e,KAAKxd,WAAWY,QAAQC,QAAQkB,aAAaX,QAAUL,GAAUe,oB,mBAjD7BqgB,I,2dCD1Ba,G,oEAMnB,qBAAaxF,EAAM3D,GAAY,oCAE7B,cAAM2D,IAGDd,YAA0C,IAAzB7C,EAAU,QACF,QAAzBA,EAAU,OAEf,EAAKiF,WAAwC,IAAxBjF,EAAU,OACF,QAAxBA,EAAU,MAEf,EAAKwD,KAAOxD,EAAU,KACtB,EAAKrW,KAAO,QAZiB,E,oEAuBnB6Z,EAAMvL,EAAOG,EAAQ+M,GAE/B,IAAIpL,EAASlJ,SAASC,cAAc,UACpCiJ,EAAO9B,MAAQ,IACf8B,EAAO3B,OAAS,IAChB,IAAIgR,EAAiBrP,EAAO2O,WAAW,MAGvCU,EAAeC,KAAOlE,EAAWE,SAAW,MAAQF,EAAWC,WACjC,SAA1BD,EAAWI,aACb6D,EAAeC,KAAO,QAAUD,EAAeC,MAEpB,WAAzBlE,EAAWG,YACb8D,EAAeC,KAAO,UAAYD,EAAeC,MAQnD,IAJA,IAAIC,EAAQ9F,EAAKla,MAAM,KACnBD,EAAQ,GACRb,EAAO,GACP+gB,EAAc,EACXD,EAAMloB,OAAS,GAAG,CAEvB,IAAIooB,EAAOF,EAAMznB,QACb4nB,EAAcL,EAAeM,YAAYF,EAAO,KAAKvR,MAC5C,UAATuR,GAEFngB,EAAM3H,KAAK8G,GAEXA,EAAO,GACP+gB,EAAcE,GACJF,EAAcE,EAAexR,GAEvC5O,EAAM3H,KAAK8G,GAEXA,EAAOghB,EACPD,EAAcE,IAGdjhB,EAAiB,KAATA,EAAeghB,EAAOhhB,EAAO,IAAMghB,EAE3CD,GAA4BE,GAQhC,OAHApgB,EAAM3H,KAAK8G,GAGJa,I,0CAQEma,EAAMD,GAkBf,IAhBA,IAAI4B,EAAa,CACfC,WAAYrgB,KAAK4e,KAAKM,QAAQpJ,QAAQsI,YACtCkC,SAAUtgB,KAAK4e,KAAKxd,WAAW6B,KAAKob,UACpCkC,UAAsD,QAA1CvgB,KAAK4e,KAAKxd,WAAW6B,KAAKsb,YAAyB,SAAW,SAC1EiC,WAAqD,QAAxCxgB,KAAK4e,KAAKxd,WAAW6B,KAAKqb,UAAuB,OAAS,SACvEtC,KAAMhc,KAAK4e,KAAKxd,WAAW6B,KAAKwd,YAG5BmE,EAAgB5kB,KAAK6kB,WAAWpG,EAAMze,KAAK8e,WAAWU,OAAS,GACnExf,KAAK8e,WAAWY,QAAU,GAAIU,GAC1B0E,EAAiB9kB,KAAK4e,KAAKM,QAAQ6F,iBAAiB,OAAQ3E,EAAWC,WAC3ED,EAAWE,SAAUF,EAAWI,YAG9BjE,GAAqB,IAAhBvc,KAAK8d,QAAoB9d,KAAK8e,WAAWY,QAAYkF,EAAcvoB,OAAUyoB,EAAezR,QAAW,EAAI,EAE3GlX,EAAI,EAAGA,EAAIyoB,EAAcvoB,OAAQF,IAAK,CAC7C,IAAMukB,EAAe,IAAIC,IAAKiE,EAAczoB,GAAIikB,GAChDM,EAAapE,EAAI5a,KAAKC,OAAuB,IAAhB3B,KAAK8d,QAAoB9d,KAAK8e,WAAWU,OAASkB,EAAaxN,OAAS,EAAI,GACzGwN,EAAanE,EAAI7a,KAAKC,MAAM4a,GAC5BA,GAAQuI,EAAezR,OAGvBrT,KAAK8e,WAAWkB,SAASU,M,sCAO3B1gB,KAAK8e,WAAW6C,kBAGG,IAAf3hB,KAAKkgB,OACPlgB,KAAKkhB,aAIP,IAAMzC,EAAOze,KAAK4e,KAAKxd,WAAWV,OAAOC,UAAUX,KAAKye,KAAMze,KAAK4e,KAAK9e,KAAKmD,MAAM,GAGnFjD,KAAKmhB,UAAU1C,O,aAjIsBE,I,yeCHpBqG,G,uFAMnB,2BAAapG,EAAM3D,GAAY,0CAE7B,cAAM2D,IAGD0C,mBAAwD,IAAhCrG,EAAU,eAAsE,QAAhCA,EAAU,cACvF,EAAKgK,aAA4C,IAA1BhK,EAAU,QAA+BA,EAAU,QAAc,KACxF,EAAKiK,iBAAoD,IAA9BjK,EAAU,YAAmCA,EAAU,YAAkB,aACpG,EAAKtB,WAAwC,IAAxBsB,EAAU,MAA6BA,EAAU,MAAY,IAClF,EAAK4D,SAAoC,IAAtB5D,EAAU,IAA2BA,EAAU,IAAU,KAC5E,EAAKrW,KAAO,eAGZ,EAAKugB,YAAc,GACnB,EAAKxC,SAAW,EAAK/D,KAAKwG,cAG1B,EAAKC,gBAjBwB,E,kFA0B7B,GAHArlB,KAAKslB,OAAS,IAGTC,MAAMC,WAAWxlB,KAAK2Z,SAAW8L,SAASzlB,KAAK2Z,OAElD,IAAK,IAAIxd,EAAI,EAAGA,EAAIuM,OAAO1I,KAAK2Z,OAAQxd,IACtC6D,KAAKslB,OAAO3oB,KAAK,SAKnB,IADA,IAAI+oB,EAAS1lB,KAAK2Z,MAAMpV,MAAM,KACrBpI,EAAI,EAAGA,EAAIupB,EAAOrpB,OAAQF,IACjC6D,KAAKslB,OAAO3oB,KAAK+oB,EAAOvpB,M,8CAWjBmgB,EAAGC,EAAGrJ,EAAOG,GAExB,IAAIuM,EAAY,IAAIZ,IACpBY,EAAUX,UAAU,EAAGjf,KAAK4e,KAAKM,QAAQpJ,QAAQqJ,mBAAmBnf,KAAK4e,KAAKQ,QAAQC,MAAlB,KAAgCxJ,iBAAkB,GACtH+J,EAAUE,SAASxD,EAAGC,EAAGrJ,EAAOG,GAChCuM,EAAUtD,EAAI,EACdsD,EAAUrD,EAAI,EAGdvc,KAAK8e,WAAWkB,SAASJ,K,kDAOZtD,EAAGC,GAEhB,IAAIkF,EAAY,IAAIzC,IACpByC,EAAUxC,UAAU,EAAG,GACvBwC,EAAUlC,OAAO,EAAG,GACpBkC,EAAUhC,OAAO,GAAI,GACrBgC,EAAUlC,OAAO,GAAI,GACrBkC,EAAUhC,OAAO,GAAI,IACrBgC,EAAUlC,OAAO,EAAG,GACpBkC,EAAUhC,OAAO,EAAG,IACpBgC,EAAUlC,OAAO,EAAG,IACpBkC,EAAUhC,OAAO,GAAI,IACrBgC,EAAUnF,EAAI,EACdmF,EAAUlF,EAAI,EAGd,IAAImF,EAAW,IAAI1C,IACnB0C,EAASzC,UAAU,EAAG,SAAU,GAChCyC,EAAS7B,UAAU,UACnB6B,EAAS5B,SAAS,EAAG,EAAG,GAAI,IAC5B4B,EAAS3B,UACT2B,EAASpF,EAAI,EACboF,EAASnF,EAAI,EAGb,IAAIoJ,EAAY,IAAI3G,IACpB2G,EAAU1G,UAAU,EAAG,QACvB0G,EAAUpG,OAAO,EAAG,GACpBoG,EAAUlG,OAAO,EAAG,IACpBkG,EAAUlG,OAAO,GAAI,GACrBkG,EAAUrJ,EAAI,EACdqJ,EAAUpJ,EAAI,EACdoJ,EAAUla,SAAU,EAGpB,IAAIma,EAAY,IAAI7G,IACpB6G,EAAU5F,SAASyB,GACnBmE,EAAU5F,SAAS0B,GACnBkE,EAAU5F,SAAS2F,GACnBC,EAAUtJ,EAAIA,EACdsJ,EAAUrJ,EAAIA,EAGdvc,KAAK8e,WAAWkB,SAAS4F,GACzB5lB,KAAKmlB,YAAYxoB,KAAKipB,GAGtBA,EAAU/E,aAAc,EACxB+E,EAAU9E,YAAa,EACvB8E,EAAU7E,QAAU,IAAIC,IAAU,EAAG,EAAG,GAAI,IAC5C4E,EAAU3E,GAAG,YAAa,SAAU5V,GAClCrL,KAAKqD,SAASgI,IACdnM,KAAKc,OACP4lB,EAAU3E,GAAG,aAAc,SAAU5V,GACnCrL,KAAKqD,SAASgI,IACdnM,KAAKc,S,0CASEsc,EAAGC,EAAGkC,EAAMoH,GAErB,IAAIzF,EAAa,CACfC,WAAYrgB,KAAK4e,KAAKM,QAAQpJ,QAAQsI,YACtCkC,SAAUtgB,KAAK4e,KAAKxd,WAAW6B,KAAKob,UACpCkC,UAAsD,QAA1CvgB,KAAK4e,KAAKxd,WAAW6B,KAAKsb,YAAyB,SAAW,SAC1EiC,WAAqD,QAAxCxgB,KAAK4e,KAAKxd,WAAW6B,KAAKqb,UAAuB,OAAS,SACvEtC,KAAMhc,KAAK4e,KAAKxd,WAAW6B,KAAKwd,YAI9BqE,EAAiB9kB,KAAK4e,KAAKM,QAAQ6F,iBAAiBtG,EAAM2B,EAAWC,WAAYD,EAAWE,SAAUF,EAAWI,YACjHE,EAAe,IAAIC,KAAKlC,EAAM2B,IACf,IAAfyF,GACFnF,EAAapE,EAAIA,EAAKoE,EAAaxN,MAAQ,EAAK,GAChDwN,EAAanE,EAAIA,EAAIuI,EAAezR,SAEpCqN,EAAapE,EAAIA,EAAIoE,EAAaxN,MAAQ,GAC1CwN,EAAanE,EAAIA,EAAI,GAIvBvc,KAAK8e,WAAWkB,SAASU,K,sCAMgB,OAApC1gB,KAAK4e,KAAK9e,KAAKmD,KAAK2d,cAA0D,IAAhC5gB,KAAK8e,WAAW+B,cACjE7gB,KAAK8e,WAAW+B,aAAc,EAC9B7gB,KAAK8e,WAAWgC,YAAa,EAC7B9gB,KAAK8e,WAAWiC,QAAU,IAAIC,IAAU,EAAG,EAAGhhB,KAAK8e,WAAWU,OAAQxf,KAAK8e,WAAWY,UAIxF1f,KAAKmlB,YAAc,GACnBnlB,KAAK8e,WAAW6C,iBAGhB,IAAImE,EAAK9lB,KAAK8e,WAAWU,OAAS,EAC9BuG,EAAK/lB,KAAK8e,WAAWY,QAAU,EAC/BsG,EAAKhmB,KAAK4e,KAAKQ,QAAQC,MAAlB,KAAgC6C,SAGzC,GAAyB,eAArBliB,KAAKklB,YAA8B,CAErC,IAAIe,GAAM,EAAIjmB,KAAK8e,WAAWU,OAAS,EAAIwG,IAAOhmB,KAAKslB,OAAOjpB,OAAS,GAGvE2D,KAAKkmB,YAAY,EAAGH,EAAK,GAAMC,EAAIhmB,KAAK8e,WAAWU,OAAQ,EAAIwG,GAI/D,IADA,IAAIG,EAAKH,EACA7pB,EAAI,EAAGA,EAAI6D,KAAKslB,OAAOjpB,OAAQF,IAAK,CAE3C6D,KAAKomB,cAAcD,EAAIJ,EAAK,GAG5B,IAAMtH,EAAOze,KAAK4e,KAAKxd,WAAWV,OAAOC,UAAUX,KAAKslB,OAAOnpB,GAAI,MAAM,GAGzE6D,KAAKqmB,UAAUF,EAAIJ,EAAK,EAAGtH,GAAM,GAGjC0H,GAAUF,OAEP,CAEL,IAAIK,GAAM,EAAItmB,KAAK8e,WAAWY,QAAU,EAAIsG,IAAOhmB,KAAKslB,OAAOjpB,OAAS,GAGxE2D,KAAKkmB,YAAYJ,EAAK,GAAME,EAAI,EAAG,EAAIA,EAAIhmB,KAAK8e,WAAWY,SAI3D,IADA,IAAI6G,EAAKP,EACA7pB,EAAI,EAAGA,EAAI6D,KAAKslB,OAAOjpB,OAAQF,IAAK,CAE3C6D,KAAKomB,cAAcN,EAAK,EAAGS,GAG3B,IAAI9H,EAAOze,KAAK4e,KAAKxd,WAAWV,OAAOC,UAAUX,KAAKslB,OAAOnpB,GAAI,MAAM,GAGvE6D,KAAKqmB,UAAUP,EAAK,EAAGS,EAAI9H,GAAM,GAGjC8H,GAAUD,GAKO,OAAjBtmB,KAAKilB,UAEPjlB,KAAKmlB,YAAYzc,OAAO1I,KAAKilB,UAAUuB,SAAS,GAAG/a,SAAU,EAG7DzL,KAAKymB,UAAU/d,OAAO1I,KAAKilB,a,wCAQrB5Z,GAER,IAAK,IAAIlP,EAAI,EAAGA,EAAI6D,KAAKmlB,YAAY9oB,OAAQF,IACvC6D,KAAKmlB,YAAYhpB,KAAOkP,EAAMqb,eAEhC1mB,KAAKmlB,YAAYhpB,GAAGqqB,SAAS,GAAG/a,SAAU,EAG1CzL,KAAKymB,UAAUtqB,IAGf6D,KAAKmlB,YAAYhpB,GAAGqqB,SAAS,GAAG/a,SAAU,I,0CASrC9M,GAEM,OAAVA,IAAqBA,EAAQ,GAAOA,EAAQqB,KAAKslB,OAAOjpB,QAC3D2D,KAAK4e,KAAKxd,WAAWY,QAAQmC,UAAUC,SAAS,sFAGhDpE,KAAKrB,MAAQA,EAGbqB,KAAKmgB,QAAQxhB,M,sCASRmjB,EAAMC,GAEb,IAAI3hB,OAA4B,IAAT2hB,EAAwBA,EAAO/hB,KAAK6e,IAG3D,GAAiB,OAAbze,EAAmB,CAErB,IADA,IAAI6E,EAAS,GACJ9I,EAAI,EAAGA,EAAI6D,KAAK4e,KAAKiD,QAAQxlB,OAAQF,IACT,aAA9B6D,KAAK4e,KAAKiD,QAAQ1lB,GAAGyI,MAAyB5E,KAAK4e,KAAKiD,QAAQ1lB,GAAG0iB,MAAQ7e,KAAK6e,MAA0C,IAAjC7e,KAAK4e,KAAKiD,QAAQ1lB,GAAGklB,SACjHpc,EAAOtI,KAAKqD,KAAK4e,KAAKiD,QAAQ1lB,GAAGsiB,MAKjCxZ,IAAW,GACb,+DAAc,KAAM7E,GAEpB,+DAAc6E,EAAO+c,KAAK,KAAM5hB,Q,mBAnSOue,I,qeCO1BgI,G,iFAMnB,yBAAa/H,EAAM3D,GAAY,wCAE7B,cAAM2D,IAGDd,YAA0C,IAAzB7C,EAAU,QAAwD,QAAzBA,EAAU,OACzE,EAAKrP,OAAQ,EACb,EAAKsU,WAAwC,IAAxBjF,EAAU,OAAsD,QAAxBA,EAAU,MACvE,EAAK2L,UAAsC,IAAvB3L,EAAU,KAA4BA,EAAU,KAAW,eAC/E,EAAKwD,UAAsC,IAAvBxD,EAAU,KAA4BA,EAAU,KAAW,GAC/E,EAAK4D,SAAoC,IAAtB5D,EAAU,IAA2BA,EAAU,IAAU,KAC5E,EAAK4L,oBAA0D,IAAjC5L,EAAU,gBAAwE,QAAjCA,EAAU,eACzF,EAAKrW,KAAO,aAZiB,E,sEAkB7B5E,KAAK4L,OAAQ,I,wCAOLqX,EAAQ5X,GAEhB4X,EAAO9C,QAAQ8C,EAAO6D,WAAWrI,KAAMwE,EAAOpE,KAGvB,KAAlBxT,EAAM0b,UAA8C,IAA1B9D,EAAO4D,iBAER,OAAxB5D,EAAOrE,KAAK1N,QACd+R,EAAOrE,KAAK9e,KAAKqK,YAEjB8Y,EAAOrE,KAAKxd,WAAWY,QAAQC,QAAQkB,aAAaX,QAAUL,GAAUe,mB,0CAUnEub,EAAMD,GAEPxe,KAAK4e,KAAKM,QAAQpJ,QAAQqJ,mBAAmBnf,KAAK4e,KAAKxd,WAAW6B,KAAK2f,YAMjE5iB,KAAK4e,KAAKM,QAAQpJ,QAAQsI,YAC5Bpe,KAAK4e,KAAKxd,WAAW6B,KAAKob,UACxBre,KAAK4e,KAAKxd,WAAW6B,KAAKsb,YACzBve,KAAK4e,KAAKxd,WAAW6B,KAAKqb,UACjCte,KAAK4e,KAAKxd,WAAW6B,KAAKwd,a,sCAalCzgB,KAAK8e,WAAW6C,iBAQhB3hB,KAAKmhB,UAAUnhB,KAAKye,U,iBApFqBE,I,6eCFxBqI,G,iFAOnB,uBAAa5lB,EAAYlD,EAAMoE,GAAQ,sCACrC,cAAMlB,EAAYlD,EAAMoE,IACnBiF,YAAc,iCACnB,EAAKmJ,WAAa,EAClB,EAAK5I,YAAYxF,GAJoB,E,4EAazB2kB,EAAMC,GAGjB,IAFD,IAAIC,EAAI,EACJC,EAAI,EACK,IAAND,GAASA,EAAIzlB,KAAK2lB,SACxB,KAAY,IAAND,GAASA,EAAI1lB,KAAK2lB,SACxB,OAAO3lB,KAAK4lB,IAAI,EAAGL,EAAOvlB,KAAK6lB,MAAM,EAAM7lB,KAAK8lB,IAAIL,IAAMzlB,KAAK+lB,IAAI,EAAM/lB,KAAKgmB,GAAGN,GAAKF,K,sDASxED,EAAMU,GACrB,OAAOjmB,KAAK4lB,IAAI,EAAG5lB,KAAK6H,MAAM0d,EAAOvlB,KAAK2lB,SAAWM,EAASA,EAAS,M,oCAKvE3nB,KAAKiD,KAAK2O,SAAW,IACrB5R,KAAKiD,KAAK0kB,OAAS,EACnB3nB,KAAKiD,KAAK2kB,YAAc,Y,wCAKxB,IAAIhW,EAAW5R,KAAKiD,KAAK1E,IAAI,YACzBopB,EAAS3nB,KAAKiD,KAAK1E,IAAI,UACvBqpB,EAAc5nB,KAAKiD,KAAK1E,IAAI,iBAC1B,IAASqT,IAAeA,EAAW,IACvC5R,KAAKgC,QAAQmC,UAAUC,SAAS,iEAAmEpE,KAAK9B,MAEtF,YAAhB0pB,EACF5nB,KAAK0Q,UAAY1Q,KAAK6nB,gBAAgBjW,EAAU+V,GACvB,cAAhBC,EACT5nB,KAAK0Q,UAAY1Q,KAAK8nB,cAAclW,EAAU+V,GAE9C3nB,KAAKgC,QAAQmC,UAAUC,SAAS,yCAA2CpE,KAAK9B,MAE9E8B,KAAK0Q,UAAY,IACnB1Q,KAAK0Q,UAAY,GAEnB1Q,KAAK0Q,UAAYhI,OAAO1I,KAAK0Q,WAC7B1Q,KAAKoB,WAAW6B,KAAKiB,IAAI,SAAWlE,KAAK9B,KAAM8B,KAAK0Q,WACpD1Q,KAAKgC,QAAQmC,UAAUQ,WAAW,aAAe3E,KAAK0Q,UAAY,QAClE,8D,gCAKA,wDACA1Q,KAAKmJ,eAAenJ,KAAKwD,QACzBxD,KAAKuD,MAAMvD,KAAK0Q,e,eAzEuBrO,G,4hBCDtB0lB,G,kEASnB,kBAAa3mB,EAAYlD,EAAMoE,EAAQ0lB,EAAUzgB,GAAa,iCAE5D,cAAMnG,EAAYlD,EAAMoE,IAGnB2D,KAAO,GACZ,EAAKsB,YAAc,yBACnB,EAAKsb,aAAe,KACpB,EAAKjE,KAAO,KACZ,EAAKqJ,QAAU,GACf,EAAK7F,KAAO,GACZ,EAAKlR,QAAU,KAGf,EAAKgX,eAAgB,EACrB,EAAKC,YAAa,EAGlB,EAAK5gB,YAAcA,EACnB,EAAK6gB,UAAYJ,EAGjB,EAAKlgB,YAAYxF,GAtB2C,E,iEA4B5DtC,KAAKoB,WAAWY,QAAQ0J,UAAUC,KAAK2E,MAAMC,OAAS,OAGtDvQ,KAAKoB,WAAWY,QAAQC,QAAQwM,OAAStM,GAAUkmB,WAGnDroB,KAAKwC,QAAUL,GAAUe,gBAGzB,2D,sCAGOG,GAEPrD,KAAK4e,KAAKM,QAAQ7O,KAAKrQ,KAAK4e,KAAKxd,c,oCAKjCpB,KAAKiD,KAAKgD,KAAO,MACjBjG,KAAKiD,KAAKmf,KAAO,MACjBpiB,KAAKiD,KAAKof,QAAU,GACpBriB,KAAKiD,KAAKqlB,OAAS,OACnBtoB,KAAKiD,KAAK2d,YAAc,KACxB5gB,KAAKiD,KAAKiO,QAAU,WACpBlR,KAAKiD,KAAKqf,QAAU,cACpBtiB,KAAKuoB,SAAW,K,4CAGN9kB,GAEV,IAAIwD,EAAOjH,KAAKU,OAAO6D,MAAMd,IAEJ,IAApBzD,KAAKmoB,YAAqC,YAAZlhB,EAAK,KACtCjH,KAAKiD,KAAL,UAAyBjD,KAAKiD,KAAL,UAAyBQ,EAAKgO,QAAQ,KAAM,IAAM,YAEjD,IAAvBzR,KAAKkoB,eAAwC,YAAZjhB,EAAK,IACzCjH,KAAKioB,QAAQtrB,KAAK8G,EAAKgO,QAAQ,KAAM,KAIvB,WAAZxK,EAAK,IAEPA,EAAKnK,QAGLkD,KAAKuoB,SAAS5rB,KAAKsK,IACE,gBAAZA,EAAK,GACdjH,KAAKkoB,eAAgB,EACA,kBAAZjhB,EAAK,IACdjH,KAAKiD,KAAL,UAAyB,GACzBjD,KAAKmoB,YAAa,GACG,YAAZlhB,EAAK,KACdjH,KAAKkoB,eAAgB,EACrBloB,KAAKmoB,YAAa,K,wCAOpB,IAKIjX,EALAjL,EAAkC,iBAAnBjG,KAAKiD,KAAKgD,KAAqBjG,KAAKiD,KAAKgD,KAAK1B,MAAM,KAAO,CAACiN,OAAOxR,KAAKiD,KAAKgD,OAC5Fmc,EAAkC,iBAAnBpiB,KAAKiD,KAAKmf,KAAqBpiB,KAAKiD,KAAKmf,KAAK7d,MAAM,KAAO,CAACiN,OAAOxR,KAAKiD,KAAKmf,OAC5FE,EAAUtiB,KAAKiD,KAAKqf,QAAQ/d,MAAM,KAKpC2M,EADwB,aAAtBlR,KAAKiD,KAAKiO,QACF,KAEAlR,KAAKiD,KAAKiO,QAItBlR,KAAK4e,KAAO,IAAIuD,GAAWniB,KAAKoB,WAAY6E,EAAMmc,EAAMpiB,KAAKiD,KAAKof,QAChEC,EAAStiB,KAAKiD,KAAKqlB,OAAQtoB,KAAMkR,EAAmC,QAA1BlR,KAAKiD,KAAKulB,aAGtD,IAAK,IAAIrsB,EAAI,EAAGA,EAAI6D,KAAKuoB,SAASlsB,OAAQF,IAAK,CAC7C6D,KAAK6iB,aAAe,KACpB,IAAIhW,EAAS,GACT4b,EAAa,GAEjB,GADAA,EAAW9rB,KAAKqD,KAAK4e,MACjB5e,KAAKuoB,SAASpsB,GAAGE,OAAS,EAC5B,IAAK,IAAIgB,EAAI,EAAGA,EAAI2C,KAAKuoB,SAASpsB,GAAGE,OAAQgB,IAAK,CAChD,IAAIqrB,EAAUlX,OAAOxR,KAAKuoB,SAASpsB,GAAGkB,IAAIsrB,OAAO,EAAGnX,OAAOxR,KAAKuoB,SAASpsB,GAAGkB,IAAIurB,QAAQ,MACpFC,EAAWrX,OAAOxR,KAAKuoB,SAASpsB,GAAGkB,IAAIyrB,UAAUtX,OAAOxR,KAAKuoB,SAASpsB,GAAGkB,IAAIurB,QAAQ,KAAO,EAAGpX,OAAOxR,KAAKuoB,SAASpsB,GAAGkB,IAAIhB,QAC/HwQ,EAAO6b,GAAW1oB,KAAKU,OAAO+H,cAAcogB,GAC5Chc,EAAO6b,GAAW1oB,KAAKU,OAAOC,UAAUkM,EAAO6b,GAAU1oB,KAAK4e,KAAK9e,KAAKmD,MAAM,GAC9E4J,EAAO6b,GAAW1oB,KAAKU,OAAO+H,cAAcoE,EAAO6b,IACnDD,EAAW9rB,KAAKqD,KAAKU,OAAO+H,cAAcogB,IAK9C,IAAIjd,GAAQ,OACoB,IAApBiB,EAAM,OAAmD,QAApBA,EAAM,eAC7CA,EAAM,MACdjB,GAAQ,GAIV,IAAImd,EAAQ/oB,KAAKuoB,SAASpsB,GAAG,GACzBoK,EAAMvG,KAAKuoB,SAASpsB,GAAG,GACvBwJ,EAAM3F,KAAKuoB,SAASpsB,GAAG,GACvB6sB,EAAUhpB,KAAKuoB,SAASpsB,GAAG,GAC3B8sB,EAAUjpB,KAAKuoB,SAASpsB,GAAG,GAG/B,IACE,IAAI+sB,EAAKlpB,KAAKoB,WAAW6H,MAAMkgB,gBAAgBJ,EAAO/oB,KAAK4e,KAAM/R,GACjE,MAAO7D,GACPhJ,KAAKoB,WAAWY,QAAQmC,UAAUC,SAAS,2BAA6B2kB,EAAQ,WAAa/f,GAI/FhJ,KAAK4e,KAAKwK,WAAWF,EAAI,CAAC3iB,EAAKZ,GAAMqjB,EAASC,IAGhC,IAAVrd,IACuB,MAArB5L,KAAK6iB,aACP7iB,KAAKoB,WAAWY,QAAQmC,UAAUC,SAAS,sDAE3CpE,KAAK6iB,aAAeqG,GAM1B,yD,gCAMA,mDAG8B,QAA1BlpB,KAAKiD,KAAK2d,aAEZ5gB,KAAK4e,KAAKkE,SAGV9iB,KAAKmK,aAELnK,KAAK4e,KAAKyK,MAAMrpB,KAAK6iB,kB,UAtLWxgB,G,yeCDjBinB,G,2EAOnB,qBAAaloB,EAAYlD,EAAMoE,GAAQ,oCAErC,cAAMlB,EAAYlD,EAAMoE,EAAQ,eAAgB,0BAG3CinB,aAAe,KALiB,E,oEAWrC,GAA0B,OAAtBvpB,KAAKupB,aAEPvpB,KAAKupB,aAAarK,QAAQJ,WAAWrT,SAAU,EAC/CzL,KAAK4e,KAAKM,QAAQJ,WAAWrT,SAAU,EACvCzL,KAAKupB,aAAe,KAGpBvpB,KAAKoD,WAGL,IAAkD,IAA9CpD,KAAKoB,WAAW6B,KAAK1E,IAAI,iBAE3B,GAAIyB,KAAKoB,WAAWV,OAAO+H,cAAczI,KAAKoB,WAAW6B,KAAK1E,IAAI,sBAAwByB,KAAKiD,KAAK1E,IAAI,iBAEtG,gEACK,CACLia,QAAQgP,IAAI,gBAEZxnB,KAAKupB,aAAe,IAAIpH,GAAWniB,KAAKoB,WAAY,CAAC,GAAI,CAAC,GAAI,GAAI,CAAC,KAAM,KAAM,KAAM,MAAO,OAAQpB,KAAM,KAAM,GAGhH,IAAIijB,EAASjjB,KAAKoB,WAAW6H,MAAMkgB,gBAAgB,QAASnpB,KAAKupB,aAAc,CAAC9K,KAAMze,KAAKiD,KAAKumB,gBAAiB1L,OAAQ,QAGzH9d,KAAKupB,aAAaH,WAAWnG,EAAQ,CAAC,EAAG,GAAI,EAAG,GAGhDjjB,KAAK4e,KAAKM,QAAQJ,WAAWrT,SAAU,EACvCzL,KAAKupB,aAAarK,QAAQJ,WAAWrT,SAAU,EAG/CzL,KAAKupB,aAAaF,MAAM,WAI1BrpB,KAAKoB,WAAWY,QAAQynB,S,gCAQ5B,0D,aA7DqC1B,I,yfCDpB2B,G,iGAOnB,4BAAatoB,EAAYlD,EAAMoE,GAAQ,gDAE/BlB,EAAYlD,EAAMoE,EAAQ,uBAAwB,iC,2EAMxD,qE,wCAMAtC,KAAKiD,KAAKgD,KAAO,OACjBjG,KAAKiD,KAAKmf,KAAO,OACjBpiB,KAAKuoB,SAAW,GAEhBvoB,KAAKuoB,SAAS5rB,KAAKqD,KAAKU,OAAO6D,MAAM,sCACrCvE,KAAKuoB,SAAS5rB,KAAKqD,KAAKU,OAAO6D,MAAM,8CAErC,IAAK,IAAIpI,EAAI,EAAGA,EAAI6D,KAAKioB,QAAQ5rB,OAAQF,IACvC6D,KAAKuoB,SAAS5rB,KAAKqD,KAAKU,OAAO6D,MAAM,KAAOiN,OAAOrV,EAAI,GAAK,8CAAgD6D,KAAKioB,QAAQ9rB,GAAK,MAC9H6D,KAAKiD,KAAKmf,KAAOpiB,KAAKiD,KAAKmf,KAAO,KAEpCpiB,KAAKuoB,SAAS5rB,KAAKqD,KAAKU,OAAO6D,MAAM,KAAOiN,OAAOrV,EAAI,GAAK,qCAC5D6D,KAAKiD,KAAKmf,KAAOpiB,KAAKiD,KAAKmf,KAAO,OAGlC,mE,gCAMA,iE,oBA1C4C2F,I,mfCA3B4B,G,wFAOnB,yBAAavoB,EAAYlD,EAAMoE,GAAQ,6CAE/BlB,EAAYlD,EAAMoE,EAAQ,oBAAqB,8B,wEAMrD,kE,gCAMA,8D,iBArByCylB,I,+eCAxB6B,G,kFAOnB,uBAAaxoB,EAAYlD,EAAMoE,GAAQ,2CAE/BlB,EAAYlD,EAAMoE,EAAQ,kBAAmB,4B,sEAMnD,gE,gCAMA,4D,eArBuCylB,ICAtB8B,G,WAMnB,eAAazoB,EAAYuX,GAAQ,gBAE/B3Y,KAAKqB,YAAcD,EAGnBpB,KAAK8pB,OAAQ,EACb9pB,KAAK4R,SAAW,WAChB5R,KAAK+pB,aAAc,EAGnB/pB,KAAKgqB,UAAW,EAChBhqB,KAAKiqB,QAAU,KAGA,OAAXtR,IAEF3Y,KAAKkqB,OAASvR,EAAO9c,KAGrBmE,KAAKmqB,SAAWnG,IAAQoG,KAAKzR,EAAO9c,MAGpCmE,KAAKqqB,aAAe,IAAItG,IAAO/jB,KAAKmqB,UACpCnqB,KAAKkqB,OAAOI,QAGZtqB,KAAKkqB,OAAO9Q,QAAUpZ,KAAKqB,YAAYW,QAAQC,QAAQsoB,YAAYrrB,KAAKc,MACxEA,KAAKkqB,OAAOM,OAASxqB,KAAKqB,YAAYW,QAAQC,QAAQwoB,WAAWvrB,KAAKc,O,2DAMlD,IAAlBA,KAAKgqB,WAEPhqB,KAAKqB,YAAYW,QAAQ0J,UAAUoX,OAAO9iB,KAAKqqB,cAGzB,OAAjBrqB,KAAKiqB,UAAqD,IAA/BjqB,KAAK0qB,uBAEnC1qB,KAAKqB,YAAYW,QAAQ2G,cAAczG,KAAK,KAAMlC,KAAKiqB,Y,kCAQ3DjqB,KAAKkqB,OAAOxQ,OAGZ1Z,KAAKkqB,OAAOtR,QAAyB,IAAf5Y,KAAK8pB,MAAkB,EAAI,GAGxB,IAArB9pB,KAAK+pB,cACP/pB,KAAKqqB,aAAanX,MAAQlT,KAAKqB,YAAYW,QAAQ0J,UAAUwH,MAC7DlT,KAAKqqB,aAAahX,OAASrT,KAAKqB,YAAYW,QAAQ0J,UAAU2H,QAIhErT,KAAKqB,YAAYW,QAAQ0J,UAAUoX,OAAO9iB,KAAKqqB,cAG/CrqB,KAAKgqB,UAAW,I,kCAMhBhqB,KAAKkqB,OAAOI,QACZtqB,KAAKgqB,UAAW,I,kCAKhBhqB,KAAKqB,YAAYW,QAAQC,QAAQC,MAAM,EAAGC,GAAU8P,eAAgB,Q,o4EC5B3D0Y,GAAc,CAEzBC,KAAMtjB,GACNujB,SAAU3e,GACVyO,UAAW5F,GACX+V,SAAU5U,GACV6U,cAAe1U,GACf2U,kBAAmBnU,GACnBoU,kBAAmBjU,GACnBkU,eAAgBzT,GAChB0T,OAAQpT,GACRqT,QAAShR,GACTiR,MAAO5Q,GACP6Q,WAAY7e,GAEZwP,MAAOV,GACPiB,OAAQH,GACRO,QAASH,GACTK,OAAQD,GACRG,MAAOD,GACPa,MAAOF,GACPja,KAAMsa,GACNE,MAAOD,GACPpL,KAAMsL,GACNqN,SAAUC,GAEVC,cAAexL,GACfyL,gBAAiBtK,GACjBuK,YAAaxJ,GACbyJ,oBAAqBzH,GACrB0H,aAActI,GACduI,aAAc1H,GACd2H,oBAAqB/G,GACrBgH,kBAAmBrF,GACnBsF,OAAQhK,GAERiK,eAAgBlF,GAChBmF,UAAWpE,GACXqE,aAAc9C,GACd+C,qBAAsB3C,GACtB4C,kBAAmB3C,GACnB4C,gBAAiB3C,GACjB4C,iB,2ECvFA,qBAAaprB,EAAYlD,EAAMoE,GAAQ,oCAErC,cAAMlB,EAAYlD,EAAMoE,IAGnBiF,YAAc,iBAGnB,EAAKklB,kBAAmB,EAGxB,EAAK3kB,YAAYxF,GAXoB,E,qEAgBP,IAA1BtC,KAAKysB,kBAEPzsB,KAAK2S,cAAc+Z,OAGiB,OAA/B1sB,KAAK2S,cAAcsX,SAAiE,gBAA3CjqB,KAAKiD,KAAK1E,IAAI,0BAE1DyB,KAAKysB,kBAAmB,EAGxBzsB,KAAKgC,QAAQ2G,cAAczG,KAAKlC,KAAMA,KAAK2S,cAAcsX,UAGzD,6DAIF,8D,sCAKK5mB,GAEPrD,KAAK2S,cAAcga,Y,wCAMnB3sB,KAAKkqB,OAASlqB,KAAKoB,WAAW4Z,KAAKhb,KAAKiD,KAAK1E,IAAI,cACjDyB,KAAK2S,cAAgB,IAAIkX,GAAM7pB,KAAKoB,WAAYpB,KAAKkqB,QAGrB,KAA5BlqB,KAAKiD,KAAK2pB,gBACZ5sB,KAAK2S,cAAcsX,QAAUjqB,KAAKgC,QAAQ2G,cAAciO,OAAO5W,KAAKiD,KAAK2pB,gBAE3E5sB,KAAK2S,cAAc+X,sBAA6D,sBAApC1qB,KAAKiD,KAAK4pB,sBAGtD7sB,KAAK2S,cAAcmX,MAAwC,QAA/B9pB,KAAKiD,KAAK1E,IAAI,aAG1CyB,KAAK2S,cAAcoX,YAAgD,QAAjC/pB,KAAKiD,KAAK1E,IAAI,eAGrB,UAAvByB,KAAKiD,KAAK2O,WACZ5R,KAAKiD,KAAK2O,SAAW,SAEvB5R,KAAK2S,cAAcf,SAAW5R,KAAKiD,KAAK2O,SAGxC,4D,gCAMA5R,KAAKmJ,iBACLnJ,KAAKgW,UAGLhW,KAAK2S,cAAc+G,OAGnB1Z,KAAKiW,uB,aAxFgC5T,GD+FvCyqB,Q,8DExFA,iBAAa1rB,EAAYlD,EAAMoE,GAAQ,gCAErC,cAAMlB,EAAYlD,EAAMoE,IAGnBiF,YAAc,2EAGnB,EAAKO,YAAYxF,GARoB,E,gEAcrCtC,KAAKwC,QAAUL,GAAUe,gBAGzB,0D,gCAMA,kDAGAlD,KAAKmK,gB,SAjC4B9H,GFgGnCyH,a,2EGzFA,qBAAa1I,EAAYlD,EAAMoE,GAAQ,oCAErC,cAAMlB,EAAYlD,EAAMoE,IAGnBiF,YAAc,wCAGnB,EAAKO,YAAYxF,GARoB,E,oEAarCtC,KAAKwC,QAAUL,GAAUe,gBAGzB,8D,wCAMA,4D,gCAMA,sDAGA,IAAM6pB,EAAY/sB,KAAKU,OAAOmJ,aAAa7J,KAAKiD,KAAK1E,IAAI,cAErDyB,KAAKwC,UAAYL,GAAUe,mBACqC,IAA9DlD,KAAKoB,WAAWY,QAAQa,iBAAiBqH,MAAM6iB,KACjD/sB,KAAKoB,WAAW6B,KAAK6G,aAAe,GAItC9J,KAAKmK,iB,aA9C8B9H,GHiGvC+T,e,iFI1FA,uBAAahV,EAAYlD,EAAMoE,GAAQ,sCAErC,cAAMlB,EAAYlD,EAAMoE,IAGnBiF,YAAc,4DAGnB,EAAKO,YAAYxF,GARoB,E,sEAcrCtC,KAAKwC,QAAUL,GAAUe,gBAGzB,gE,gCAMA,wDAGIlD,KAAKwC,UAAYL,GAAUe,kBAE7BlD,KAAKoB,WAAWgV,iBAGhBpW,KAAKmK,iB,eAtCgC9H,GJkGzC2qB,e,iFK5FA,uBAAa5rB,EAAYlD,EAAMoE,GAAQ,sCAErC,cAAMlB,EAAYlD,EAAMoE,IAGnBiF,YAAc,2DALkB,E,8DAWrC,0DACAvH,KAAKiD,KAAKiB,IAAI,oBAAqB,MAGnClE,KAAKiD,KAAKgqB,MAAQ,EAClBjtB,KAAKiD,KAAKiqB,MAAQ,I,wCAMlBltB,KAAKoB,WAAW6B,KAAKiR,SAAW,EAGhC,8D,8EAO2BR,GAC3B,+EAAkCA,GAElC1T,KAAKuG,IAAM7E,KAAK6H,OACXvJ,KAAKoB,WAAW6B,KAAKuQ,SAAWxT,KAAKoB,WAAW6B,KAAKiQ,MAAQ,IAC7DlT,KAAKoB,WAAW6B,KAAKiQ,MAAQlT,KAAKiD,KAAKgqB,QAE5CjtB,KAAK2F,IAAMjE,KAAK6H,OACXvJ,KAAKoB,WAAW6B,KAAKwQ,SAAWzT,KAAKoB,WAAW6B,KAAKoQ,OAAS,IAC9DrT,KAAKoB,WAAW6B,KAAKoQ,OAASrT,KAAKiD,KAAKiqB,QAE7CltB,KAAKmtB,KAAOntB,KAAK2F,IAAM3F,KAAKiD,KAAKgqB,MAAQjtB,KAAKuG,IAAM,EACpDvG,KAAKoB,WAAW6B,KAAKI,SAAWrD,KAAKmtB,KACrCntB,KAAK8K,SAAW,CAAC9K,KAAKoB,WAAW6B,KAAK1E,IAAI,iB,eApDHkZ,KLsG9BtV,GAAY,CAEvBirB,aAAc,EACdC,cAAe,EACfC,qBAAsB,EAGtBxc,cAAe,EACf1O,kBAAmB,EACnB8I,kBAAmB,EACnB0E,eAAgB,EAChBoC,eAAgB,EAChBub,sBAAuB,EACvBC,mBAAoB,EAGpB/qB,YAAa,EACbgrB,aAAc,EACd/oB,kBAAmB,EACnBgpB,eAAgB,EAChBxqB,gBAAiB,EAGjBmlB,WAAY,EACZsF,WAAY,EACZpf,WAAY,EACZqf,YAAa,EACbC,aAAc,EACdC,WAAY,EACZxf,YAAa,EACbE,YAAa,EACbwU,WAAY,GMnIO+K,G,WAKnB,kBAAaC,GAAQ,mBAEnBhuB,KAAKgC,QAAUgsB,EAGfhuB,KAAKiuB,SAAU,EACfjuB,KAAKmZ,OAAQ,EACbnZ,KAAKkuB,WAAa,G,qEAMlBluB,KAAKkuB,WAAa,K,6CAMG,IAAjBluB,KAAKiuB,SACPzV,QAAQgP,IAAIxnB,KAAKkuB,YAInBluB,KAAKkuB,WAAa,K,wCAOVC,GAA2B,IAAhBC,EAAgB,uDAAN,KAW7B,GATApuB,KAAKmZ,OAAQ,EAGbnZ,KAAKgC,QAAQC,QAAQ4M,MAAQ1M,GAAUqM,YAGvCgK,QAAQW,MAAM,mDACdX,QAAQW,MAAMgV,GAEVE,KAAcD,KACO,IAAnBA,EAAQE,QAAmBtf,KAAWhP,KAAKgC,QAAQusB,UAAW,CAChE,IAAMC,EAAMJ,EAAQI,KAAO,KAC3BxuB,KAAKgC,QAAQusB,SAASJ,EAAWK,M,4CAS3BC,GAEVzuB,KAAKkuB,WAAWvxB,KAAK8xB,IAEA,IAAjBzuB,KAAKiuB,SACPzV,QAAQgP,IAAIiH,K,8BAQXA,GAEHzuB,KAAK2E,WAAW8pB,O,YC7ECC,I,kEAKnB,mBAAaV,GAAQ,oBAEnBhuB,KAAKF,KAAO,KACZE,KAAKguB,OAASA,EACdhuB,KAAKI,SAAW,KAChBJ,KAAK2uB,aAAe,G,kEAQVhwB,GAEV,OAAKA,EAAMtC,QAAU,GAA8B,MAAvBsC,EAAMgqB,OAAO,EAAG,IAAsD,MAAtChqB,EAAMgqB,OAAOhqB,EAAMtC,OAAS,EAAG,GAClFsC,EAAMgqB,OAAO,EAAGhqB,EAAMtC,OAAS,GAE/BsC,I,0CAQA8E,GAET,IAAIwF,EAAQxF,EAAKmrB,MAAM,iCAGvB,GAAc,OAAV3lB,EAEF,OAAQA,EAAM,IACZ,IAAK,SAEHjJ,KAAKF,KAAOE,KAAKguB,OAAO5jB,WAAWykB,QAAQ5lB,EAAM,GAAIA,EAAM,GAAI,IAC/D,MACF,IAAK,OAKH,IAHA,IAAIsM,EAAUvV,KAAKguB,OAAO5jB,WAAWoL,iBAAiBvM,EAAM,GAAIjJ,KAAKF,KAAM,IAGlE3D,EAAI,EAAGA,EAAI8M,EAAM5M,OAAQF,IAAK,CACrC,IAAI2yB,EAAO7lB,EAAM9M,GAAGoI,MAAM,IAAK,GAC/BgR,EAAQ0F,WAAW6T,EAAK,IAAMA,EAAK,GAIrC9uB,KAAKF,KAAKoV,SAASvY,KAAK4Y,GACxB,MACF,IAAK,MACoB,aAAnBvV,KAAKF,KAAK8E,KAEZ5E,KAAKF,KAAKmJ,MAAMtM,KAAK,CACnB,KAAQsM,EAAM,GACd,KAAQA,EAAM,KAIhBjJ,KAAKF,KAAKmD,KAAKnD,KAAOmJ,EAAM,GAE9B,MACF,IAAK,MAEHjJ,KAAKF,KAAKmD,KAAKgG,EAAM,IAAMjJ,KAAK+uB,WAAW9lB,EAAM,IACjD,MACF,IAAK,WAEH,IAAItK,EAAQqB,KAAK+uB,WAAW9lB,EAAM,IAGjB,MAAbtK,EAAM,GAGM,QADdA,EAAQqB,KAAKguB,OAAOrlB,cAAcC,SAASjK,EAAMiB,MAAM,OAErDjB,EAAQA,EAAMkK,KAAK,IAIrBlK,EAAQ,IAASA,GAAS+J,OAAO/J,GAASA,OAITmK,IAA/B9I,KAAKF,KAAK+F,OAAOoD,EAAM,MACzBjJ,KAAKF,KAAK+F,OAAOoD,EAAM,IAAM,IAE/BjJ,KAAKF,KAAK+F,OAAOoD,EAAM,IAAIA,EAAM,IAAMtK,EACvC,MACF,IAAK,SAEHsK,EAAMnM,QAGNkD,KAAKF,KAAKyoB,SAAS5rB,KAAKsM,GACxB,MACF,QAEOA,EAAM,GAAG5M,OAAS,GAAiC,OAA1B4M,EAAM,GAAG0f,OAAO,EAAG,IAAyC,OAAxB1f,EAAM,GAAG0f,QAAQ,GAEhE,YAAb1f,EAAM,IACRjJ,KAAKF,KAAKmD,KAAKjD,KAAKgvB,cAAgBhvB,KAAKI,SACzCJ,KAAKI,SAAW,OAEhBJ,KAAKgvB,aAAe/lB,EAAM,GAAG0f,OAAO,EAAG1f,EAAM,GAAG5M,OAAS,GACzD2D,KAAKI,SAAW,IAGI,OAAlBJ,KAAKI,UACPJ,KAAKI,SAASzD,KAAK8G,QAKL,OAAlBzD,KAAKI,SACPJ,KAAKI,SAASzD,KAAK,IAGnBqD,KAAKF,KAAOE,KAAKguB,OAAO3sB,c,8CAMjBiB,GAKX,GAHAtC,KAAKF,KAAOE,KAAKguB,OAAO3sB,YAGT,OAAXiB,EAGF,IADA,IAAIgC,EAAQhC,EAAOiC,MAAM,MAChBpI,EAAI,EAAGA,EAAImI,EAAMjI,OAAQF,IAEhC6D,KAAKivB,UAAU3qB,EAAMnI,Q,cC5IR+yB,G,WAEnB,gBAAalB,GAAQ,iBAEnBhuB,KAAKmD,aAAe,KACpBnD,KAAKmvB,cAAgB,KACrBnvB,KAAKovB,gBAAkB,KACvBpvB,KAAKqvB,cAAgBltB,GAAUirB,aAC/BptB,KAAKsvB,cAAgB,KACrBtvB,KAAKmQ,gBAAkB,KACvBnQ,KAAKuvB,kBAAoB,KACzBvvB,KAAK6P,gBAAkB,KACvB7P,KAAKwvB,kBAAoB,KACzBxvB,KAAKyvB,gBAAkBttB,GAAUirB,aACjCptB,KAAK0vB,gBAAkB,KACvB1vB,KAAKgC,QAAUgsB,EACfhuB,KAAK2vB,gBAAiB,EACtB3vB,KAAK4vB,cAAgB,KACrB5vB,KAAK6vB,cAAgB1tB,GAAU2O,cAC/B9Q,KAAK8vB,gBAAiB,EACtB9vB,KAAKyO,OAAStM,GAAUkmB,WACxBroB,KAAK+vB,eAAiB5tB,GAAUkmB,WAChCroB,KAAKgwB,aAAe,KACpBhwB,KAAK2K,UAAY,EACjB3K,KAAKmR,YAAc,EACnBnR,KAAKiwB,gBAAiB,EAGtBjwB,KAAKkwB,WAAa,CAChB,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,OAAQ,GAAI,YAAa,MAAO,GAAI,GAAI,QAAS,QAAS,gBAAiB,GAAI,QAAS,OAAQ,MAAO,QAC/H,OAAQ,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,SAAU,GAAI,GAAI,GAAI,GAAI,QAAS,UAAW,YAAa,MAAO,OAAQ,OAAQ,KAAM,QACxH,OAAQ,SAAU,QAAS,UAAW,eAAgB,SAAU,SAAU,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACrI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC/F,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,YAAa,aAAc,OAAQ,GAAI,GAAI,MAAO,MAAO,MAAO,MACvH,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,cAAe,UAAW,GAAI,WAAY,YAAa,YAAa,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxJ,KAAM,MAAO,MAAO,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACvF,GAAI,GAAI,GAAI,GAAI,UAAW,YAAa,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5F,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAC7F,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACnF,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5E,KAAM,IAAK,IAAM,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACjF,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAI9DlwB,KAAKmwB,gBAAkB,CACrB,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,QAC5E,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5E,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IACtF,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC3F,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACtF,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5E,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5E,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5E,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7E,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAChF,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5E,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC/E,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,I,mEAO9DnwB,KAAKovB,gBAAkBpvB,KAAKowB,SAASlxB,KAAKc,MAC1CA,KAAKsvB,cAAgBtvB,KAAKqwB,OAAOnxB,KAAKc,MACtCN,OAAO4X,iBAAiB,UAAWtX,KAAKovB,iBACxC1vB,OAAO4X,iBAAiB,QAAStX,KAAKsvB,eAGtCtvB,KAAKuvB,kBAAoBvvB,KAAKswB,WAAWpxB,KAAKc,MAC9CA,KAAKwvB,kBAAoBxvB,KAAKuwB,WAAWrxB,KAAKc,MAC9CA,KAAK0vB,gBAAkB1vB,KAAKwwB,SAAStxB,KAAKc,MAC1CA,KAAKywB,mBAAqBzwB,KAAK0wB,YAAYxxB,KAAKc,MAChDA,KAAKgC,QAAQ0J,UAAUC,KAAK2L,iBAAiB,YAAatX,KAAKuvB,mBAC/DvvB,KAAKgC,QAAQ0J,UAAUC,KAAK2L,iBAAiB,YAAatX,KAAKwvB,mBAC/DxvB,KAAKgC,QAAQ0J,UAAUC,KAAK2L,iBAAiB,UAAWtX,KAAK0vB,iBAC7D1vB,KAAKgC,QAAQ0J,UAAUC,KAAK2L,iBAAiB,aAActX,KAAKywB,oBAGhEzwB,KAAKmD,aAAenD,KAAKgC,QAAQX,YACjCrB,KAAKyO,OAAStM,GAAUkmB,WAGxBroB,KAAKgwB,aAAe,IAAIW,IACxB3wB,KAAKgwB,aAAaY,IAAI5wB,KAAK6wB,MAAM3xB,KAAKc,OACtCA,KAAKgwB,aAAa/iB,U,4CAMlBvN,OAAO8X,oBAAoB,UAAWxX,KAAKovB,iBAC3C1vB,OAAO8X,oBAAoB,QAASxX,KAAKsvB,eAGzCtvB,KAAKgC,QAAQ0J,UAAUC,KAAK6L,oBAAoB,YAAaxX,KAAKuvB,mBAClEvvB,KAAKgC,QAAQ0J,UAAUC,KAAK6L,oBAAoB,YAAaxX,KAAKwvB,mBAClExvB,KAAKgC,QAAQ0J,UAAUC,KAAK6L,oBAAoB,UAAWxX,KAAK0vB,iBAChE1vB,KAAKgC,QAAQ0J,UAAUC,KAAK6L,oBAAoB,aAAcxX,KAAKywB,oBAGnEzwB,KAAKgwB,aAAatD,OAClB1sB,KAAKgwB,aAAac,OAAO9wB,KAAK6wB,OAG9B7wB,KAAKmD,aAAe,KACpBnD,KAAKmQ,gBAAkB,KACvBnQ,KAAK6P,gBAAkB,KACvB7P,KAAK4vB,cAAgB,KACrB5vB,KAAKgwB,aAAe,O,sDAQL3kB,GAqBf,OAlBwB,IAAnBA,EAAMC,UAAyC,KAAlBD,EAAM0b,QAEhC/mB,KAAKmwB,gBAAgB9kB,EAAM0b,UACJ,IAAnB1b,EAAMC,UAAyC,KAAlBD,EAAM0b,QAEnB,IAAnB1b,EAAM0lB,SAAkB,SAAW,UACd,IAAlB1lB,EAAME,SAAwC,KAAlBF,EAAM0b,QAElB,IAAnB1b,EAAM0lB,SAAkB,QAAU,SACd,IAAjB1lB,EAAMG,QAAuC,KAAlBH,EAAM0b,QAEjB,IAAnB1b,EAAM0lB,SAAkB,OAAS,OAGlC/wB,KAAKkwB,WAAW7kB,EAAM0b,W,wCAWtB1b,GAQR,GANArL,KAAKmvB,cAAgB,CACnB,MAAS9jB,EACT,OAAUrL,KAAKgC,QAAQX,YAAYqB,MAAMc,QAIpB,KAAlB6H,EAAM0b,SAAoB/mB,KAAKyO,SAAWtM,GAAUyrB,YAEvD5tB,KAAK+vB,eAAiB/vB,KAAKyO,OAC3BzO,KAAKyO,OAAStM,GAAUyrB,YAGxB5tB,KAAKgC,QAAQgvB,QAAQC,wBAChB,GAAKjxB,KAAKyO,SAAWtM,GAAUwrB,aAClC3tB,KAAKqvB,gBAAkBltB,GAAUirB,cAClCptB,KAAKqvB,gBAAkBltB,GAAUmrB,sBAElC,OAAOttB,KAAKqX,sBAAsBhM,EAAO,K,oCAQrCA,GAEN,GAAKrL,KAAKyO,SAAWtM,GAAUwrB,aAAiB3tB,KAAKqvB,gBAAkBltB,GAAUkrB,eAC9ErtB,KAAKqvB,gBAAkBltB,GAAUmrB,sBAElC,OAAOttB,KAAKqX,sBAAsBhM,EAAO,K,kEAStBA,EAAO6lB,GAE5B,IAAMC,EAAmB,CACvB,MAAS9lB,EACT,OAAUrL,KAAKgC,QAAQX,YAAYqB,MAAMc,OACzC,MAAS0tB,EACT,KAAQ/uB,GAAU+I,mBAmBpB,OAfAimB,EAAiBpd,KAAO/T,KAAKoxB,gBAAgB/lB,GAGxCrL,KAAK6vB,gBAAkB1tB,GAAU+I,oBACX,OAAvBlL,KAAK4vB,eACN5vB,KAAK4vB,cAAchH,QAAQuI,EAAiBpd,OAAS,KAE5B,OAAtB/T,KAAKmD,cAEPnD,KAAKmD,aAAawpB,QAAQwE,GAI5BnxB,KAAK2vB,gBAAiB,GAEjBwB,I,kDAIM9lB,GAKb,OAHAA,EAAMgmB,kBAGC,I,4CAIGhmB,GAEVrL,KAAK6P,gBAAkB,CACrB,MAASxE,EACT,OAAUrL,KAAKgC,QAAQX,YAAYqB,MAAMc,U,8CAShC6H,GACXA,EAAMJ,OAAS,EACfI,EAAM0E,QAAU1E,EAAMyM,eAAe,GAAG/H,QACxC1E,EAAM2E,QAAU3E,EAAMyM,eAAe,GAAG9H,QACxChQ,KAAKswB,WAAWjlB,K,4CAONA,GAQV,GANArL,KAAKmQ,gBAAkB,CACrB,MAAS9E,EACT,OAAUrL,KAAKgC,QAAQX,YAAYqB,MAAMc,QAItCxD,KAAKyO,SAAWtM,GAAUwrB,aAAiB3tB,KAAKyvB,kBAAoBttB,GAAUirB,cAAkBptB,KAAKyvB,kBAAoBttB,GAAUmrB,sBAEtI,OAAOttB,KAAK4X,mBAAmBvM,EAAO,K,wCAQhCA,GAEHrL,KAAKyO,SAAWtM,GAAUwrB,YAAiB3tB,KAAKyvB,kBAAoBttB,GAAUkrB,eAAmBrtB,KAAKyvB,kBAAoBttB,GAAUmrB,sBAEvIttB,KAAK4X,mBAAmBvM,EAAO,K,4DASfA,EAAOimB,GAEzB,IAAIC,EAAgB,CAClB,MAASlmB,EACT,OAAUrL,KAAKgC,QAAQX,YAAYqB,MAAMc,OACzC,MAAS8tB,EACT,KAAQnvB,GAAUyN,gBAiBpB,OAbA2hB,EAAcxd,KAAOvC,OAAOnG,EAAMJ,OAAS,GAGtCjL,KAAK6vB,gBAAkB1tB,GAAUyN,iBAA4C,OAAvB5P,KAAK4vB,eAC7D5vB,KAAK4vB,cAAchH,QAAQ2I,EAAcxd,OAAS,KAEzB,OAAtB/T,KAAKmD,cACPnD,KAAKmD,aAAawpB,QAAQ4E,GAI5BvxB,KAAK2vB,gBAAiB,GAEjB4B,I,8CAOInG,GAEc,UAArBA,EAAQxZ,UACV5R,KAAKuX,Y,8CAKIlM,GAGY,UADXrL,KACF4R,WADE5R,KAEJqB,YAAYW,QAAQC,QAAQguB,gBAAiB,K,4CAQ3C5kB,M,kCAOLA,GAEL,OAAQrL,KAAKyO,QACX,KAAKtM,GAAUkmB,WAEb,MACF,KAAKlmB,GAAUwrB,WAEb3tB,KAAKmR,WAAanR,KAAKmD,aAAaT,MAAMc,QAGjB,IAAnBxD,KAAK2K,YAA8C,IAAxB3K,KAAK2vB,iBAAqD,IAAxB3vB,KAAKiwB,iBAC1DjwB,KAAK2K,SAAW,IAAQ3K,KAAK6vB,gBAAkB1tB,GAAU+I,mBAAuBlL,KAAK6vB,gBAAkB1tB,GAAUyN,kBAA6C,IAAxB5P,KAAK2vB,gBAC3I3vB,KAAK2K,SAAW,GAAQ3K,KAAKmR,WAAanR,KAAKmD,aAAa/B,WAAW6B,KAAK1E,IAAI,QAAUyB,KAAKmD,aAAajF,MAAS8B,KAAK2K,SACtI3K,KAAKuX,UAGLvX,KAAKmD,aAAawpB,QAAQ,MAE5B,MACF,KAAKxqB,GAAUyrB,YAGf,KAAKzrB,GAAU0rB,aAEb,MACF,KAAK1rB,GAAUmM,YACf,KAAKnM,GAAUoM,WAEbvO,KAAKyO,OAAStM,GAAUkmB,WAGxBroB,KAAKgC,QAAQwvB,YACb,MACF,KAAKrvB,GAAU6gB,WAEbhjB,KAAKmD,aAAawpB,QAAQ,S,gCAW1BniB,EAASinB,EAAcC,GAE3B1xB,KAAK4vB,cAAgB8B,EACrB1xB,KAAK6vB,cAAgB4B,EACrBzxB,KAAK2K,SAAWH,EAGhBxK,KAAK2vB,gBAAiB,EACtB3vB,KAAK8vB,gBAAiB,EACtB9vB,KAAKyO,OAAStM,GAAUwrB,WACxB3tB,KAAKiwB,gBAAiB,I,wCAKtBjwB,KAAKyO,OAAStM,GAAUkmB,WAGxBroB,KAAKgC,QAAQqK,WAAWlF,MAGxBnH,KAAKmD,aAAagH,gB,UCvZDwnB,G,WAKnB,oBAAa3D,GAAQ,qBAEnBhuB,KAAK4xB,aAAe,EACpB5xB,KAAK6xB,YAAc,GACnB7xB,KAAKgC,QAAUgsB,E,uEAMf,GAA8B,OAA1BhuB,KAAKgC,QAAQ8vB,SAEf9xB,KAAKgC,QAAQX,YAAY0wB,YAAY/xB,KAAKgC,QAAQ8vB,UAGlD9xB,KAAKgC,QAAQgvB,QAAQgB,wBAChB,CAELhyB,KAAKgC,QAAQgvB,QAAQiB,mBAAmB,gCAaxCjyB,KAAK6xB,YAAYl1B,KAVD,CACdu1B,SAAU,SACV7xB,aAAc,IACdnC,KAAM,aACNi0B,MAAO,0BACPC,OAAQ,kCACRC,eAAe,IAOjBryB,KAAKsyB,wB,8DAOHtyB,KAAK4xB,aAAe5xB,KAAK6xB,YAAYx1B,OAEvC2D,KAAKuyB,kBAAkBvyB,KAAK6xB,YAAY7xB,KAAK4xB,eAG7C5xB,KAAKwyB,wB,sDASQC,EAAW9zB,GAE1B8zB,EAAUpvB,SAAW1E,EAGrBqB,KAAK4xB,eAGL5xB,KAAKsyB,uB,sDAMLtyB,KAAKgC,QAAQ0wB,U,0DAOID,GAEjB,IAAgC,IAA5BA,EAAUJ,cAGZ,GAAI,KAAWryB,KAAKgC,QAAQ2wB,SAC1B3yB,KAAKgC,QAAQ2wB,QAAQF,EAAUN,MAAOM,EAAUL,OAC9CK,EAAUpyB,aAAcoyB,EAAUP,SAClClyB,KAAK4yB,gBAAgB1zB,KAAKc,KAAMyyB,GAAYzyB,KAAK6yB,eAAe3zB,KAAKc,WAClE,CAEL,IAAM9C,EAASwC,OAAO0yB,OAAOK,EAAUL,OAAQK,EAAUpyB,cAE1C,OAAXnD,EACF8C,KAAK6yB,iBAEL7yB,KAAK4yB,gBAAgBH,EAAWv1B,QAKpCu1B,EAAUpvB,SAAWovB,EAAUpyB,aAG/BL,KAAK4xB,eAGL5xB,KAAKsyB,uB,gEAOP,IAAK,IAAIn2B,EAAI,EAAGA,EAAI6D,KAAK6xB,YAAYx1B,OAAQF,IAEV,eAA7B6D,KAAK6xB,YAAY11B,GAAG+B,KACtB8B,KAAKgC,QAAQX,YAAY0wB,YAAY/xB,KAAK6xB,YAAY11B,GAAGkH,UAEzDrD,KAAKgC,QAAQX,YAAY4B,KAAKiB,IAAIlE,KAAK6xB,YAAY11B,GAAG+B,KACpD8B,KAAK6xB,YAAY11B,GAAGkH,UAK1BrD,KAAKgC,QAAQgvB,QAAQgB,wB,cC5HJc,G,WAKnB,gBAAa9E,GAAQ,iBAEnBhuB,KAAKgC,QAAUgsB,EAGfhuB,KAAKgO,SAAU,EACfhO,KAAK+yB,QAAS,EACd/yB,KAAK8e,WAAa,KAClB9e,KAAK0yB,OAAQ,E,qEAIb,MAAO,CACLpW,EAAGtc,KAAKgC,QAAQ0J,UAAUwH,MAAQ,EAClCqJ,EAAGvc,KAAKgC,QAAQ0J,UAAU2H,OAAS,K,wDAKpB,WAEjB,IAAiC,IAA7BrT,KAAKgC,QAAQgxB,YAAsB,CAErC,IAAIzd,EAAUvV,KAAKgC,QAAQ8c,WAGvBvJ,EAAQ0d,mBACVnnB,SAASwL,iBAAiB,oBAAoB,SAACtO,GAC7C,EAAKkqB,mBAAmBlqB,MAE1B8C,SAASwL,iBAAiB,mBAAmB,SAACtO,GAC5C,EAAKmqB,iBAAiBnqB,MAExBuM,EAAQ0d,qBACC1d,EAAQ6d,yBACjBtnB,SAASwL,iBAAiB,0BAA0B,SAACtO,GACnD,EAAKkqB,mBAAmBlqB,MAE1B8C,SAASwL,iBAAiB,yBAAyB,SAACtO,GAClD,EAAKmqB,iBAAiBnqB,MAExBuM,EAAQ6d,2BACC7d,EAAQ8d,sBACjBvnB,SAASwL,iBAAiB,uBAAuB,SAACtO,GAChD,EAAKkqB,mBAAmBlqB,MAE1B8C,SAASwL,iBAAiB,sBAAsB,SAACtO,GAC/C,EAAKmqB,iBAAiBnqB,MAExBuM,EAAQ8d,wBACC9d,EAAQ+d,sBACjBxnB,SAASwL,iBAAiB,sBAAsB,SAACtO,GAC/C,EAAKkqB,mBAAmBlqB,MAE1B8C,SAASwL,iBAAiB,qBAAqB,SAACtO,GAC9C,EAAKmqB,iBAAiBnqB,MAExBuM,EAAQ+d,0B,yDAQqB,IAA7BtzB,KAAKgC,QAAQgxB,cAEfhzB,KAAK0yB,OAAQ,EAGT5mB,SAASynB,eACXznB,SAASynB,iBACAznB,SAAS0nB,qBAClB1nB,SAAS0nB,uBACA1nB,SAAS2nB,oBAClB3nB,SAAS2nB,sBACA3nB,SAAS4nB,kBAClB5nB,SAAS4nB,sB,8DAQb,GAAI5nB,SAAS6nB,mBACX7nB,SAAS8nB,yBACT9nB,SAAS+nB,sBACT/nB,SAASgoB,oBAET,OAAQ9zB,KAAKgC,QAAQ+xB,YACnB,IAAK,UAEH/zB,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM8C,IAAM,MACxCpT,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM6C,OAAS,MAC3CnT,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM2C,KAAO,MACzCjT,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM0C,MAAQ,MAC1ChT,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM0C,MAAQ,MAC1ChT,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM0jB,OAAS,OAC3Ch0B,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM2jB,QAAU,QAC5Cj0B,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM4jB,SAAW,WAC7Cl0B,KAAKgC,QAAQ0J,UAAUoX,OAAO9iB,KAAKgC,QAAQX,YAAY8yB,eAAerV,YACtE,MACF,IAAK,UAUH,GARA9e,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM8C,IAAM,MACxCpT,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM6C,OAAS,MAC3CnT,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM2C,KAAO,MACzCjT,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM0C,MAAQ,MAC1ChT,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM0C,MAAQ,MAC1ChT,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM0jB,OAAS,OAC3Ch0B,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM2jB,QAAU,QAC5Cj0B,KAAKgC,QAAQ0J,UAAUC,KAAK2E,MAAM4jB,SAAW,WACxCl0B,KAAKgC,QAAQ8c,WAAWsV,YAAcp0B,KAAKgC,QAAQX,YAAY4B,KAAKiQ,MACtElT,KAAKgC,QAAQ8c,WAAWuV,aAAer0B,KAAKgC,QAAQX,YAAY4B,KAAKoQ,OAAS,CAC/E,IAAI6Q,EAAMlkB,KAAKgC,QAAQ8c,WAAWuV,aAAer0B,KAAKgC,QAAQX,YAAY4B,KAAKoQ,OAC/ErT,KAAKgC,QAAQ0J,UAAU4oB,OAAO5yB,KAAKC,MAAM3B,KAAKgC,QAAQX,YAAY4B,KAAKiQ,MAAQgR,GAAKlkB,KAAKgC,QAAQ8c,WAAWuV,cAC5Gr0B,KAAKgC,QAAQX,YAAYkzB,SAAW7yB,KAAKC,MAAM3B,KAAKgC,QAAQX,YAAY4B,KAAKiQ,MAAQgR,GAAMlkB,KAAKgC,QAAQX,YAAY4B,KAAKiQ,MACzHlT,KAAKgC,QAAQX,YAAYmzB,SAAYx0B,KAAKgC,QAAQ8c,WAAWuV,aAAer0B,KAAKgC,QAAQX,YAAY4B,KAAKoQ,WACrG,CACL,IAAI6Q,EAAMlkB,KAAKgC,QAAQ8c,WAAWsV,YAAcp0B,KAAKgC,QAAQX,YAAY4B,KAAKiQ,MAC9ElT,KAAKgC,QAAQ0J,UAAU4oB,OAAOt0B,KAAKgC,QAAQ8c,WAAWsV,YAAa1yB,KAAKC,MAAM3B,KAAKgC,QAAQX,YAAY4B,KAAKoQ,OAAS6Q,IACrHlkB,KAAKgC,QAAQX,YAAYkzB,SAAYv0B,KAAKgC,QAAQ8c,WAAWsV,YAAcp0B,KAAKgC,QAAQX,YAAY4B,KAAKiQ,MACzGlT,KAAKgC,QAAQX,YAAYmzB,SAAW9yB,KAAKC,MAAM3B,KAAKgC,QAAQX,YAAY4B,KAAKoQ,OAAS6Q,GAAMlkB,KAAKgC,QAAQX,YAAY4B,KAAKoQ,OAE5HrT,KAAKgC,QAAQX,YAAY8yB,eAAerV,WAAWhM,MAAMwJ,EAAItc,KAAKgC,QAAQX,YAAYkzB,SACtFv0B,KAAKgC,QAAQX,YAAY8yB,eAAerV,WAAWhM,MAAMyJ,EAAIvc,KAAKgC,QAAQX,YAAYmzB,SACtFx0B,KAAKgC,QAAQ0J,UAAUoX,OAAO9iB,KAAKgC,QAAQX,YAAY8yB,eAAerV,YACtE,MACF,IAAK,WAEH9e,KAAKgC,QAAQX,YAAYkzB,SAAYv0B,KAAKgC,QAAQ8c,WAAWsV,YAAcp0B,KAAKgC,QAAQX,YAAY4B,KAAKiQ,MACzGlT,KAAKgC,QAAQX,YAAYmzB,SAAYx0B,KAAKgC,QAAQ8c,WAAWuV,aAAer0B,KAAKgC,QAAQX,YAAY4B,KAAKoQ,OAG1GrT,KAAKgC,QAAQ0J,UAAU4oB,OAAOt0B,KAAKgC,QAAQ8c,WAAWsV,YAAap0B,KAAKgC,QAAQ8c,WAAWuV,cAC3Fr0B,KAAKgC,QAAQX,YAAY8yB,eAAerV,WAAWhM,MAAMwJ,EAAItc,KAAKgC,QAAQX,YAAYkzB,SACtFv0B,KAAKgC,QAAQX,YAAY8yB,eAAerV,WAAWhM,MAAMyJ,EAAIvc,KAAKgC,QAAQX,YAAYmzB,SACtFx0B,KAAKgC,QAAQ0J,UAAUoX,OAAO9iB,KAAKgC,QAAQX,YAAY8yB,eAAerV,iBAKvD,IAAf9e,KAAK0yB,QAEP1yB,KAAKgC,QAAQX,YAAYkzB,SAAW,EACpCv0B,KAAKgC,QAAQX,YAAYmzB,SAAW,EAGpCx0B,KAAKgC,QAAQ0J,UAAU4oB,OAAOt0B,KAAKgC,QAAQX,YAAY4B,KAAKiQ,MAAOlT,KAAKgC,QAAQX,YAAY4B,KAAKoQ,QACjGrT,KAAKgC,QAAQX,YAAY8yB,eAAerV,WAAWhM,MAAMwJ,EAAI,EAC7Dtc,KAAKgC,QAAQX,YAAY8yB,eAAerV,WAAWhM,MAAMyJ,EAAI,EAC7Dvc,KAAKgC,QAAQ0J,UAAUoX,OAAO9iB,KAAKgC,QAAQX,YAAY8yB,eAAerV,YAGlE,KAAW9e,KAAKgC,QAAQyyB,WAC1Bz0B,KAAKgC,QAAQyyB,SAAS,gDACpB,sEACAz0B,KAAK00B,qBAAqBx1B,KAAKc,MAAOA,KAAK20B,oBAAoBz1B,KAAKc,U,0DAS5EA,KAAKgC,QAAQ4yB,SAASxwB,SAAS,2D,kEAM/B,IAAImR,EAAUvV,KAAKgC,QAAQ8c,WAEvBvJ,EAAQ0d,kBACV1d,EAAQ0d,oBACC1d,EAAQ6d,wBACjB7d,EAAQ6d,0BACC7d,EAAQ8d,qBACjB9d,EAAQ8d,uBACC9d,EAAQ+d,qBACjB/d,EAAQ+d,wB,gEAOVtzB,KAAKgC,QAAQwvB,c,4DAMb,IAAqB,IAAjBxxB,KAAKgO,QAAkB,CAEzBhO,KAAK60B,aAAe,IAAI9V,IAExB,IAAMjB,EAAS9d,KAAK80B,eAEdC,EAA+B,oBAAZC,QAA2B,qBAAuBA,QAErEC,EAAYlR,IAAOqG,KAAK2K,GACxBG,EAAa,IAAIvU,IAAK,QAAS,CACnCN,WAAY,QACZC,SAAU,GACVtE,KAAM,YAEFmZ,EAAc,IAAIxU,IAAKyU,GAAgB,CAC3C/U,WAAY,QACZC,SAAU,GACVtE,KAAM,YAGFqZ,EAAgB,IAAI1U,IAAJ,0EAC+C,IAAI9e,MAAQyzB,eAC/E,CACEjV,WAAY,QACZC,SAAU,GACVtE,KAAM,YAIViZ,EAAU/hB,MAAQ+hB,EAAU5hB,OAAS,IAErC4hB,EAAUf,SAAShwB,IAAI4Z,EAAOxB,EAAI2Y,EAAU/hB,MAAQ,EAAG,IACvDgiB,EAAWhB,SAAShwB,IAAI4Z,EAAOxB,EAAI4Y,EAAWhiB,MAAQ,EAAG,KACzDiiB,EAAYjB,SAAShwB,IAAI4Z,EAAOxB,EAAI6Y,EAAYjiB,MAAQ,EAAG,KAC3DmiB,EAAcnB,SAAShwB,IACrB4Z,EAAOxB,EAAI+Y,EAAcniB,MAAQ,EACtB,EAAX4K,EAAOvB,EAA+B,EAAvB8Y,EAAchiB,QAG/BrT,KAAKu1B,YAAc,IAAI5U,IAAK,GAAI,CAC9BN,WAAY,QACZC,SAAU,GACVtE,KAAM,YAERhc,KAAKu1B,YAAYrB,SAAShwB,IACxB4Z,EAAOxB,EAAItc,KAAKu1B,YAAYriB,MAAQ,EACpC4K,EAAOvB,GAETvc,KAAK60B,aAAa7U,SAASiV,EAAWC,EACpCC,EAAaE,EAAer1B,KAAKu1B,aAGnCv1B,KAAKgC,QAAQ0J,UAAUoX,OAAO9iB,KAAK60B,iB,4DAOrC,IAAoB,IAAhB70B,KAAK+yB,OAAiB,CAUxB/yB,KAAKiyB,mBAPQ,wPAUb,IAAIuD,EAAe,SAAUnqB,GAE3BrL,KAAKgC,QAAQ0J,UAAUC,KAAK6L,oBAAoB,QAASge,GACzDx1B,KAAKgC,QAAQ0J,UAAUC,KAAK6L,oBAAoB,aAAcge,GAG9Dx1B,KAAKy1B,oBAGLz1B,KAAKgC,QAAQ0zB,eACbx2B,KAAKc,MAGPA,KAAKgC,QAAQ0J,UAAUC,KAAK2L,iBAAiB,QAASke,GAAc,GACpEx1B,KAAKgC,QAAQ0J,UAAUC,KAAK2L,iBAAiB,aAAcke,GAAc,QAGzEx1B,KAAKy1B,oBAGLz1B,KAAKgC,QAAQ0zB,gB,4DAOf,IAAqB,IAAjB11B,KAAKgO,QAAkB,CAEzB,IAAK,IAAI7R,EAAI6D,KAAK60B,aAAarO,SAASnqB,OAAS,EAAGF,GAAK,EAAGA,IAC1D6D,KAAK60B,aAAa5oB,YAAYjM,KAAK60B,aAAarO,SAASrqB,IAE3D6D,KAAKgC,QAAQ0J,UAAUoX,OAAO9iB,KAAK60B,iB,4DAQnBc,GAClB,IAKMC,EALS51B,KAAK80B,eAKEvY,EAAI,GAE1B,IAAqB,IAAjBvc,KAAKgO,QAEP,OAAQ2nB,GACN,KAAM,EACJ31B,KAAK61B,kBAAoB,IAAI7W,IAC7Bhf,KAAK61B,kBAAkB5W,UAAU,EAAG,SAAU,GAC9Cjf,KAAK61B,kBAAkB/V,SAXd,IAW+B8V,EAV/B,IACA,IAUT51B,KAAK61B,kBAAkBvZ,EAAI,EAC3Btc,KAAK61B,kBAAkBtZ,EAAI,EAC3Bvc,KAAK81B,kBAAoB,IAAI9W,IAC7Bhf,KAAK81B,kBAAkB7W,UAAU,EAAG,SAAU,GAC9Cjf,KAAK81B,kBAAkBhW,SAASiW,IAAYH,EAAS,EAAG,EAAGI,IAC3Dh2B,KAAK81B,kBAAkBxZ,EAAI,EAC3Btc,KAAK81B,kBAAkBvZ,EAAI,EAC3Bvc,KAAK60B,aAAa7U,SAAShgB,KAAK81B,mBAChC91B,KAAK60B,aAAa7U,SAAShgB,KAAK61B,mBAChC71B,KAAKgC,QAAQ0J,UAAUoX,OAAO9iB,KAAK60B,cACnC,MACF,KAAK,IACH70B,KAAK60B,aAAa5oB,YAAYjM,KAAK81B,mBACnC91B,KAAK60B,aAAa5oB,YAAYjM,KAAK61B,mBACnC71B,KAAKgC,QAAQ0J,UAAUoX,OAAO9iB,KAAK60B,cACnC,MACF,QACE70B,KAAK61B,kBAAkBhW,UAAU,UACjC7f,KAAK61B,kBAAkB/V,SAASiW,IAAYH,EAAS,EAAGl0B,KAAKC,MAAmB,IAAbg0B,GAA4BK,IAC/Fh2B,KAAK61B,kBAAkB9V,UACvB/f,KAAKgC,QAAQ0J,UAAUoX,OAAO9iB,KAAK60B,iB,4DASvBpW,GAElB,IAAqB,IAAjBze,KAAKgO,QAAkB,CACzB,IAAM8P,EAAS9d,KAAK80B,eACpB90B,KAAKu1B,YAAY9W,KAAOA,EACxBze,KAAKu1B,YAAYrB,SAAShwB,IACxB4Z,EAAOxB,EAAItc,KAAKu1B,YAAYriB,MAAQ,EACpC4K,EAAOvB,GAETvc,KAAKgC,QAAQ0J,UAAUoX,OAAO9iB,KAAK60B,iB,0DAOjC,KAAW70B,KAAKgC,QAAQyyB,WAC1Bz0B,KAAKgC,QAAQyyB,SAAS,uCACpB,sEACAz0B,KAAKi2B,sBAAsB/2B,KAAKc,MAAOA,KAAKk2B,qBAAqBh3B,KAAKc,S,oEAO1EA,KAAKgC,QAAQC,QAAQwM,OAASzO,KAAKgC,QAAQC,QAAQ8tB,iB,kEAMnD/vB,KAAKgC,QAAQwvB,gB,UCxYI2E,G,WAKnB,iBAAanI,GAAQ,kBAEnBhuB,KAAKo2B,MAAQ,KACbp2B,KAAKgC,QAAUgsB,EACfhuB,KAAKq2B,SAAW,K,oEAMhBr2B,KAAKgC,QAAQgvB,QAAQiB,mBAAmB,mCAGxCjyB,KAAKs2B,2B,sEAMLt2B,KAAKo2B,MAAQ,IAAIv0B,KACjB7B,KAAKq2B,SAAW,CACd,QAAW,CACT,SAAYE,UAAUC,YACtB,KAAQD,UAAUE,QAClB,QAAWF,UAAUG,YAEvB,KAAQ,CACN,WAAc,IAAM12B,KAAKo2B,MAAMO,WAAW/2B,OAAO,GAAK,KAAO,IAAMI,KAAKo2B,MAAMQ,YAAYh3B,OAAO,GAAK,KAAO,IAAMI,KAAKo2B,MAAMd,eAAe11B,OAAO,GACpJ,WAAc,IAAMI,KAAKo2B,MAAMS,YAAYj3B,OAAO,GAAK,KAAO,IAAMI,KAAKo2B,MAAMU,cAAcl3B,OAAO,GAAK,KAAO,IAAMI,KAAKo2B,MAAMW,cAAcn3B,OAAO,GACtJ,cAAiB,IAAMI,KAAKo2B,MAAMY,cAAcp3B,OAAO,GAAK,KAAO,IAAMI,KAAKo2B,MAAMa,eAAer3B,OAAO,GAAK,KAAO,IAAMI,KAAKo2B,MAAMc,kBAAkBt3B,OAAO,IAElK,WAAc,CACZ,MAAS,EACT,WAAc,EACd,MAAS,EACT,SAAY,EACZ,YAAe,GAEjB,OAAU,CACR,gBAAmBu3B,OAAOC,YAC1B,eAAkBD,OAAOE,WACzB,WAAcF,OAAOG,WACrB,OAAUH,OAAO9jB,OACjB,YAAe3T,OAAO63B,YACtB,WAAc73B,OAAO83B,WACrB,WAAcL,OAAOM,WACrB,QAAW/3B,OAAOg4B,QAClB,QAAWh4B,OAAOi4B,QAClB,MAASR,OAAOjkB,OAElB,OAAU,CACR,GAAMqjB,UAAUqB,e,miBChDlBC,G,WACJ,sBAAaha,GAA6B,IAAvBia,EAAuB,uDAAX,MAAW,uBACxC93B,KAAK6d,KAAOA,EACZ7d,KAAKoI,OAAS,EACdpI,KAAK83B,UAAYA,EACjB93B,KAAK+3B,S,+DAGL/3B,KAAKoI,OAAS,I,gDAGd,OAAOpI,KAAKoI,QAAUpI,KAAKg4B,gB,4CAEhB,WACLC,EAAa,IAAIC,WACjBC,EAAOn4B,KAAK6d,KAAKje,MAAMI,KAAKoI,OAAQpI,KAAKoI,OAASpI,KAAK83B,WAE7D,OAAO,IAAIM,SAAQ,SAACC,EAASC,GAC3BL,EAAWM,UAAY,SAACltB,GACtB,IAAMmtB,EAAUntB,EAAMmtB,OACtB,GAAIA,EAAOrf,MACT,OAAOmf,EAAOE,EAAOrf,OAGvB,EAAK/Q,QAAUowB,EAAOt7B,OAAOu7B,WAE7BJ,EAAQ,CACNx8B,KAAM28B,EAAOt7B,OACbw7B,SAAUh3B,KAAKqR,IAAI,EAAK3K,OAAS,EAAKyV,KAAKT,KAAM,MAIrD6a,EAAWU,kBAAkBR,Q,gDAI/B,OAAOn4B,KAAK6d,KAAKT,S,gBAYd,SAAewb,WAAtB,8C,wDAAO,iBAA2BC,EAASC,GAApC,mBAAA3jB,EAAA,+DACC4jB,EAAK,IAAIlB,GAAagB,GACtBG,EAAW,IAAIC,KAAKC,QAFrB,UAKGH,EAAGI,cALN,iCAMWJ,EAAGK,YANd,UAMHpgB,EANG,OAOHggB,EAASr8B,KAAKqc,EAAMnd,KAAMk9B,EAAGI,gBACzBH,EAASK,IARV,sBASKL,EAASjvB,IATd,OAWCiF,KAAW8pB,IAAaA,EAAW9f,EAAM0f,UAX1C,gDAaEY,KAAMN,EAAS97B,OAAOq8B,SAbxB,mD,sBAuBA,SAASC,eAAgBC,GAC9B,IAAMC,EAAsB,IAAIxB,WAEhC,OAAO,IAAIE,SAAQ,SAACC,EAASC,GAC3BoB,EAAoBC,QAAU,WAC5BD,EAAoBE,QACpBtB,EAAO,IAAIuB,aAAa,iCAG1BH,EAAoBI,OAAS,WAC3BzB,EAAQqB,EAAoBx8B,SAE9Bw8B,EAAoBK,WAAWN,MAoB5B,SAASO,SAAUC,GACxB,IACE,IAAMC,EAbV,SAASC,UACP,MAAkC,SAA3Bz6B,OAAOqxB,SAASqJ,OAAoB16B,OAAOqxB,SAASqJ,OAAS,qBAYrDD,GACb,OAAO,IAAIE,IAAIJ,EAAKC,GACpB,MAAOlxB,GACP,OAAO,G,0GC1GUsxB,G,WAKnB,kBAAatM,GAAQ,mBAEnBhuB,KAAKgC,QAAUgsB,E,gGAOErV,G,uFAEZ4hB,KAAS5hB,IAAa6hB,KAAS7hB,IAAWA,EAAOpW,cAAgBk4B,K,sBAC9D,IAAIj0B,MAAM,iC,UAMdmS,EAAOpW,cAAgBk4B,K,0CAGNz6B,KAAK06B,mBAAmB/hB,G,OAAzCgiB,E,6DAEM,IAAIn0B,MAAJ,6C,oCAEC+zB,KAAS5hB,G,qBAIN,KAFNiiB,EAAMZ,SAASrhB,I,4CAKQ3Y,KAAK66B,MAAMD,EAAIE,M,eAAlCC,E,iBACW/6B,KAAK06B,mBAAmBK,G,QAAzCJ,E,gEAEM,IAAIn0B,MAAJ,8C,0CAINm0B,EAAW36B,KAAKg7B,eAAeriB,G,yDAEzB,IAAInS,MAAJ,4DAAmDmS,I,yBAKzD3Y,KAAKi7B,gB,iCAEJN,G,sMAUWO,G,+EACd,CAACT,KAAMU,MAAMt6B,SAASq6B,EAAM34B,a,gCAChBi3B,eAAe0B,G,OAA7BA,E,uCAEKl7B,KAAKg7B,eAAeE,I,qLAOHE,G,yHAETp7B,KAAKq7B,aAAaD,G,wEAE/Bp7B,KAAKgC,QAAQmC,UAAUQ,WAAvB,mDAA8E,KAAE22B,QAAhF,+B,wBAGkB1C,WAClBwC,GACA,SAAC1C,GAAD,OAAc,EAAK12B,QAAQgvB,QAAQuK,mBAAmB7C,M,WAFlD8C,E,QAOgB,KADhBC,EAAeD,EAAME,WAAU,SAAC57B,GAAD,MAAwB,sBAAdA,EAAK5B,S,uBACrB,IAAIsI,MAAM,sC,eAEnCm1B,EAAUH,EAAMj+B,OAAOk+B,EAAc,GAAG,G,UACzBz7B,KAAKq7B,aAAaM,EAAQxD,M,eAAzC71B,E,OAIAs5B,EAAYJ,EAAM9pB,QACtB,SAAC5R,GAAD,MAAwB,MAAdA,EAAK8E,Q,UAGX5E,KAAK67B,uBAAuBD,G,iCAC3Bt5B,G,uLASIksB,G,0GACYsN,KAAMv9B,IAAIiwB,EAAK,CACpCiD,aAAc,OACdsK,mBAAoB,4BAAC1wB,GACfA,EAAM2wB,kBACR,EAAKh6B,QAAQgvB,QAAQuK,mBAAmBlwB,EAAM4wB,OAAS5wB,EAAM6wB,U,cAJ7D74B,E,OASF,OAAO84B,KAAK5F,UAAU6F,YACxB/1B,EAAM,IAAI80B,KAAK,CAAC93B,EAASxH,QACrBqC,KAAO,mBAEXmI,EAAM,IAAIo0B,KAAK,CAACp3B,EAASxH,MAAO,oB,kBAE3BwK,G,0JAQOg2B,GACd,GAA8B,QAA1BA,EAAS1T,OAAO,EAAG,GACrB,MAAM,IAAIniB,MAAM,wDAOlB,OAHAxG,KAAKgC,QAAQgvB,QAAQuK,mBAAmB,KAGjCc,I,uEAUqBT,G,+FAEtBU,E,KACJC,aAAc,EACdrtB,K,gBACE,IAAMstB,EAAcZ,EAAU57B,KAAKu8B,cAInC,IAAKC,EACH,MAAO,CACL79B,WAAOmK,EACPsG,MAAM,GAKV,IAAMtP,EAAO,CACXjE,KAAM,KACN4gC,OAAQD,EAAYt+B,KAAK0wB,MAAM,aAAa,IAAM,GAClD1wB,KAAMs+B,EAAYt+B,KAAKuT,QAAQ,WAAY,IAAIA,QAC7C,qBAAqB,SAACirB,EAAOC,GAE3B,OAAOnrB,OAAOorB,aAAa71B,SAAS41B,EAAQ,QAGhDvf,KAAMof,EAAYpf,KAClBxY,KAAM,aAIFi4B,EAAML,EAAYt+B,KAAKyqB,OAAO6T,EAAYt+B,KAAK4+B,YAAY,KAAO,GACxE,GAAI,CAAC,MAAO,OAAQ,MAAO,OAAOj8B,SAASg8B,EAAIE,eAAgB,CAE7D,IAAMrZ,EAAM,IAAIsZ,MAChBtZ,EAAIuZ,IAAMT,EAAYU,aACtBp9B,EAAKjE,KAAO6nB,EACZ5jB,EAAK8E,KAAO,aACP,GAAI,CAAC,MAAO,OAAO/D,SAASg8B,EAAIE,eAAgB,CACrD,IAAMI,EAAM,IAAIC,MAChBD,EAAIF,IAAMT,EAAYU,aACtBp9B,EAAKjE,KAAOshC,EACZr9B,EAAK8E,KAAO,aACP,GAAI,CAAC,MAAO,MAAO,OAAO/D,SAASg8B,EAAIE,eAAgB,CAC5D,IAAMI,EAAMrxB,SAASC,cAAc,SACnCoxB,EAAIF,IAAMT,EAAYU,aACtBp9B,EAAKjE,KAAOshC,EACZr9B,EAAK8E,KAAO,QAKd,OAFA5E,KAAKu8B,eAEE,CACL59B,MAAOmB,EACPsP,MAAM,KAKT3Q,OAAO69B,e,WACN,OAAOt8B,Q,0BAKcs8B,G,yHAARx8B,E,EAEfE,KAAKgC,QAAQwY,MAAMoW,IAAI9wB,GAGvBE,KAAKgC,QAAQgvB,QAAQuK,mBAAmBe,EAAcC,aAAeX,EAAUv/B,Q,2UAE1E,G,0SAWP2D,KAAKgC,QAAQgvB,QAAQuK,mBAAmB,KACxCv7B,KAAKgC,QAAQgvB,QAAQiB,mBAAmB,iC,kBAEjC,IAAImG,SAAQ,SAACC,EAASC,GAE3B+E,KAAQC,KAAK,CACXC,OAAQ,CACNC,SAAU,CAAC,aAAc,cAAe,mBACxCC,KAAM,CAAC,+CACL,gDACA,sDAGJ/vB,OAAQ,yBAAM2qB,KACdqF,SAAU,2BAAMpF,EAAO,IAAI9xB,MAAM,mC,sKAUvBgyB,EAAQmF,GAEtB,GAAgB,OAAXnF,GAAoC,OAAfmF,EAAsB,CAE9C,IAAI9hC,EAAO,IAAI+hC,SACf/hC,EAAKgiC,OAAO,OAAQF,EAAWxpB,YAG/B,IAAI2pB,EAAM,IAAIC,eAId,OAHAD,EAAIE,KAAK,OAAQxF,EAAS,iBAAmBx4B,KAAKgC,QAAQX,YAAY4B,KAAzB,YAA6C,GAGnF66B,EAAIG,KAAKpiC,Q,YCzRDqiC,G,WAKnB,mBAAalQ,GAAQ,oBAEnBhuB,KAAKkJ,OAAS,GACdlJ,KAAKgC,QAAUgsB,E,0DAMfhuB,KAAKkJ,OAAS,K,gCAQVpJ,EAAMwd,GAEV,IAAM6gB,EAAY,CAChB,KAAQr+B,EACR,MAASwd,GAIXtd,KAAKkJ,OAAOvM,KAAKwhC,K,gCASjB,OAAOn+B,KAAKkJ,OAAO/B,U,aChCFi3B,G,WAKnB,mBAAapQ,GAAQ,oBAEnBhuB,KAAKkJ,OAAS,GACdlJ,KAAKgC,QAAUgsB,E,kEAMfhuB,KAAKkJ,OAAS,K,wCAQNm1B,GAER,OAAQA,KAAa1T,K,wDAUL/lB,EAAM+V,EAAW2jB,GAKjC,OAHc,IAAI3T,GAAY/lB,GAAM+V,EAAW2jB,K,kDAclC15B,EAAMxD,EAAYlD,EAAMoE,GAErC,IAAIiT,EAAU,IAAIoV,GAAY/lB,GAAMxD,EAAYlD,EAAMoE,GAMtD,OAHAiT,EAAQ3Q,KAAOA,EAGR2Q,I,sDAUQ3Q,EAAMga,EAAM9d,GAK3B,OAHa,IAAI6pB,GAAY/lB,EAAO,WAAWga,EAAM9d,K,sCAW9C5C,EAAM6B,GAEbC,KAAKqK,QAAQnM,EAAM6B,GAEnBC,KAAKgC,QAAQqK,WAAWlF,MAExBnH,KAAKoD,IAAIlF,EAAM6B,K,oCASf,IAAIkJ,MAAQ,GACZ,IAAK,IAAIhK,KAAOe,KAAKkJ,OACnBD,MAAMtM,KAAK,CAACsC,EAAKe,KAAKkJ,OAAOjK,KAI/B,OAAOgK,Q,kCASP,IAAIxD,KAAO,GACX,IAAK,IAAIxG,KAAOe,KAAKkJ,OACnBzD,KAAK9I,KAAKsC,GAIZ,OAAOwG,O,sCASAb,EAAM1G,EAAMoE,GAEnB,IAA4B,IAAxBtC,KAAKsV,SAAS1Q,GAIhB,OAFA5E,KAAKkJ,OAAOhL,GAAQ8B,KAAKu+B,cAAc35B,EAAM5E,KAAKgC,QAAQX,YAAanD,EAAMoE,GAEtEtC,KAAKkJ,OAAOhL,GAGnB8B,KAAKgC,QAAQmC,UAAUC,SAAS,aAAeQ,EAAO,kCAAmC,CACvF0pB,QAAQ,EACRE,IAAK,kEAEPxuB,KAAKgC,QAAQynB,S,sCASRvrB,EAAM6B,GAEbC,KAAKgC,QAAQqK,WAAW1P,KAAKuB,EAAM,WAGnC8B,KAAKkJ,OAAOhL,GAAMgC,QAAUH,EAC5BC,KAAKkJ,OAAOhL,GAAMmM,Y,8BAQfnM,EAAM6B,GAETC,KAAKgC,QAAQC,QAAQkB,aAAenD,KAAKkJ,OAAOhL,GAChD8B,KAAKgC,QAAQC,QAAQkB,aAAajD,QAAUH,EAG5CC,KAAKgC,QAAQqK,WAAW1P,KAAKuB,EAAM,OACnC8B,KAAKkJ,OAAOhL,GAAMkF,Q,4CASR4kB,EAAUwW,GAcpB,IAVA,IAAItgC,EAQA/B,EAAI,EACJsiC,EAPFvgC,EADiB,QAHnBsgC,OAAoC,IAAfA,EAA8B,KAAOA,GAIjD,OAASxW,EAEThoB,KAAKgC,QAAQX,YAAYX,OAAOoT,SAAS0qB,GAAY,GAAM,IAMlB,IAA3Cx+B,KAAKkJ,OAAO1M,eAAeiiC,IAChCA,EAAavgC,EAAO,IAAMsT,OAAOrV,GACjCA,IAIF,OAAOsiC,I,sCASP,IAAIx5B,OAAS,GACb,IAAK,IAAIhG,KAAOe,KAAKkJ,OACnBjE,OAAOtI,KAAKqD,KAAKkJ,OAAOjK,IAI1B,OAAOgG,W,gEC5NUy5B,G,WAKnB,uBAAa1Q,GAAQ,wBAEnBhuB,KAAKkJ,OAAS,GACdlJ,KAAKgC,QAAUgsB,E,sEAMfhuB,KAAKkJ,OAAS,K,8BAOXpJ,EAAM6+B,GAKQ,QAHjBA,OAAgC,IAAbA,EAA4B,KAAOA,KAIpD7+B,EAAK5B,KAAOygC,GAId3+B,KAAKkJ,OAAOvM,KAAKmD,GAGjBE,KAAKF,EAAK5B,MAAQ4B,I,wDASlB,OAAO,O,oCAUP,IADA,IAAI07B,MAAQ,GACHr/B,EAAI,EAAGA,EAAI6D,KAAKkJ,OAAO7M,OAAQF,IACtCq/B,MAAM7+B,KAAKqD,KAAKkJ,OAAO/M,IAIzB,OAAOq/B,Q,oCAQDoD,EAAUC,GAChB,IAAK,IAAI1iC,EAAI,EAAGA,EAAI6D,KAAKkJ,OAAO7M,OAAQF,IAElC6D,KAAKkJ,OAAO/M,GAAG+B,OAAS0gC,IAE1B5+B,KAAK6+B,GAAY7+B,KAAKkJ,OAAO/M,UAGtB6D,KAAK4+B,GAGZ5+B,KAAKkJ,OAAO/M,GAAG+B,KAAO2gC,K,kCAY1B,IADA,IAAIzhB,KAAO,EACFjhB,EAAI,EAAGA,EAAI6D,KAAKkJ,OAAO7M,OAAQF,IACtCihB,MAAcpd,KAAKkJ,OAAO/M,GAAGihB,KAI/B,OAAOA,S,gICvFU0hB,G,WAKnB,gBAAa9Q,GAAQ,iBAEnBhuB,KAAKgC,QAAUgsB,EACfhuB,KAAK++B,SAAL,I,mEASYC,EAAKC,GAAU,WAI3B,OAFAA,OAAgC,IAAbA,GAAmCA,EAE5B,WAAtBD,EAAIjC,eAEyB,UAAtBiC,EAAIjC,gBAIXiC,EADa,MAAXA,EAAI,GACAA,EAAIrW,OAAO,IAIjBqW,GAFAA,EAAMh/B,KAAKyI,cAAcu2B,IAEfvtB,QAAQ,iEAAiE,SAACmd,EAAOxmB,EAAQk2B,GACjG,GAAuB,MAAnBA,EAAOl2B,IAAyD,MAAtCk2B,EAAOl2B,EAASwmB,EAAMvyB,OAAS,GAAY,CAEvE,GAA2B,OAAvBiiC,EAAOl2B,EAAS,IAAsC,OAAvBk2B,EAAOl2B,EAAS,GAEjD,iBAAWwmB,EAAX,KAGF,GAAiB,MAAbA,EAAM,GAAY,CACpB,IAAMsQ,EAAatQ,EAAM9F,UAAU,EAAG8F,EAAMvyB,OAAS,GAC/C8iC,EAAM,EAAKn9B,QAAQ2G,cAAciO,OAAOsoB,GAC9C,OAAO,EAAKl9B,QAAQ2G,cAAcy2B,eAAeD,GAInD,IAAME,EAAUzQ,EAAM9F,UAAU,EAAG8F,EAAMvyB,OAAS,GAClD,oBAAcgjC,GACT,MAAI,CAAC,IAAD,KAAWx+B,SAASy9B,EAAOl2B,KACpCk2B,EAAOl2B,KAAYk2B,EAAOl2B,EAASwmB,EAAMvyB,OAAS,GAE3CuyB,EACGlmB,OAAO6c,MAAM7c,OAAOkmB,IAG9B,WAAWA,EAAX,KAFOlmB,OAAOkmB,OAORnd,QAAQ,0BAA2B,WAGhC,IAAbwtB,EACKj/B,KAAKgC,QAAQ2G,cAAciO,OAAOooB,GAElCA,K,4DASSrgC,GAClB,IAAIzB,EAASwL,OAAO/J,GACpB,OAAO+J,OAAO6c,MAAMroB,GAAUyB,EAAQzB,I,gDAQ1BuG,GAGZ,IAFA,IAAI4C,EAAM,EACNi5B,GAAY,EACPnjC,EAAI,EAAGA,EAAIsH,EAAKpH,OAAQF,IACd,OAAZsH,EAAKtH,KAAgBmjC,GAAcA,EACtCA,GAAaA,EACQ,MAAZ77B,EAAKtH,IAAemjC,IAC7Bj5B,GAAO,GAGX,OAAOA,I,0CAUEoY,EAAMxb,GAAyB,WAAnBzC,EAAmB,wDAExC,GAAI,KAASie,GAAO,OAAOze,KAAKgC,QAAQ2G,cAAcy2B,eAAe3gB,GAErE,GAAI,IAASA,GAAO,OAAOA,EAE3B,GAAc,KAATA,IAAiB8G,MAAM,KAAS9G,IAAQ,OAAO,KAASA,GAI7D,IAAIvhB,GAHJuhB,EAAOze,KAAKu/B,eAAe9gB,IAGThN,QAAQ,mBAAmB,SAACmd,EAAOyQ,EAASj3B,EAAQk2B,GAIpE,GAAmB,OADnBe,EAAU,EAAKG,iBAAiBH,IACpB,GAAY,CAEtB,IAAMF,EAAM,EAAKn9B,QAAQ2G,cAAciO,OAAOyoB,EAAQvW,UAAU,EAAGuW,EAAQhjC,SAC3E,OAAO,EAAK2F,QAAQ2G,cAAcy2B,eAAeD,GAEjD,IAAIxgC,EACJ,IAOE,QAAqB,KALnBA,EADG,MAAOsE,QAAsE,IAAlBA,EAAKo8B,GAC3D,EAAKr9B,QAAQX,YAAY4B,KAAKo8B,GAE9Bp8B,EAAKo8B,IAIb,MAAM,IAAI14B,eAAJ,oBAAgC04B,EAAhC,+BAEJ,KAAS1gC,IACG,KAAVA,IACFA,EAAQ,EAAKgC,UAAUhC,EAAOsE,EAAMzC,IAGxC,MAAO64B,GAEP,MADA,EAAKr3B,QAAQmC,UAAUC,SAAvB,sCAA+Di7B,EAA/D,cAA4EhG,EAAIiC,UAC1EjC,EAER,OAAkB,IAAd74B,GAEK,KAAS7B,GAAT,WAAsBA,EAAtB,KAEAA,KAKb,GAAe,KAAXzB,EAAe,CACjB,IAAIuiC,EAAK,KAASviC,GAClB,IAAKqoB,MAAMka,GAAK,OAAOA,EAGzB,OAAOz/B,KAAK0/B,cAAc1/B,KAAKw/B,iBAAiBtiC,M,0CAYvCO,GAWT,OATK,IAASA,GAOZA,EAAIiL,OAAOjL,GAJP,cAAc0+B,KAAK1+B,KACrBA,EAAI,IAAMuC,KAAK2/B,YAAYliC,GAAK,KAK7BA,I,8CAQIw8B,GACX,OAAOA,EAAIxoB,QAAQ,MAAO,QACvBA,QAAQ,UAAW,OACnBA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,KAAM,OACdA,QAAQ,KAAM,S,kDAQJhO,GAIb,OAAOA,EAAKgO,QAAQ,eAAgB,IAAIA,QAAQ,SAAU,Q,0CAQjDhO,GAELzD,KAAK4/B,aAAan8B,GAAQ,GAAM,GAElCzD,KAAKgC,QAAQmC,UAAUC,SAAS,+CAAsDX,EAAO,KAS/F,IALA,IAAI6I,EAAStM,KAAKuE,MAAMd,GACpBO,EAAMsI,EAAOxP,QACbmH,EAAO,GACP47B,EAAS,GAEJ1jC,EAAI,EAAGA,EAAImQ,EAAOjQ,OAAQF,IAAK,CACtC,IAEI2jC,EAFQxzB,EAAOnQ,GAEAoI,MAAM,2HAA2HmN,OAAOC,SAGvJmuB,EAAOzjC,OAAS,EAClB4H,EAAKtH,KAAKqD,KAAK+/B,mBAAmB//B,KAAK8T,SAASgsB,EAAO,MAEvDD,EAAOC,EAAO,IAAM9/B,KAAK+/B,mBAAmB//B,KAAK8T,SAASgsB,EAAO,KAGrE,MAAO,CAAC97B,EAAKC,EAAM47B,K,4CAGT77B,EAAKC,EAAM47B,GACrB,IAAI3iC,EAAS8G,EACb,QAAsB,IAAVC,GAAyBA,aAAgByF,OAASzF,EAAK5H,OAAS,EAC1E,IAAK,IAAIF,EAAI,EAAGA,EAAI8H,EAAK5H,OAAQF,IAC/Be,GAAU,IAAM8C,KAAKggC,UAAU/7B,EAAK9H,IAGxC,QAAwB,IAAZ0jC,GAA2B57B,aAAgB3H,OACrD,IAAK,IAAI2C,KAAO4gC,EACd3iC,GAAU,IAAM+B,EAAM,IAAMe,KAAKggC,UAAUH,EAAO5gC,IAGtD,OAAO/B,I,kDAQMuG,GACb,MAAa,OAATA,EACK,GACe,MAAZA,EAAK,IAA0C,MAA1BA,EAAKA,EAAKpH,OAAS,IAE5B,MAAZoH,EAAK,IAA0C,MAA1BA,EAAKA,EAAKpH,OAAS,GAD3CoH,EAAK7D,MAAM,EAAG6D,EAAKpH,OAAS,GAI5BoH,I,wCAWDA,EAAMw8B,EAAQC,GAKtB,OAHAz8B,EAAOA,EAAKgO,QAAQ,iBAAkB,MAG/BzR,KAAK0/B,cAAcj8B,K,kCAQrBA,GACL,IAAIvG,EAASuG,EAAKmrB,MAAM,yBACxB,OAAmB,OAAX1xB,EAAmBA,EAAS,K,oDAStBuhB,GASd,OARaA,EAAKhN,QAAQ,aAAa,SAACmd,EAAOyQ,EAASj3B,EAAQ6xB,GAC9D,IAAIkG,EAAYvR,EAAMvyB,OAAS,EAC/B,GAAI8jC,EAAY,GAAM,EAAG,CACvB,IAAIC,EAAuC,MAA5BxR,EAAMA,EAAMvyB,OAAS,GAAa,OAAS,QAC1D,kBAAY+jC,EAAZ,YAAwBD,EAAxB,OAEF,OAAOvR,O,wDAWOnQ,GAQhB,OAPaA,EAAKhN,QAAQ,0BAA0B,SAACmd,EAAOyQ,EAASj3B,EAAQ6xB,GAC3E,IAAImG,EAAkC,SAAvBxR,EAAMjG,OAAO,EAAG,GAAgB,IAAM,IACjD0X,EAAKzR,EAAMhG,QAAQ,KAAO,EAC1B0X,EAAK1R,EAAMkO,YAAY,KACvByD,EAAYx5B,SAAS6nB,EAAMjG,OAAO0X,EAAIC,EAAKD,IAC/C,OAAO32B,MAAM62B,GAAWve,KAAK,MAAQoe,S,+DCjVtBI,G,WAKnB,oBAAaxS,GAAQ,qBAEnBhuB,KAAKgC,QAAUgsB,EAGfhuB,KAAKgJ,EAAItH,KAAK++B,EACdzgC,KAAK0gC,GAAKh/B,KAAKgmB,G,uEAMfiZ,KAAQC,cAAcC,QAAtB,KAAwC,GACxCF,KAAQC,cAAcC,QAAtB,UAAgD7gC,KAAK8gC,KACrDH,KAAQC,cAAcC,QAAtB,cAAoD7gC,KAAK+gC,SACzDJ,KAAQC,cAAcC,QAAtB,UAAgD7gC,KAAKghC,KACrDL,KAAQC,cAAcC,QAAtB,eAAqD7gC,KAAKihC,UAC1DN,KAAQC,cAAcC,QAAtB,WAAiD7gC,KAAKuJ,MACtDo3B,KAAQC,cAAcC,QAAtB,UAAgD7gC,KAAKkhC,KACrDP,KAAQC,cAAcC,QAAtB,WAAiD7gC,KAAKmhC,MACtDR,KAAQC,cAAcC,QAAtB,UAAgD7gC,KAAKohC,KACrDT,KAAQC,cAAcC,QAAtB,UAAgD7gC,KAAKqhC,KACrDV,KAAQC,cAAcC,QAAtB,UAAgD7gC,KAAKshC,KACrDX,KAAQC,cAAcC,QAAtB,UAAgD7gC,KAAKuhC,KACrDZ,KAAQC,cAAcC,QAAtB,WAAiD7gC,KAAKwhC,MACtDb,KAAQC,cAAcC,QAAtB,SAA+C7gC,KAAKynB,IACpDkZ,KAAQC,cAAcC,QAAtB,WAAiD7gC,KAAKyhC,MACtDd,KAAQC,cAAcC,QAAtB,SAA+C7gC,KAAK0hC,IACpDf,KAAQC,cAAcC,QAAtB,SAA+C7gC,KAAK2hC,IACpDhB,KAAQC,cAAcC,QAAtB,OAA6C7gC,KAAKgJ,EAClD23B,KAAQC,cAAcC,QAAtB,QAA8C7gC,KAAK0gC,K,gCAI/CpkB,M,wCAIIA,EAAGC,M,gCAIPD,M,0CAIKA,M,kCAIJA,GACL,OAAO5a,KAAK6H,MAAM+S,K,gCAIdA,EAAGC,M,kCAIFD,M,gCAIDslB,M,gCAIAtlB,GACJ,OAAO5a,KAAK2/B,KAAK/kB,K,gCAIbA,GACJ,OAAO5a,KAAK4/B,KAAKhlB,K,gCAIbA,GACJ,OAAO5a,KAAK6/B,KAAKjlB,K,kCAIZC,EAAGD,GACR,OAAO5a,KAAK8/B,MAAMjlB,EAAGD,K,8BAIlBA,GACH,OAAO5a,KAAK+lB,IAAInL,K,kCAIXA,EAAGC,M,8BAILD,GACH,OAAO5a,KAAKggC,IAAIplB,K,8BAIbA,GACH,OAAO5a,KAAKigC,IAAIrlB,O,cC1GCulB,G,WAKnB,0BAAa7T,GAAQ,2BAEnBhuB,KAAKgC,QAAUgsB,E,6EAKfhuB,KAAK8hC,SAAW,GAGhBnB,KAAQC,cAAcC,QAAtB,MAAyC,GACzCF,KAAQC,cAAcC,QAAtB,YAAkD7gC,KAAKgC,QAAQX,YAAYqB,MAAMa,MACjFo9B,KAAQC,cAAcC,QAAtB,WAAiD7gC,KAAKgC,QAAQX,YAAYqB,MAAMc,KAGhFm9B,KAAQC,cAAcC,QAAtB,IAAuC,GACvCF,KAAQC,cAAcC,QAAtB,UAAgD7gC,KAAKgC,QAAQX,YAAY6W,KAAK6pB,MAC9EpB,KAAQC,cAAcC,QAAtB,SAA+C7gC,KAAKgC,QAAQX,YAAY6W,KAAK8lB,KAC7E2C,KAAQC,cAAcC,QAAtB,UAAgD7gC,KAAKgC,QAAQX,YAAY6W,KAAK8pB,MAC9ErB,KAAQC,cAAcC,QAAtB,eAAqD7gC,KAAKgC,QAAQX,YAAY6W,KAAKC,WAGnFwoB,KAAQC,cAAcC,QAAtB,IAAuC7gC,KAAKgC,QAAQX,YAAY4B,KAChE09B,KAAQC,cAAcC,QAAtB,QAA8C7gC,KAAKgC,QAAQX,YAAY4B,KAAK1E,IAC5EoiC,KAAQC,cAAcC,QAAtB,QAA8C7gC,KAAKgC,QAAQX,YAAY4B,KAAKjC,IAC5E2/B,KAAQC,cAAcC,QAAtB,QAA8C7gC,KAAKgC,QAAQX,YAAY4B,KAAKiB,IAC5Ey8B,KAAQC,cAAcC,QAAtB,UAAgD7gC,KAAKgC,QAAQX,YAAY4B,KAAK/B,MAG9Ey/B,KAAQC,cAAcqB,UAAtB,eAAoDjiC,KAAKgC,QAAQX,YAAY+U,eAC7EuqB,KAAQC,cAAcqB,UAAtB,eAAoDjiC,KAAKgC,QAAQX,YAAY0wB,YAC7E4O,KAAQC,cAAcqB,UAAtB,OAA4CjiC,KAAKgV,OACjD2rB,KAAQC,cAAcqB,UAAtB,eAAoDjiC,KAAKkiC,eACzDvB,KAAQC,cAAcqB,UAAtB,SAA8CjiC,KAAKmiC,SACnDxB,KAAQC,cAAcqB,UAAtB,MAA2CjiC,KAAKoiC,MAChDzB,KAAQC,cAAcqB,UAAtB,MAA2CjiC,KAAKsqB,MAChDqW,KAAQC,cAAcqB,UAAtB,eAAoDjiC,KAAKqiC,eACzD1B,KAAQC,cAAcqB,UAAtB,UAA+CjiC,KAAKsiC,UACpD3B,KAAQC,cAAcqB,UAAtB,MAA2CjiC,KAAKqrB,MAChDsV,KAAQC,cAAcqB,UAAtB,UAA+CjiC,KAAKuiC,UACpD5B,KAAQC,cAAcqB,UAAtB,YAAiDjiC,KAAKwiC,YACtD7B,KAAQC,cAAcqB,UAAtB,cAAmDjiC,KAAKyiC,cACxD9B,KAAQC,cAAcqB,UAAtB,QAA6CjiC,KAAK0iC,QAClD/B,KAAQC,cAAcqB,UAAtB,UAA+CjiC,KAAK2iC,UACpDhC,KAAQC,cAAcqB,UAAtB,YAAiDjiC,KAAK4iC,c,oCAIhDC,EAAcC,GACpB,OAAO,IAAI7tB,KAAOjV,KAAKgC,QAAQX,YAAawhC,EAAcC,K,oDAI5C5kC,M,wCAIN6kC,M,kCAIHA,M,kCAIA5G,M,sCAIEc,EAAK+F,M,gDAIA3/B,EAAUiR,EAAeJ,M,0CAI5B1U,M,kCAIJyjC,EAAK/lB,EAAM7gB,EAAQ6mC,EAAQC,M,0CAIvBhkC,EAAGikC,EAAKC,EAAMC,M,8CAIZ5nB,EAAIC,EAAIC,EAAIC,M,kDAIVunB,EAAKG,EAAKD,M,sCAIhBnkC,EAAGkjB,EAASihB,M,0CAIVnkC,EAAG+T,EAAOG,EAAQmwB,EAAUF,M,8CAI1BhnB,EAAGC,EAAG+mB,Q,oBC/GAG,G,WAKnB,sBAAazV,GAAQ,uBAEnBhuB,KAAKgC,QAAUgsB,E,yEAMf2S,KAAQC,cAAcC,QAAtB,OAA0C,GAC1CF,KAAQC,cAAcC,QAAtB,cAAoD7gC,KAAKqnB,OACzDsZ,KAAQC,cAAcC,QAAtB,eAAqD7gC,KAAK0jC,U,sCAK1D,OAAOhiC,KAAK2lB,W,sCAIL/K,EAAG+K,GAKV,IAHA,IAA6Bsc,EAAgBC,EAAzCrH,EAAejgB,EAAEjgB,OAGG,IAAjBkgC,GAELqH,EAAcliC,KAAK6H,MAAM7H,KAAK2lB,SAAWkV,GAIzCoH,EAAiBrnB,EAHjBigB,GAAgB,GAIhBjgB,EAAEigB,GAAgBjgB,EAAEsnB,GACpBtnB,EAAEsnB,GAAeD,EAEnB,OAAOrnB,M,gBCzCUunB,G,WAKnB,sBAAa7V,GAAQ,uBAEnBhuB,KAAKgC,QAAUgsB,E,iKAYT9a,EAAO4wB,M,yDCZIC,G,WAKnB,sBAAa/V,GAAQ,uBAEnBhuB,KAAKgC,QAAUgsB,EAGfhuB,KAAKgkC,YAAc,IAAIxD,GAAWxgC,KAAKgC,SACvChC,KAAKikC,kBAAoB,IAAIpC,GAAiB7hC,KAAKgC,SACnDhC,KAAKkkC,cAAgB,IAAIT,GAAazjC,KAAKgC,SAC3ChC,KAAKmkC,cAAgB,IAAIN,GAAa7jC,KAAKgC,SAG3ChC,KAAKokC,SAAW,GAChBpkC,KAAKqkC,gBAAkB,GACvBrkC,KAAKskC,qBAAuB,KAC5BtkC,KAAKukC,eAAiB,KACtBvkC,KAAKwkC,MAAQ,KACbxkC,KAAKykC,WAAa,KAClBzkC,KAAK0kC,OAAS,EACd1kC,KAAK2kC,WAAa,KAClB3kC,KAAKwC,QAAU,EACfxC,KAAK4kC,WAAa,G,yEAMlB5kC,KAAK4kC,WAAL,MAA2B5kC,KAAKgC,QAAQX,YAAYqB,MACpD1C,KAAK4kC,WAAL,IAAyB5kC,KAAKgC,QAAQX,YACtCrB,KAAK4kC,WAAL,MAA2B5kC,KAAKgC,QAAQoI,WACxCpK,KAAK4kC,WAAL,KAA0B5kC,KAAKgC,QAAQwY,MACvCxa,KAAK4kC,WAAL,IAAyB5kC,KAAKgC,QAAQX,YAAY4B,KAGlB,OAA5BjD,KAAKgC,QAAQyiC,aACfzkC,KAAKykC,WAAazkC,KAAKgC,QAAQyiC,YAIjCzkC,KAAKgkC,YAAYtO,cACjB11B,KAAKikC,kBAAkBvO,cACvB11B,KAAKkkC,cAAcxO,cACnB11B,KAAKmkC,cAAczO,gB,oCAObpzB,GAEN,GAAe,OAAXA,EAiBF,OAAO,KAhBP,IACIuiC,EAAUlE,KAAQmE,MAItB,IAKE,OAHUD,EADCviC,EACa,CACtByiC,WARY,EASZC,QAPS,IASX,MAAOh8B,GAEP,OADAhJ,KAAKgC,QAAQmC,UAAUC,SAAS,yBAA2B4E,EAAEsyB,SACtD,Q,gDAWC2J,GAEZ,IAAIh8B,EAAQg8B,EAAWtmC,MAAM4F,MAAM,KAEnC,MAAkB,oBAAb0E,EAAM,IAA2C,YAAbA,EAAM,GACtCjJ,KAAK4kC,WAAW37B,EAAM,SAGKH,IAA9B9I,KAAK4kC,WAAW37B,EAAM,IACjBjJ,KAAK4kC,WAAW37B,EAAM,IAEtBvJ,OAAOuJ,EAAM,M,gDAUZsM,GAEZ,IAAItM,EAAQsM,EAAQ5W,MAAM4F,MAAM,KAGhC,GAAiB,oBAAb0E,EAAM,GAA0B,CAElC,GAAiB,YAAbA,EAAM,GAAkB,CAC1B,IACItK,EADagiC,KAAQC,cAAcC,QAAQ53B,EAAM,IAC9BA,EAAM,IAG7B,OAAOsc,MAAM2f,KAASvmC,IAAUA,EAAQumC,KAASvmC,GAGjD,OADkBgiC,KAAQC,cAAc33B,EAAM,IAC3BA,EAAM,IAI3B,YAAkCH,IAA9B9I,KAAK4kC,WAAW37B,EAAM,IACH,IAAjBA,EAAM5M,OACD2D,KAAK4kC,WAAW37B,EAAM,IAEtBjJ,KAAK4kC,WAAW37B,EAAM,IAAIA,EAAM,SAGhBH,IAArBpJ,OAAOuJ,EAAM,IACM,IAAjBA,EAAM5M,OACDqD,OAAOuJ,EAAM,IAEbvJ,OAAOuJ,EAAM,IAAIA,EAAM,SAJlC,I,4DAgBcsM,GAClB,OAAQA,EAAQ3Q,MACd,IAAK,aAEH,IAAIqE,EAAQsM,EAAQ5W,MAAM4F,MAAM,KAGhC,GAAqB,IAAjB0E,EAAM5M,OACR,YAAkCyM,IAA9B9I,KAAK4kC,WAAW37B,EAAM,IACjBjJ,KAAK4kC,WAAW37B,EAAM,IAEtBvJ,OAAOuJ,EAAM,IAGtB,IAA4C,IAAxCA,EAAM,GAAG2f,QAAQ,kBACnB,OAA4C,IAAxC3f,EAAM,GAAG2f,QAAQ,kBACH5oB,KAAK4kC,WAAW37B,EAAM,IAC1BjJ,KAAK4kC,WAAW37B,EAAM,UAGAH,IAA9B9I,KAAK4kC,WAAW37B,EAAM,IACjBjJ,KAAK4kC,WAAW37B,EAAM,IAAIA,EAAM,IAEhCvJ,OAAOuJ,EAAM,IAAIA,EAAM,IAG7B,GAAiB,oBAAbA,EAAM,GAA0B,CACzC,GAAiB,YAAbA,EAAM,GAAkB,CAC1B,IACItK,EADegiC,KAAQC,cAAcC,QAAQ53B,EAAM,IAChCA,EAAM,IAG7B,OAAOsc,MAAM2f,KAASvmC,IAAUA,EAAQumC,KAASvmC,GAGjD,OADkBgiC,KAAQC,cAAc33B,EAAM,IAC3BA,EAAM,IAG3B,YAAkCH,IAA9B9I,KAAK4kC,WAAW37B,EAAM,IACjBjJ,KAAK4kC,WAAW37B,EAAM,IAAIA,EAAM,IAEhCvJ,OAAOuJ,EAAM,IAAIA,EAAM,IAItC,IAAK,UAEH,OAAOsM,EAAQ5W,S,4DASD4W,EAAS5W,GAE3B,IAAIsK,EAAQsM,EAAQ5W,MAAM4F,MAAM,KAGX,IAAjB0E,EAAM5M,YACiByM,IAArBpJ,OAAOuJ,EAAM,IACfvJ,OAAOuJ,EAAM,IAAMtK,EAEnBqB,KAAK4kC,WAAW37B,EAAM,IAAMtK,OAGLmK,IAArBpJ,OAAOuJ,EAAM,IACfvJ,OAAOuJ,EAAM,IAAIA,EAAM,IAAMtK,EAE7BqB,KAAK4kC,WAAW37B,EAAM,IAAIA,EAAM,IAAMtK,I,0CASjCwmC,GAETA,EAAKplC,OAASC,KAAKwkC,MAGnBxkC,KAAKwkC,MAAQW,I,0DAOIxmC,GAEjBqB,KAAKwkC,MAAMzkC,OAAOqlC,mBAA4D,IAApCplC,KAAKwkC,MAAMzkC,OAAOqlC,cAAiC,GAAKplC,KAAKwkC,MAAMzkC,OAAOqlC,cAGpHplC,KAAKwkC,MAAMzkC,OAAOqlC,cAAczoC,KAAKgC,K,4DASrC,GAHAqB,KAAKwkC,MAAMa,WAAqC,IAArBrlC,KAAKwkC,MAAMa,MAAyB,EAAIrlC,KAAKwkC,MAAMa,MAG1ErlC,KAAKwkC,MAAMa,MAAQrlC,KAAKwkC,MAAMtvB,SAAS7Y,OAEzC2D,KAAKwkC,MAAMa,QACXrlC,KAAKslC,UAAUtlC,KAAKwkC,MAAMtvB,SAASlV,KAAKwkC,MAAMa,MAAQ,IAGtDrlC,KAAKyW,qBACA,CAEL,IAAK,IAAIta,EAAI,EAAGA,EAAI6D,KAAKwkC,MAAMY,cAAc/oC,OAAQF,IACnD6D,KAAKwkC,MAAMY,cAAcjpC,GAAK6D,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAcjpC,IAEjF,IAAIqpC,EAAe,CAAE5gC,KAAM,UAAWjG,MAAOqB,KAAKwkC,MAAMY,eAGxDplC,KAAKylC,kBAAkBD,GAGvBxlC,KAAKwkC,MAAMa,MAAQ,EACnBrlC,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,oB,sEAUP,OAHAzW,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGxEjO,KAAKwkC,MAAMv2B,QACjB,KAAK,EAEHjO,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMvxB,MAG1BjT,KAAKyW,iBACL,MACF,KAAK,EAEHzW,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMxxB,OAG1BhT,KAAKyW,iBACL,MACF,KAAK,EAEH,IAAIivB,EAGJ,OAAQ1lC,KAAKwkC,MAAMmB,UACjB,IAAK,IAEH3lC,KAAK4lC,mBAAmB5lC,KAAKwkC,MAAMY,cAAc,GAAIplC,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAc,KACtG,MACF,IAAK,KACHM,EAAY1lC,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAc,IAC7DplC,KAAK4lC,mBAAmB5lC,KAAKwkC,MAAMY,cAAc,GAAIM,EAAY1lC,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAc,KAClH,MACF,IAAK,KACHM,EAAY1lC,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAc,IAC7DplC,KAAK4lC,mBAAmB5lC,KAAKwkC,MAAMY,cAAc,GAAIM,EAAY1lC,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAc,KAClH,MACF,IAAK,KACHM,EAAY1lC,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAc,IAC7DplC,KAAK4lC,mBAAmB5lC,KAAKwkC,MAAMY,cAAc,GAAIM,EAAY1lC,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAc,KAKtHplC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,oB,8DAWT,OAHAzW,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGxEjO,KAAKwkC,MAAMv2B,QACjB,KAAK,EAEHjO,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMvxB,MAG1BjT,KAAKyW,iBACL,MACF,KAAK,EAEHzW,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMxxB,OAG1BhT,KAAKyW,iBACL,MACF,KAAK,EAEH,IAAIxD,EAAOjT,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAc,IACxDpyB,EAAQhT,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAc,IACzDI,EAAe,CAAE5gC,KAAM,WAG3B,OAAQ5E,KAAKwkC,MAAMmB,UACjB,IAAK,IACHH,EAAa7mC,MAAQsU,EAAOD,EAC5B,MACF,IAAK,IACHwyB,EAAa7mC,MAAQsU,EAAOD,EAC5B,MACF,IAAK,KACHwyB,EAAa7mC,MAASsU,IAASD,EAC/B,MACF,IAAK,KACHwyB,EAAa7mC,MAASsU,IAASD,EAC/B,MACF,IAAK,IACHwyB,EAAa7mC,MAASsU,EAAOD,EAC7B,MACF,IAAK,IACHwyB,EAAa7mC,MAASsU,EAAOD,EAC7B,MACF,IAAK,KACHwyB,EAAa7mC,MAASsU,GAAQD,EAC9B,MACF,IAAK,KACHwyB,EAAa7mC,MAASsU,GAAQD,EAC9B,MACF,IAAK,IAEDwyB,EAAa7mC,MADM,iBAATsU,GAAwC,iBAAVD,EACnBC,EAAOD,EAEPC,EAAKxB,QAAQ,MAAOuB,GAE3C,MACF,IAAK,aACHwyB,EAAa7mC,MAAQsU,aAAgBD,EAKzChT,KAAKylC,kBAAkBD,GAGvBxlC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,oB,0DAQTzW,KAAKwkC,MAAMqB,WAAqC,IAArB7lC,KAAKwkC,MAAMqB,OAAiC7lC,KAAKwkC,MAAMqB,MAClF7lC,KAAKwkC,MAAMa,WAAqC,IAArBrlC,KAAKwkC,MAAMa,MAAyB,EAAIrlC,KAAKwkC,MAAMa,MAGzErlC,KAAKwkC,MAAMa,MAAQrlC,KAAKwkC,MAAM37B,KAAKxM,SAAiC,IAArB2D,KAAKwkC,MAAMqB,OAE7D7lC,KAAKwkC,MAAMa,QACXrlC,KAAKslC,UAAUtlC,KAAKwkC,MAAM37B,KAAK7I,KAAKwkC,MAAMa,MAAQ,IAGlDrlC,KAAKyW,oBAGoB,IAArBzW,KAAKwkC,MAAMqB,QACb7lC,KAAKwkC,MAAMqB,OAAQ,EACnB7lC,KAAKwkC,MAAMzkC,OAAO8lC,OAAQ,GAG5B7lC,KAAKwkC,MAAMa,MAAQ,EACnBrlC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,oB,0DAOPzW,KAAKwkC,MAAMzkC,OAAO8lC,OAAQ,EAG1B7lC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,mB,0DAWL,OALAzW,KAAKwkC,MAAMsB,eAA6C,IAAzB9lC,KAAKwkC,MAAMsB,UAA6B,GAAK9lC,KAAKwkC,MAAMsB,UACvF9lC,KAAKwkC,MAAMa,WAAqC,IAArBrlC,KAAKwkC,MAAMa,MAAyB,EAAIrlC,KAAKwkC,MAAMa,MAC9ErlC,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGxEjO,KAAKwkC,MAAMv2B,QACjB,KAAK,EAECjO,KAAKwkC,MAAMa,MAAQrlC,KAAKwkC,MAAMsB,UAAUzpC,QAE1C2D,KAAKwkC,MAAMa,QACXrlC,KAAKslC,UAAUtlC,KAAKwkC,MAAMsB,UAAU9lC,KAAKwkC,MAAMa,MAAQ,IAGvDrlC,KAAKyW,mBAGLzW,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMuB,QAG1B/lC,KAAKyW,kBAEP,MACF,KAAK,EAMH,IAJA,IAAI+uB,EAAexlC,KAAKwkC,MAAMY,cAAcj+B,MAGxC6+B,EAAgB,GACX7pC,EAAI,EAAGA,EAAI6D,KAAKwkC,MAAMY,cAAc/oC,OAAQF,IACnD6pC,EAAcrpC,KAAKqD,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAcjpC,KAGtE,IAAI8pC,EAASjmC,KAAKkmC,aAAaV,GAC3BpX,EAAUpuB,KAAKmmC,aAAaX,GAEJ,UAAvBA,EAAa7mC,OAA8C,wCAAvB6mC,EAAa7mC,OAEpDqB,KAAKwkC,MAAMv2B,OAAS,OAGG,IAAZmgB,IACTA,EAAUpuB,MAIZimC,EAAOjpC,MAAMoxB,EAAS4X,UAGC,IAAZ5X,IACTA,EAAUpuB,MAKVwlC,EAD6B,uBAA3BxlC,KAAKwkC,MAAMuB,OAAOnhC,KACL,CAAEA,KAAM,UAAWjG,MAAOsnC,GAE1B,CAAErhC,KAAM,UAAWjG,MAAOsnC,EAAOjpC,MAAMoxB,EAAS4X,IAIjEhmC,KAAKylC,kBAAkBD,GAGvBxlC,KAAKwkC,MAAMa,MAAQ,EACnBrlC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,kBAEP,MACF,KAAK,EAEHzW,KAAKylC,kBAAkBzlC,KAAKomC,qBAG5BpmC,KAAKwkC,MAAMa,MAAQ,EACnBrlC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,oB,0DAQTzW,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OAGxBC,KAAKyW,mB,oEAMLzW,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGtD,IAAtBjO,KAAKwkC,MAAMv2B,QAEbjO,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMtF,YAG1Bl/B,KAAKyW,mBAGLzW,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OAGxBC,KAAKyW,oB,sDAUP,OAHAzW,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGxEjO,KAAKwkC,MAAMv2B,QACjB,KAAK,EAEHjO,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAM6B,MAG1BrmC,KAAKyW,iBACL,MACF,KAAK,EAEHzW,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMrI,MAG1Bn8B,KAAKyW,iBACL,MACF,KAAK,GAEuC,IAAtCzW,KAAKwkC,MAAMY,cAAc,GAAGzmC,OAE9BqB,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKslC,UAAUtlC,KAAKwkC,MAAM37B,MAG1B7I,KAAKyW,mBAGLzW,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OAGxBC,KAAKyW,kBAEP,MACF,KAAK,EAEHzW,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAM8B,QAG1BtmC,KAAKyW,oB,4DAYT,OAJAzW,KAAKwkC,MAAMa,WAAqC,IAArBrlC,KAAKwkC,MAAMa,MAAyB,EAAIrlC,KAAKwkC,MAAMa,MAC9ErlC,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGxEjO,KAAKwkC,MAAMv2B,QACjB,KAAK,EAEHjO,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMvxB,MAG1BjT,KAAKyW,iBACL,MACF,KAAK,EAEHzW,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMxxB,OAG1BhT,KAAKyW,iBACL,MACF,KAAK,EAEH,IAAI8vB,EAAYvmC,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAc,IAG7DplC,KAAKwkC,MAAMa,MAAQkB,EAAUlqC,QAE/B2D,KAAK4lC,mBAAmB5lC,KAAKwkC,MAAMY,cAAc,GAAImB,EAAUvmC,KAAKwkC,MAAMa,QAG1ErlC,KAAKwkC,MAAMa,QAGXrlC,KAAKslC,UAAUtlC,KAAKwkC,MAAM37B,MAC1B7I,KAAKyW,mBAELzW,KAAKwkC,MAAMa,MAAQ,EACnBrlC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,qB,kEAYX,OAHAzW,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGxEjO,KAAKwkC,MAAMv2B,QACjB,KAAK,EAEHjO,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAM37B,MAG1B7I,KAAKyW,iBACL,MACF,KAAK,EAEH,IAAI+uB,EAAexlC,KAAKqkC,gBAAgBl9B,MAGxCnH,KAAKylC,kBAAkBD,GAGvBxlC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,oB,gDAQT,IAAM+uB,EAAe,CAAE5gC,KAAM,aAAcjG,MAAOqB,KAAKwkC,MAAMtmC,MAG7D8B,KAAKylC,kBAAkBD,GAGvBxlC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,mB,oDAUL,OAJAzW,KAAKwkC,MAAMqB,WAAqC,IAArB7lC,KAAKwkC,MAAMqB,OAAiC7lC,KAAKwkC,MAAMqB,MAClF7lC,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGxEjO,KAAKwkC,MAAMv2B,QACjB,KAAK,EAEHjO,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMrI,MAG1Bn8B,KAAKyW,iBACL,MACF,KAAK,GAEuC,IAAtCzW,KAAKwkC,MAAMY,cAAc,GAAGzmC,OAC9BqB,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMgC,YAG1BxmC,KAAKyW,kBAC6B,OAAzBzW,KAAKwkC,MAAMiC,WACpBzmC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMiC,WAG1BzmC,KAAKyW,mBAELzW,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKyW,kBAEP,MACF,KAAK,GAEsB,IAArBzW,KAAKwkC,MAAMqB,QACb7lC,KAAKwkC,MAAMqB,OAAQ,EACnB7lC,KAAKwkC,MAAMzkC,OAAO8lC,OAAQ,GAE5B7lC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,oB,0CAQT,IAAI+uB,EAAe,CAAE5gC,KAAM,UAAWjG,MAAOqB,KAAKwkC,MAAM7lC,OAGxDqB,KAAKylC,kBAAkBD,GAGvBxlC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,mB,gEASL,OAHAzW,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGxEjO,KAAKwkC,MAAMv2B,QACjB,KAAK,EAEHjO,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMvxB,MAG1BjT,KAAKyW,iBACL,MACF,KAAK,EAEHzW,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMxxB,OAG1BhT,KAAKyW,iBACL,MACF,KAAK,EAEH,IAAIxD,EAAOjT,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAc,IACxDpyB,EAAQhT,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAc,IACzDI,EAAe,CAAE5gC,KAAM,WAG3B,OAAQ5E,KAAKwkC,MAAMmB,UACjB,IAAK,KACHH,EAAa7mC,MAAQsU,GAAQD,EAC7B,MACF,IAAK,KACHwyB,EAAa7mC,MAAQsU,GAAQD,EAKjChT,KAAKylC,kBAAkBD,GAGvBxlC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,oB,8DAWT,OAHAzW,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGxEjO,KAAKwkC,MAAMv2B,QACjB,KAAK,EAEHjO,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMllC,QAG1BU,KAAKyW,iBACL,MACF,KAAK,EAEHzW,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMjlC,UAG1BS,KAAKyW,iBACL,MACF,KAAK,EAEH,IAAI+uB,EAAe,CAAE5gC,KAAM,aAAcjG,MAAOqB,KAAKwkC,MAAMY,cAAc,GAAGzmC,MAAQ,IAAMqB,KAAKwkC,MAAMY,cAAc,GAAGzmC,OAGtHqB,KAAKylC,kBAAkBD,GAGvBxlC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,oB,wDAaT,GALAzW,KAAKwkC,MAAMsB,eAA6C,IAAzB9lC,KAAKwkC,MAAMsB,UAA6B,GAAK9lC,KAAKwkC,MAAMsB,UACvF9lC,KAAKwkC,MAAMa,WAAqC,IAArBrlC,KAAKwkC,MAAMa,MAAyB,EAAIrlC,KAAKwkC,MAAMa,MAC9ErlC,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGtD,IAAtBjO,KAAKwkC,MAAMv2B,OAETjO,KAAKwkC,MAAMa,MAAQrlC,KAAKwkC,MAAMsB,UAAUzpC,QAE1C2D,KAAKwkC,MAAMa,QACXrlC,KAAKslC,UAAUtlC,KAAKwkC,MAAMsB,UAAU9lC,KAAKwkC,MAAMa,MAAQ,IAGvDrlC,KAAKyW,mBAGLzW,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMuB,QAG1B/lC,KAAKyW,sBAEF,CAQL,IANA,IAAIiwB,EAAc1mC,KAAKwkC,MAAMY,cAAcj+B,MACvC8+B,EAASjmC,KAAKkmC,aAAaQ,GAC3BtY,EAAUpuB,KAAKmmC,aAAaO,GAG5BV,EAAgB,GACX7pC,EAAI,EAAGA,EAAI6D,KAAKwkC,MAAMY,cAAc/oC,OAAQF,IACnD6pC,EAAcrpC,KAAKqD,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAcjpC,KAItEuqC,EAAc,CAAE9hC,KAAM,UAAWjG,MAAOsnC,EAAOjpC,MAAMoxB,EAAS4X,IAG9DhmC,KAAKylC,kBAAkBiB,GAGvB1mC,KAAKwkC,MAAMa,MAAQ,EACnBrlC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,oB,0CAOPzW,KAAKwkC,MAAMa,WAAqC,IAArBrlC,KAAKwkC,MAAMa,MAAyB,EAAIrlC,KAAKwkC,MAAMa,MAG1ErlC,KAAKwkC,MAAMa,MAAQrlC,KAAKwkC,MAAM37B,KAAKxM,QAErC2D,KAAKwkC,MAAMa,QACXrlC,KAAKslC,UAAUtlC,KAAKwkC,MAAM37B,KAAK7I,KAAKwkC,MAAMa,MAAQ,IAGlDrlC,KAAKyW,mBAGLzW,KAAKwkC,MAAMa,MAAQ,EACnBrlC,KAAKwC,QAAU,EAGa,OAAxBxC,KAAKukC,gBACPvkC,KAAKukC,eAAep6B,e,4DAWxB,OAHAnK,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGxEjO,KAAKwkC,MAAMv2B,QACjB,KAAK,EAEHjO,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMmC,UAG1B3mC,KAAKyW,iBACL,MACF,KAAK,EAEH,IAAMiwB,EAAc,CAAE9hC,KAAM,aAAcjG,MAAOqB,KAAKwkC,MAAMY,cAAc,GAAGzmC,OAG7EqB,KAAKqkC,gBAAgB1nC,KAAK+pC,GAG1B1mC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,oB,4DAWT,GAHAzW,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGtD,IAAtBjO,KAAKwkC,MAAMv2B,OAEbjO,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMmC,UAG1B3mC,KAAKyW,qBACA,CACL,IAAI+uB,EAAe,CAAE5gC,KAAM,WAG3B,OAAQ5E,KAAKwkC,MAAMmB,UACjB,IAAK,IACHH,EAAa7mC,OAAUqB,KAAKwkC,MAAMY,cAAc,GAAGzmC,MACnD,MACF,IAAK,IACH6mC,EAAa7mC,OAAUqB,KAAKwkC,MAAMY,cAAc,GAAGzmC,MAKvDqB,KAAKylC,kBAAkBD,GAGvBxlC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,oB,8DAUP,GAHAzW,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGtD,IAAtBjO,KAAKwkC,MAAMv2B,OAEbjO,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMmC,UAG1B3mC,KAAKyW,qBACA,CAEL,OAAQzW,KAAKwkC,MAAMmB,UACjB,IAAK,KACH3lC,KAAK4lC,mBAAmB5lC,KAAKwkC,MAAMY,cAAc,GAAIplC,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAc,IAAM,GAKhHplC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,oB,oEAOPzW,KAAKwkC,MAAMa,WAAqC,IAArBrlC,KAAKwkC,MAAMa,MAAyB,EAAIrlC,KAAKwkC,MAAMa,MAG1ErlC,KAAKwkC,MAAMa,MAAQrlC,KAAKwkC,MAAMoC,aAAavqC,QAE7C2D,KAAKwkC,MAAMa,QACXrlC,KAAKslC,UAAUtlC,KAAKwkC,MAAMoC,aAAa5mC,KAAKwkC,MAAMa,MAAQ,IAG1DrlC,KAAKyW,mBAGLzW,KAAKwkC,MAAMa,MAAQ,EACnBrlC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,oB,kEAUP,OAHAzW,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGxEjO,KAAKwkC,MAAMv2B,QACjB,KAAK,EAEHjO,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMqC,IAG1B7mC,KAAKyW,iBACL,MACF,KAAK,EAEHzW,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAM6B,MAG1BrmC,KAAKyW,iBACL,MACF,KAAK,EAEHzW,KAAK4lC,mBAAmB5lC,KAAKwkC,MAAMY,cAAc,GAAIplC,KAAKulC,mBAAmBvlC,KAAKwkC,MAAMY,cAAc,KAGtGplC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,oB,0DAYT,OAJAzW,KAAKwkC,MAAMqB,WAAqC,IAArB7lC,KAAKwkC,MAAMqB,OAAiC7lC,KAAKwkC,MAAMqB,MAClF7lC,KAAKwkC,MAAMv2B,YAAuC,IAAtBjO,KAAKwkC,MAAMv2B,OAA0B,EAAIjO,KAAKwkC,MAAMv2B,OAGxEjO,KAAKwkC,MAAMv2B,QACjB,KAAK,GAEsB,IAArBjO,KAAKwkC,MAAMqB,OACb7lC,KAAKwkC,MAAMqB,OAAQ,EAEnB7lC,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,mBAGLzW,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKslC,UAAUtlC,KAAKwkC,MAAMrI,MAG1Bn8B,KAAKyW,kBAEP,MACF,KAAK,GAEuC,IAAtCzW,KAAKwkC,MAAMY,cAAc,GAAGzmC,OAE9BqB,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAG3BplC,KAAKslC,UAAUtlC,KAAKwkC,MAAM37B,MAG1B7I,KAAKyW,mBAGLzW,KAAKwkC,MAAMv2B,OAAS,EACpBjO,KAAKwkC,MAAMY,cAAgB,GAC3BplC,KAAKwkC,MAAQxkC,KAAKwkC,MAAMzkC,OACxBC,KAAKyW,qB,sDASX,GAAwB,OAApBzW,KAAK2kC,WAEP3kC,KAAK8mC,0BACA,CACL,GAAI9mC,KAAKwkC,QAAUxkC,KAAK2kC,WAEtB,OAAQ3kC,KAAKwkC,MAAM37B,KAAK,GAAGu8B,cAAc,GAAGzmC,MAG5CqB,KAAK+mC,4B,gEAQT/mC,KAAK0kC,SACD1kC,KAAK0kC,OAAS,KAEhB1kC,KAAK0kC,OAAS,EAGdh2B,WAAW,WACT1O,KAAK+mC,0BACL7nC,KAAKc,MAAO,IAGdA,KAAK+mC,2B,sEAOP,OAAQ/mC,KAAKwkC,MAAM5/B,MACjB,IAAK,kBACH5E,KAAKgnC,oBACL,MACF,IAAK,uBACHhnC,KAAKinC,yBACL,MACF,IAAK,mBACHjnC,KAAKknC,qBACL,MACF,IAAK,iBACHlnC,KAAKmnC,mBACL,MACF,IAAK,iBACHnnC,KAAKonC,mBACL,MACF,IAAK,iBACHpnC,KAAKqnC,mBACL,MACF,IAAK,iBACHrnC,KAAKsnC,mBACL,MACF,IAAK,sBACHtnC,KAAKunC,wBACL,MACF,IAAK,eACHvnC,KAAKwnC,iBACL,MACF,IAAK,iBACHxnC,KAAKynC,oBACL,MACF,IAAK,qBACHznC,KAAK0nC,uBACL,MACF,IAAK,aACH1nC,KAAK2nC,cACL,MACF,IAAK,cACH3nC,KAAK4nC,gBACL,MACF,IAAK,UACH5nC,KAAK6nC,WACL,MACF,IAAK,oBACH7nC,KAAK8nC,sBACL,MACF,IAAK,mBACH9nC,KAAK+nC,qBACL,MACF,IAAK,gBACH/nC,KAAKgoC,kBACL,MACF,IAAK,UACHhoC,KAAKioC,WACL,MACF,IAAK,kBACHjoC,KAAKkoC,oBACL,MACF,IAAK,kBACHloC,KAAKmoC,oBACL,MACF,IAAK,mBACHnoC,KAAKooC,qBACL,MACF,IAAK,sBACHpoC,KAAKqoC,wBACL,MACF,IAAK,qBACHroC,KAAKsoC,uBACL,MACF,IAAK,iBACHtoC,KAAKuoC,mBACL,MACF,QACEvoC,KAAKgC,QAAQmC,UAAUC,SAAS,iCAAmCpE,KAAKwkC,MAAM5/B,S,oDASpE4jC,GAYd,IAAI9B,EAWJ,OAtBA1mC,KAAKwkC,MAAQgE,EAAS3/B,KAAK,GAC3B7I,KAAKwkC,MAAMzkC,OAASyoC,EACpBxoC,KAAK2kC,WAAa6D,EAGlBxoC,KAAKwC,QAAU,EAGfxC,KAAKyW,iBAKHiwB,EAD6C,eAA3C8B,EAAS3/B,KAAK,GAAGu8B,cAAc,GAAGxgC,KACtB5E,KAAKulC,mBAAmBiD,EAAS3/B,KAAK,GAAGu8B,cAAc,IAEvDoD,EAAS3/B,KAAK,GAAGu8B,cAAc,GAAGzmC,MAIlD6pC,EAAS3/B,KAAK,GAAGu8B,cAAgB,GAG1BsB,I,gCAQH3b,EAAeyd,GAEnBxoC,KAAKukC,eAAiBxZ,EAGtB/qB,KAAK4kC,WAAL,KAA0B7Z,EAG1B/qB,KAAKwkC,MAAQgE,EACbxoC,KAAKwkC,MAAMzkC,OAAS,KACpBC,KAAK2kC,WAAa,KAGlB3kC,KAAKwC,QAAU,EACfxC,KAAKyW,qB,gwCCtyCYgyB,G,WAKnB,aAAarnC,GAAY,cACvBpB,KAAKqB,YAAcD,E,4DAOTsnC,GACV,IADmB,EACbC,EAAQ,GADK,gCAEGD,GAFH,IAEnB,2BAA+B,KAApBhgB,EAAoB,QACvB/pB,EAAQqB,KAAKqB,YAAY4B,KAAK1E,IAAImqB,EAAS,MAAM,GACnD1Z,KAAWrQ,KACfgqC,EAAMjgB,GAAW/pB,IALA,8BAOfqQ,KAAWhP,KAAKqB,YAAYunC,QAC9B5oC,KAAKqB,YAAYunC,MAAMD,GAEzB3oC,KAAKqB,YAAYW,QAAQ6mC,MAAMlsC,KAAKgsC,O,4eCVnBG,G,uEAEnB,oBAAa1nC,EAAYlD,EAAMoE,GAAQ,mCAErC,cAAMlB,EAAYlD,EAAMoE,IAGnB4c,QAAU,IAAIjK,KAAJ,SACf,EAAKkf,eAAiB,EAAKjV,QAC3B,EAAKhH,KAAO,IAAIuwB,GAAJ,SACZ,EAAKlU,SAAW,EAChB,EAAKC,SAAW,EAChB,EAAKzd,qBAAuB,IAAIgyB,KAAJ,SAG5B,EAAKC,MAAQ,EAAKhnC,QAAQmC,UAAU8pB,QACpC,EAAKhlB,MAAQ,EAAKjH,QAAQoI,WAC1B,EAAK4Q,KAAO,EAAKhZ,QAAQwY,MAGzB,EAAKvX,KAAKgK,MAAQ,aAClB,EAAKhK,KAAKkvB,MAAQ,gBAClB,EAAKlvB,KAAKgmC,KAAO,KACjB,EAAKhmC,KAAKimC,eAAiB,EAC3B,EAAKjmC,KAAKulB,YAAc,KACxB,EAAKvlB,KAAK6X,oBAAsB,KAChC,EAAK7X,KAAKkmC,WAAY,IAAItnC,MAAOunC,UAAY1nC,KAAK6H,MAAsB,IAAhB7H,KAAK2lB,UAG7D,EAAKpkB,KAAKomC,WAAa,KACvB,EAAKpmC,KAAKqmC,mBAAqB,GAC/B,EAAKrmC,KAAKsmC,eAAiB,EAC3B,EAAKtmC,KAAKumC,eAAiB,KAG3B,EAAKvmC,KAAKwmC,eAAiB,YAG3B,EAAKxmC,KAAKiQ,MAAQ,KAClB,EAAKjQ,KAAKoQ,OAAS,IACnB,EAAKpQ,KAAK2f,WAAa,EACvB,EAAK3f,KAAKwd,WAAa,SAGvB,EAAKxd,KAAKob,UAAY,GACtB,EAAKpb,KAAKmb,YAAc,OACxB,EAAKnb,KAAKsb,YAAc,KACxB,EAAKtb,KAAKqb,UAAY,KACtB,EAAKrb,KAAKyb,eAAiB,KA9CU,E,6EAmDrC1e,KAAKiD,KAAKsR,gBAAkB,EAC5BvU,KAAKiD,KAAKmR,cAAgB,EAC1BpU,KAAKiD,KAAKoR,oBAAsB,EAChCrU,KAAKiD,KAAKyR,OAAS,YACnB1U,KAAKiD,KAAKwR,sBAAwB,YAClCzU,KAAKiD,KAAKuR,SAAW,YACrBxU,KAAKiD,KAAKkC,IAAM,c,8CAOLukC,GAEX1pC,KAAKiD,KAAK0mC,WAAaD,EAErB1pC,KAAKiD,KAAK2mC,eADPF,EAAM,GAAO,EACW,OAEA,Q,sDASdpnC,GAIf,IAFA,IAAImB,EAAOnB,EAAOxF,QACd+sC,EAAU,GACG,OAATpmC,GAAmBA,EAAKpH,OAAS,GAA0B,OAAnBoH,EAAKE,OAAO,IAC1DkmC,EAAUA,EAAUpmC,EAAKqlB,UAAU,GAAK,KACxCrlB,EAAOnB,EAAOxF,QAEhB,OAAO+sC,I,8CAOIvnC,GAEX,GAAe,OAAXA,EAAiB,CACnBtC,KAAK8pC,QAAUxnC,EAAOiC,MAAM,MAE5B,IADA,IAAIzG,EAAIkC,KAAK8pC,QAAQhtC,QACT,MAALgB,GAAW,CAGhB,IACE,IAAIkG,EAAKC,EADP,EAGoBjE,KAAKgC,QAAQgB,QAAQe,UAAUjG,GAHnD,WAGDkG,EAHC,KAGIC,EAHJ,UAIF,MAAO+E,GACPhJ,KAAKgC,QAAQmC,UAAUC,SAAS,oFAAsF4E,EAAEsyB,SAG1H,GAAa,OAARt3B,GAAkBC,EAAK5H,OAAS,IAEJ,IAA3B2D,KAAKwE,eAAe1G,IACV,WAARkG,EACF,GAAoB,IAAhBC,EAAK5H,OAAc,CAErB,IAAI+rB,EAAYnkB,EAAK,GACjB8I,EAAY/M,KAAKgC,QAAQgB,QAAQ8Q,SAAS7P,EAAK,IAC/C4lC,EAAU7pC,KAAK+pC,gBAAgB/pC,KAAK8pC,SACxC9pC,KAAKgC,QAAQoI,WAAWykB,QAAQzG,EAAWrb,EAAW88B,QAEtD7pC,KAAKgC,QAAQmC,UAAUC,SAAS,+BAAiCtG,GAQvEA,EAAIkC,KAAK8pC,QAAQhtC,Y,8CASvBkD,KAAK0C,MAAMgzB,gB,kDAMX11B,KAAKkf,QAAQ8qB,aAAahqC,Q,kCAIrBnE,M,gCAUL,OAHA,qDAGQmE,KAAKwC,SACX,KAAKL,GAAUuC,kBAEb1E,KAAKwC,QAAUL,GAAUe,gBAGzBlD,KAAKiD,KAAKgnC,UAAW,IAAIpoC,MAAOsS,WAChCnU,KAAKiD,KAAKinC,mBAAqB9U,GAC/Bp1B,KAAKiD,KAAKknC,oBAAsBC,GAChCpqC,KAAKqqC,aACLrqC,KAAKgqC,eACLhqC,KAAKoW,iBAGLpW,KAAKgC,QAAQmC,UAAUQ,WAAW,4CAA6C,IAAI9C,MAAOyoC,eAElC,OAApDtqC,KAAKgC,QAAQoI,WAAWlB,OAAOlJ,KAAKiD,KAAKgK,QAC3CjN,KAAKgC,QAAQqK,WAAWqJ,QACxB1V,KAAKgC,QAAQoI,WAAWC,QAAQrK,KAAKiD,KAAKgK,MAAOjN,OAEjDA,KAAKgC,QAAQmC,UAAUC,SAAS,sEAAwEpE,KAAKiD,KAAKgK,OAEpH,MACF,KAAK9K,GAAUe,gBAEblD,KAAKgC,QAAQmC,UAAUQ,WAAW,6CAA8C,IAAI9C,MAAOyoC,eAG3FtqC,KAAKmN,S,gCAOTnN,KAAKgC,QAAQwvB,gB,YAnMuBnvB,GCInBkoC,G,WAEnB,gBAAalL,GAAS,iBAEpBr/B,KAAKy0B,SAAW,KAChBz0B,KAAK8e,WAAa,KAClB9e,KAAK6oC,MAAQ,GACb7oC,KAAKqB,YAAc,KACnBrB,KAAKgzB,aAAc,EACnBhzB,KAAKwqC,UAAY,KACjBxqC,KAAKyqC,MAAQ,aACbzqC,KAAKykC,WAAa,KAClBzkC,KAAK0qC,YAAc,KACnB1qC,KAAK2qC,OAAS,KACd3qC,KAAKuuB,SAAW,KAChBvuB,KAAK2yB,QAAU,KACf3yB,KAAK0L,UAAY,KACjB1L,KAAK+zB,WAAa,UAClB/zB,KAAKiqB,QAAU,KACfjqB,KAAK8pC,QAAU,KACf9pC,KAAK8xB,SAAW,KAChB9xB,KAAK4qC,QAAU,KAGf5qC,KAAKmE,UAAY,IAAI4pB,GAAS/tB,MAC9BA,KAAK6qC,WAAa,IAAInc,GAAU1uB,MAChCA,KAAKiC,QAAU,IAAIitB,GAAOlvB,MAC1BA,KAAKqM,WAAa,IAAI6xB,GAAUl+B,MAChCA,KAAKoK,WAAa,IAAIg0B,GAAUp+B,MAChCA,KAAK6xB,YAAc,IAAIF,GAAW3xB,MAClCA,KAAKwa,MAAQ,IAAIkkB,GAAc1+B,MAC/BA,KAAK2I,cAAgB,IAAIo7B,GAAa/jC,MACtCA,KAAK6C,iBAAmB,IAAIioC,KAAgB9qC,MAC5CA,KAAKgxB,QAAU,IAAI8B,GAAO9yB,MAC1BA,KAAKq2B,SAAW,IAAIF,GAAQn2B,MAC5BA,KAAKgD,QAAU,IAAI87B,GAAO9+B,MAC1BA,KAAK+qC,UAAY,IAAIzQ,GAASt6B,MAG9BA,KAAKgrC,cAAc3L,G,2EAONA,QAEU,IAAZA,GAETr/B,KAAK8e,WAAiC,iBAAZugB,EAAwBvzB,SAASm/B,eAAe5L,GAAWA,EAGrFr/B,KAAK0L,UAAYw/B,YAAmB,IAAK,IAAK,CAC5CC,WAAW,EACXC,aAAa,EACbC,WAAY,IAEdrrC,KAAK0L,UAAUmK,gBAAkB,EAGjC7V,KAAK8e,WAAW9S,YAAYhM,KAAK0L,UAAUC,OAG3C3L,KAAKmE,UAAUC,SAAS,qC,6DAQPgqB,G,sHAEI,IAAZA,E,0BAqBLA,EAhBFkd,QAAStrC,KAAKy0B,c,MAAW,K,IAgBvBrG,EAfF4a,MAAOhpC,KAAKmE,UAAU8pB,a,WAepBG,EAdFmd,WAAYvrC,KAAKgzB,iB,WAcf5E,EAbFod,WAAYxrC,KAAKgxB,QAAQ+B,Y,WAavB3E,EAZFqd,YAAazrC,KAAKgxB,QAAQhjB,a,WAYxBogB,EAXFsd,SAAU1rC,KAAKwqC,e,MAAY,K,IAWzBpc,EAVFlwB,KAAM8B,KAAKyqC,W,MAAQ,a,IAUjBrc,EATFud,UAAW3rC,KAAKykC,gB,MAAa,K,IAS3BrW,EARFwd,WAAY5rC,KAAK0qC,iB,MAAc,K,IAQ7Btc,EAPFwa,MAAO5oC,KAAK2qC,Y,MAAS,K,IAOnBvc,EANFyd,QAAS7rC,KAAKuuB,c,MAAW,K,IAMvBH,EALFgE,OAAQpyB,KAAK2yB,a,MAAU,K,IAKrBvE,EAJF0d,UAAW9rC,KAAK+zB,gB,MAAa,U,IAI3B3F,EAHFzV,OAAQ3Y,KAAK8pC,a,MAAU,K,IAGrB1b,EAFF2d,QAAS/rC,KAAK8xB,c,MAAW,K,IAEvB1D,EADFoK,OAAQx4B,KAAK4qC,a,MAAU,K,EAIzB5qC,KAAKgxB,QAAQgb,oBAEbhsC,KAAKgxB,QAAQiB,mBAAmB,uBAChCjyB,KAAKgxB,QAAQuK,oBAAoB,G,oBAIVv7B,KAAK+qC,UAAUkB,YAAYjsC,KAAK8pC,S,QAArD9pC,KAAKiqB,Q,iEAELjqB,KAAKmE,UAAUC,SAAf,sCACApE,KAAK0yB,Q,2BAKP1yB,KAAKgxB,QAAQiB,mBAAmB,kCAGhCjyB,KAAKksC,SAGLlsC,KAAK6xB,YAAY6D,c,wBAGjB11B,KAAK40B,SAASxwB,SAAS,mC,mKAOzBpE,KAAKqB,YAAc,IAAIynC,GAAW9oC,KAAMA,KAAKyqC,MAAOzqC,KAAKiqB,SACzDjqB,KAAK6qC,WAAWsB,YAAYnsC,KAAKiqB,SACjCjqB,KAAKqB,YAAYyG,YAAY9H,KAAKiqB,SAG9BjqB,KAAK2qC,SACP3qC,KAAKqB,YAAYunC,MAAQ5oC,KAAK2qC,U,gDAOhC3qC,KAAKmE,UAAUuxB,cACf11B,KAAKiC,QAAQyzB,cACb11B,KAAK2I,cAAc+sB,cACnB11B,KAAKq2B,SAASX,cAGd11B,KAAKqB,YAAYgJ,UACjBrK,KAAKqB,YAAY+B,Q,4CAMjBpD,KAAKiC,QAAQuvB,YAGbxxB,KAAKmE,UAAUqtB,YAGfxxB,KAAKoK,WAAWgiC,YAChBpsC,KAAKwa,MAAM4xB,YAGXpsC,KAAK0yB,U,oCAML1yB,KAAKgxB,QAAQqb,kBAGbrsC,KAAKqB,YAAY6d,QAAQotB,eAGzBtsC,KAAKqB,YAAc,KAGfrB,KAAK0qC,aAEP1qC,KAAK0qC,YAAY1qC,KAAK6oC,MAAO7oC,KAAKq2B,SAASA,Y,kCAO7Cr2B,KAAKiC,QAAQwM,OAAStM,GAAUmM,c,8BAI7B8f,GAEHpuB,KAAKusC,cAAcne,O,UCtMVgc,GAAeoC,QACfpX,GAAiBqX,QAI9Bj7B,OAAOjV,UAAUmwC,WAAa,SAAUC,EAAMC,EAAMC,GAClD,OAAO7sC,KAAKyR,QACV,IAAIq7B,OACFH,EAAKl7B,QAAQ,kDAAmD,QAC/Do7B,EAAS,KAAO,KACA,iBAAVD,EAAsBA,EAAKn7B,QAAQ,MAAO,QAAUm7B,IAIjEp7B,OAAOjV,UAAUwwC,SAAW,SAAU9/B,EAAOE,EAAKe,GAChD,OAAY,OAARf,EACKnN,KAAKJ,MAAMqN,EAAOE,GAElBnN,KAAKJ,MAAMqN,IAKtB,IAUe+/B,GAVD,CACZC,iBAAkB,SAAS,mBAEzBz0B,QAAQgP,IAAR,UAAe4iB,GAAf,aAAgChV,MAElC8X,UAAW,SAAS,UAAC1U,GACnB,OAAO,IAAI+R,GAAO/R,KCvCA,oBAAX94B,SACTA,OAAOytC,SAAWC,EAAQ,+CAC1BA,EAAQ,oDACRA,EAAQ,0DACR1tC,OAAOstC,MAAQA,GACfttC,OAAOstC,MAAMC,qB,k9ECRMh4B,E,WAOnB,gBAAa7T,EAAYyhC,GAAc,iBAErC7iC,KAAK6iC,kBAAwC,IAAjBA,GAAuCA,EACnE7iC,KAAKoB,WAAaA,EAGlBpB,KAAK8e,WAAa,IAAIC,IACtB/e,KAAKqtC,aAAe,wBACpBrtC,KAAK0f,QAAU1f,KAAKoB,WAAWY,QAAQ0J,UAAU2H,OACjDrT,KAAK8V,QAAU,IAAIiG,IACnB/b,KAAKwf,OAASxf,KAAKoB,WAAWY,QAAQ0J,UAAUwH,M,mEAcpCo6B,EAAIC,EAAIC,EAAIC,EAAIC,EAAWC,EAAYC,GAEnD,IAAI3vC,EAAIyD,KAAK6lB,KAAK7lB,KAAKmsC,IAAIJ,EAAKF,EAAI,GAAK7rC,KAAKmsC,IAAIP,EAAKE,EAAI,IACvDM,EAAQpsC,KAAK8/B,MAAMiM,EAAKF,EAAIC,EAAKF,GACjCS,GAAc,EAAIL,GAAa,EAI/BM,EAAK,CAACR,EAAIC,GACVQ,EAAK,CAACX,GAJVI,GAAwB,GAIGE,EAAYlsC,KAAK+lB,IAAIqmB,EAAQpsC,KAAKgmB,GAAK,GAAI6lB,EAAKG,EAAYE,EAAYlsC,KAAKggC,IAAIoM,EAAQpsC,KAAKgmB,GAAK,IAC1HwmB,EAAK,CAACD,EAAG,GAAKN,EAAajsC,KAAK+lB,IAAIqmB,GAAS7vC,EAAGgwC,EAAG,GAAKN,EAAajsC,KAAKggC,IAAIoM,GAAS7vC,GACvFkwC,EAAK,CAACD,EAAG,GAAKH,EAAaH,EAAYlsC,KAAK+lB,IAAIqmB,EAAQpsC,KAAKgmB,GAAK,GAAIwmB,EAAG,GAAKH,EAAaH,EAAYlsC,KAAKggC,IAAIoM,EAAQpsC,KAAKgmB,GAAK,IAClI0mB,EAAK,CAACd,EAAKI,EAAYE,EAAYlsC,KAAK+lB,IAAIqmB,EAAQpsC,KAAKgmB,GAAK,GAAI6lB,EAAKG,EAAYE,EAAYlsC,KAAKggC,IAAIoM,EAAQpsC,KAAKgmB,GAAK,IAC1H2mB,EAAK,CAACD,EAAG,GAAKT,EAAajsC,KAAK+lB,IAAIqmB,GAAS7vC,EAAGmwC,EAAG,GAAKT,EAAajsC,KAAKggC,IAAIoM,GAAS7vC,GAG3F,MAAO,CAACgwC,EAAIC,EAAIC,EAAIH,EAFX,CAACK,EAAG,GAAKN,EAAaH,EAAYlsC,KAAK+lB,IAAIqmB,EAAQpsC,KAAKgmB,GAAK,GAAI2mB,EAAG,GAAKN,EAAaH,EAAYlsC,KAAKggC,IAAIoM,EAAQpsC,KAAKgmB,GAAK,IAE1G2mB,EAAID,K,kDAQnBnU,GACb,IAAIqU,EACJ,IAEE,OADAA,GAAM,IAAIC,WAAYC,gBAAgBvU,EAAK,aACpCvwB,MAAM0gB,KAAKkkB,EAAIG,YAAYC,MAAK,SAAAvJ,GAAI,OAAsB,IAAlBA,EAAKwJ,YACpD,MAAO3lC,GACPwP,QAAQW,MAAM,wBAA0BnQ,EAAEsyB,Y,kDAO5Ct7B,KAAK0V,QAGL1V,KAAKoB,WAAWY,QAAQ0J,UAAUC,KAAK2E,MAAMC,OAAS,UAGtDvQ,KAAKoB,WAAWY,QAAQ0J,UAAU4oB,OAAO,IAAK,KAG9Ct0B,KAAKoB,WAAWY,QAAQ0J,UAAUmK,gBAAkB,EACpD7V,KAAKoB,WAAWY,QAAQ0J,UAAUgK,QAClC1V,KAAKoB,WAAWY,QAAQ0J,UAAUoX,OAAO9iB,KAAK8e,YAE9C,IACEhT,SAASjD,KAAKyH,MAAMuF,gBAAkB,UACtC,MAAO7M,GACPwP,QAAQgP,IAAI,sCAAuCxe,M,0CAS5C4lC,GAET,QAA2B,IAAfA,EACV,OAAO5uC,KAAK8V,QAEZ,IAAMgG,EAAS,IAAIC,IAanB,OAXAzf,OAAOuyC,OAAO/yB,EAAQ8yB,GAWf9yB,I,wDAWOgzB,EAAUzuB,EAAYC,EAAUyuB,GAEhD,IAAMtwB,EAAO3S,SAASC,cAAc,QACpC0S,EAAKnO,MAAM+P,WAAaA,GAAc,QACtC5B,EAAKnO,MAAMkQ,YAA2B,IAAbuuB,EAAqB,OAAS,SACvDtwB,EAAKnO,MAAMgQ,SAAW9O,OAAO8O,GAAY,KACzC7B,EAAKuwB,UAAYF,EAEjB,IAAM91B,EAAQlN,SAASC,cAAc,OACrCiN,EAAM1I,MAAM2jB,QAAU,eACtBjb,EAAM1I,MAAM2+B,WAAa,SAIzB,IAAMC,EAAMpjC,SAASC,cAAc,OACnCmjC,EAAIrR,OAAOpf,EAAMzF,GACjBlN,SAASjD,KAAKmD,YAAYkjC,GAG1B,IAEIC,EACAC,EAHElyC,EAAS,GAyBf,OAnBA8b,EAAM1I,MAAM++B,cAAgB,WAE5BF,EADOn2B,EAAMnG,wBACDO,IAAMtH,SAASjD,KAAKymC,UAEhCF,EADO3wB,EAAK5L,wBACAO,IAAMtH,SAASjD,KAAKymC,UAChCpyC,EAAOqyC,OAAS7tC,KAAKC,MAAMwtC,EAAOC,GAGlCp2B,EAAM1I,MAAM++B,cAAgB,SAE5BF,EADOn2B,EAAMnG,wBACDO,IAAMtH,SAASjD,KAAKymC,UAEhCF,EADO3wB,EAAK5L,wBACAO,IAAMtH,SAASjD,KAAKymC,UAChCpyC,EAAOmW,OAAS3R,KAAKC,MAAMwtC,EAAOC,GAClClyC,EAAOsyC,QAAUtyC,EAAOmW,OAASnW,EAAOqyC,OAExCzjC,SAASjD,KAAKoD,YAAYijC,GAGnBhyC,I,4CAQGigB,GACV,MAAI,CAAC,IAAK,WAAY,SAAStc,SAASsc,GAC/B,IACE,CAAC,IAAK,WAAY,QAAS,SAAU,OAAQ,UAAUtc,SAASsc,GAClE,IACE,CAAC,cAAe,aAAatc,SAASsc,GACxC,IACE,CAAC,IAAK,SAAU,MAAO,MAAMtc,SAASsc,GACxC,IAEA,M,oDAUKsyB,EAAUC,EAAWC,GAEnC,IAAIC,EAAe5vC,KAAK6vC,UAAUF,GAGlC,OAAQF,EAASd,UACf,KAAK,EAEH,OAAQc,EAASK,UACf,IAAK,IAEHF,EAAatxB,WAAY,EACzB,MACF,IAAK,KAEHoxB,EAAU/pC,IAAI0N,OAAUq8B,EAAU/pC,IAAI0N,OAAS,EAAKq8B,EAAU/pC,IAAI0N,OAASq8B,EAAUK,YACrFL,EAAU/pC,IAAIuN,MAASw8B,EAAUM,MAAQN,EAAU/pC,IAAIuN,MAASw8B,EAAUM,MAAQN,EAAU/pC,IAAIuN,MAChGw8B,EAAUx8B,MAASw8B,EAAUx8B,MAAQw8B,EAAU/pC,IAAIuN,MAASw8B,EAAUx8B,MAAQw8B,EAAU/pC,IAAIuN,MAC5Fw8B,EAAUO,MAAQP,EAAUO,MAAQP,EAAU/pC,IAAI0N,OAClDq8B,EAAUM,MAAQ,EAClBN,EAAUr8B,OAASq8B,EAAUr8B,OAASq8B,EAAU/pC,IAAI0N,OAEpDq8B,EAAUttB,KAAKzlB,KAAK+yC,EAAU/pC,KAC9B+pC,EAAU/pC,IAAM,CACd4pC,OAAQ,EACRr8B,MAAO,EACPG,OAAQ,EACRuR,cAAe,GACfsrB,gBAAiB,GACjBC,eAAgB,IAElB,MACF,IAAK,IAEHP,EAAarxB,aAAc,EAC3B,MACF,IAAK,OAEH,GAAIkxB,EAASW,WAAW/zC,OAAS,EAG/B,IAFA,IAAIiQ,EAASmjC,EAASW,WAAW,GAAGzxC,MAAM4F,MAAM,KAEvClH,EAAI,EAAGA,EAAIiP,EAAOjQ,OAAQgB,IAAK,CACtC,IAAIkC,EAAW+M,EAAOjP,GAAGuC,MAAM,EAAG0M,EAAOjP,GAAGurB,QAAQ,MAChDjqB,EAAQ2N,EAAOjP,GAAGuC,MAAM0M,EAAOjP,GAAGurB,QAAQ,KAAO,EAAGtc,EAAOjP,GAAGhB,QAElE,OAAQkD,GACN,IAAK,QACHqwC,EAAap0B,MAAQ7c,EACrB,MACF,IAAK,YACHixC,EAAavxB,UAAY1f,EACzB,MACF,IAAK,cACHixC,EAAaxxB,YAAczf,GAKnC,MACF,IAAK,IAEHixC,EAAalxB,gBAAiB,EAGlC,MACF,KAAK,EAEH,IAAI2xB,EAAY,CACdhwB,WAAYuvB,EAAaxxB,YACzBmC,WAAyC,IAA7BqvB,EAAarxB,YAAwB,SAAW,SAC5DiC,YAAwC,IAA3BovB,EAAatxB,UAAsB,OAAS,SACzDgC,SAAUsvB,EAAavxB,UACvBrC,KAAM4zB,EAAap0B,OAIjB80B,EAAS,GACTC,EAAc,IAAI5vB,IAAK8uB,EAASe,YAAaH,GACjDE,EAAYE,WAAU,EAAOH,GAG7B,IAAII,EAAY1wC,KAAK+kB,iBAAiB0qB,EAASe,YAAaZ,EAAaxxB,YAAawxB,EAAavxB,UAAWuxB,EAAatxB,WAG3HiyB,EAAYj0B,EAAIozB,EAAUM,MAC1BO,EAAYh0B,EAAImzB,EAAUO,MAC1BP,EAAUM,MAAQN,EAAUM,MAAQM,EAAOp9B,MAC3Cw8B,EAAU/pC,IAAIuN,MAASw8B,EAAUM,MAAQN,EAAU/pC,IAAIuN,MAASw8B,EAAUM,MAAQN,EAAU/pC,IAAIuN,MAChGw8B,EAAUx8B,MAASw8B,EAAUx8B,MAAQw8B,EAAU/pC,IAAIuN,MAASw8B,EAAUx8B,MAAQw8B,EAAU/pC,IAAIuN,MAC5Fw8B,EAAU/pC,IAAI0N,OAAWi9B,EAAOj9B,OAAS,EAAKq8B,EAAU/pC,IAAI0N,OAAUi9B,EAAOj9B,OAAS,EAAIq8B,EAAU/pC,IAAI0N,OACxGq8B,EAAU/pC,IAAI4pC,OAAUmB,EAAUnB,OAASG,EAAU/pC,IAAI4pC,OAAUmB,EAAUnB,OAASG,EAAU/pC,IAAI4pC,OACpGG,EAAUK,YAAcL,EAAU/pC,IAAI0N,OACtCq8B,EAAU/pC,IAAIif,cAAcjoB,KAAK4zC,GACjCb,EAAU/pC,IAAIuqC,gBAAgBvzC,KAAK+zC,GACnChB,EAAU/pC,IAAIwqC,eAAexzC,KAAKizC,EAAalxB,gBAKnD,IAAK,IAAIviB,EAAI,EAAGA,EAAIszC,EAAShB,WAAWpyC,OAAQF,IAC9C6D,KAAK2wC,eAAelB,EAAShB,WAAWtyC,GAAIuzC,EAAWE,EAAezzC,IAAOszC,EAAShB,WAAWpyC,OAAS,K,wDAS5F6W,EAAOG,GAEvBrT,KAAKoB,WAAWY,QAAQ8c,WAAWxO,MAAM4C,MAAQA,EAAQ,KACzDlT,KAAKoB,WAAWY,QAAQ8c,WAAWxO,MAAM+C,OAASA,EAAS,O,kCActDi6B,EAAIC,EAAIC,EAAIC,EAAIC,EAAWC,EAAYC,EAAWgB,GAEvD,IAAIgC,EAAS5wC,KAAK6wC,aAAavD,EAAIC,EAAIC,EAAIC,EAAIC,EAAWC,EAAYC,GAGtE5tC,KAAK8wC,QAAQF,EAAQhC,K,oCAUftyB,EAAGC,EAAG/d,EAAGowC,GAEf,IAAIgB,EAAe5vC,KAAK6vC,UAAUjB,GAG9BpyB,OAAS,IAAIwC,IACjBxC,OAAOyC,UAAU2wB,EAAan0B,SAAUm0B,EAAap0B,MAAO,IAClC,IAAtBo0B,EAAa5zB,MACfQ,OAAOqD,UAAU+vB,EAAa75B,kBAC9ByG,OAAOu0B,WAAW,EAAG,EAAGvyC,GACxBge,OAAOuD,WAEPvD,OAAOu0B,WAAW,EAAG,EAAGvyC,GAE1Bge,OAAOF,EAAIA,EACXE,OAAOD,EAAIA,EAGXvc,KAAK8e,WAAWkB,SAASxD,U,kCAQpB3G,EAAiB+4B,GAEtB,IAAK,IAAIzyC,EAAI6D,KAAK8e,WAAW0H,SAASnqB,OAAS,EAAGF,GAAK,EAAGA,IACxD6D,KAAK8e,WAAW7S,YAAYjM,KAAK8e,WAAW0H,SAASrqB,M,gCASnD6Y,GACJhV,KAAK0V,QADO,mCAIQV,EAAO8J,WAAW0H,UAJ1B,IAIZ,2BAAgD,KAArCwqB,EAAqC,QAC9ChxC,KAAK8e,WAAWkB,SAASgxB,EAAMC,UALrB,iC,sCAiBL30B,EAAGC,EAAGG,EAAGC,EAAGiyB,GAEnB,IAAIgB,EAAe5vC,KAAK6vC,UAAUjB,GAG9BhyB,QAAU,IAAIoC,IAClBpC,QAAQqC,UAAU2wB,EAAan0B,SAAUm0B,EAAap0B,MAAO,IACnC,IAAtBo0B,EAAa5zB,MACfY,QAAQiD,UAAU+vB,EAAa75B,kBAC/B6G,QAAQs0B,YAAY,EAAG,EAAIx0B,EAAI,EAAKC,EAAI,GACxCC,QAAQmD,WAERnD,QAAQs0B,YAAY,EAAG,EAAIx0B,EAAI,EAAKC,EAAI,GAE1CC,QAAQN,EAAIA,EAAKI,EAAI,EACrBE,QAAQL,EAAIA,EAAKI,EAAI,EAGrB3c,KAAK8e,WAAWkB,SAASpD,W,oCAUnBN,EAAGC,EAAGjM,EAAOs+B,GAEnBt+B,OAA0B,IAAVA,EAAyB,UAAYA,EAGrD,IAAIs/B,EAAe5vC,KAAK6vC,UAAUjB,QAEjB,IAANtyB,IAEPA,GAD+B,IAA7Btc,KAAK8a,oBACH,EAEA9a,KAAKwf,OAAS,QAGL,IAANjD,IAEPA,GAD+B,IAA7Bvc,KAAK8a,oBACH,EAEA9a,KAAK0f,QAAU,GAIvB,IAAIjiB,EAAI,GAEwB,IAA5B6S,EAAMsY,QAAQ,SAChBnrB,EAAI,IACmC,IAA7B6S,EAAMsY,QAAQ,WAAgC,YAAVtY,EAC9C7S,EAAI,GACiC,IAA5B6S,EAAMsY,QAAQ,SACvBnrB,EAAI,EAEJuC,KAAKoB,WAAWY,QAAQmC,UAAUC,SAAS,kBAAoBkM,GAGjE,IAAIwL,EAAS,IAAIC,KACe,IAA3BzL,EAAMsY,QAAQ,SAA8B,YAAVtY,GACrCwL,EAAOq1B,OAAQ,EACfr1B,EAAOs1B,kBAAoBxB,EAAap0B,MACxCM,EAAOu1B,OAASzB,EAAap0B,MAC7Bxb,KAAK4c,QAAQN,EAAI7e,EAAG8e,EAAI9e,EAAG,EAAIA,EAAG,EAAIA,EAAGqe,GACzCA,EAAOs1B,kBAAoBxB,EAAa75B,iBACxC+F,EAAOu1B,OAASzB,EAAa75B,iBAC7B/V,KAAK4c,QAAQN,EAnBP,EAmBcC,EAnBd,EAmBqB,EAAO,EAAOT,KACH,IAA7BxL,EAAMsY,QAAQ,WACvB9M,EAAOq1B,OAAQ,EACfr1B,EAAOs1B,kBAAoBxB,EAAap0B,MACxCM,EAAOu1B,OAASzB,EAAap0B,MAC7Bxb,KAAK4c,QAAQN,EAAI7e,EAAG8e,EAAI9e,EAAG,EAAIA,EAAG,EAAIA,EAAGqe,KACJ,IAA5BxL,EAAMsY,QAAQ,UACvB9M,EAAOw1B,UAAY,EACnBx1B,EAAOu1B,OAASzB,EAAap0B,MAC7Bxb,KAAKyD,KAAK6Y,EAAGC,EAAI9e,EAAG6e,EAAGC,EAAI9e,EAAGqe,GAC9B9b,KAAKyD,KAAK6Y,EAAI7e,EAAG8e,EAAGD,EAAI7e,EAAG8e,EAAGT,IAE9B9b,KAAKoB,WAAWY,QAAQmC,UAAUC,SAAS,kBAAoBkM,K,kCAoB5DgM,EAAGC,EAAGU,EAAQC,EAAMC,EAAKC,EAAMC,EAAOC,EAAOC,EAAQC,EAAQC,GAElEN,EAAMnd,KAAKuxC,WAAWp0B,GAGtB,IAAMnI,EAASlJ,SAASC,cAAc,UACtCiJ,EAAO9B,MAAQkK,EACfpI,EAAO3B,OAAS+J,EAChB,IAAMo0B,EAAMx8B,EAAO2O,WAAW,MACxB8tB,EAAKD,EAAIE,aAAa,EAAG,EAAGt0B,EAAMA,GAGxCH,EAASvb,KAAKgmB,GAAKzK,GAAU,IAC7BM,EAASvd,KAAK8V,QAAQ67B,wBAAwBp0B,GAC9CC,EAASxd,KAAK8V,QAAQ67B,wBAAwBn0B,GAG9C,IAAK,IAAIo0B,EAAK,EAAGA,EAAKx0B,EAAMw0B,IAC1B,IAAK,IAAIC,EAAK,EAAGA,EAAKz0B,EAAMy0B,IAAM,CAEhC,IAAM5rB,EAAK2rB,EAAK,GAAMx0B,EAChBkJ,EAAKurB,EAAK,GAAMz0B,EAGhBxe,EAAI8C,KAAK8/B,MAAMlb,EAAIL,GAAMhJ,EACzBze,EAAIkD,KAAK6lB,KAAK7lB,KAAKmsC,IAAI5nB,EAAI,GAAKvkB,KAAKmsC,IAAIvnB,EAAI,IAC7CwrB,EAAKtzC,EAAIkD,KAAK+lB,IAAI7oB,GAClBmzC,EAAKvzC,EAAIkD,KAAKggC,IAAI9iC,GACpBozC,OAAC,EAGDC,EAAM,GAAM,GAAMvwC,KAAK+lB,IAAI,EAAM/lB,KAAKgmB,IAAMoqB,EAAK50B,EAAOI,IAK1D00B,EAFU,MAAR70B,EAEEzb,KAAKwwC,KAAK,GAAMxwC,KAAKmsC,IAAIiE,EAAKz0B,EAAO,GAAK,GAAM3b,KAAKmsC,IAAIkE,EAAK10B,EAAO,IACxD,MAARF,EACLzb,KAAK4lB,IAAI,GAAI,GAAMlK,EAAO5e,IAAM,GAAM4e,IACzB,MAARD,GACL3e,EAAI,GAAM4e,EACR,EAKF,EAIS,QAAXK,EACFw0B,EAAMA,EAAMD,EAAI,IAAO,EAAMA,GAE7BC,GAAYD,EAId,IAAMx2B,EAAQ,CACZhd,EAAG+e,EAAO/e,EAAIyzC,EAAMz0B,EAAOhf,GAAK,EAAMyzC,GACtCE,EAAG50B,EAAO40B,EAAIF,EAAMz0B,EAAO20B,GAAK,EAAMF,GACtC78B,EAAGmI,EAAOnI,EAAI68B,EAAMz0B,EAAOpI,GAAK,EAAM68B,IAIpC/d,EAAgB,EAAL0d,EAAUC,EAAKz0B,EAAO,EACrCq0B,EAAG51C,KAAKq4B,GAAY1Y,EAAMhd,EAC1BizC,EAAG51C,KAAKq4B,EAAW,GAAK1Y,EAAM22B,EAC9BV,EAAG51C,KAAKq4B,EAAW,GAAK1Y,EAAMpG,EAC9Bq8B,EAAG51C,KAAKq4B,EAAW,GAAK,IAK5Bsd,EAAIY,aAAaX,EAAI,EAAG,GAGxB,IAAI5tB,EAAS,IAAIE,IAAOC,IAAQoG,KAAKpV,IAGrC6O,EAAOvH,EAAIA,EAAKc,EAAO,EACvByG,EAAOtH,EAAIA,EAAKa,EAAO,EAGvBpd,KAAK8e,WAAWkB,SAAS6D,K,kCA2BpBwuB,EAAOv0B,EAAQxB,EAAGC,EAAGzJ,GAE1B,IAAI5U,EAAO8B,KAAKoB,WAAWY,QAAQgB,QAAQyF,cAAc4pC,GACrD5uB,EAAOzjB,KAAKoB,WAAWY,QAAQwY,MAAMtc,QACnB,IAAVulB,GACVzjB,KAAKoB,WAAWY,QAAQmC,UAAUC,SAAlC,WAA+CiuC,EAA/C,qBAEF,IAAI3uB,EAAMD,EAAK5nB,KAEXmZ,EAASlJ,SAASC,cAAc,UACpCiJ,EAAO9B,MAAQwQ,EAAIxQ,MACnB8B,EAAO3B,OAASqQ,EAAIrQ,OACV2B,EAAO2O,WAAW,MACxBC,UAAUF,EAAK,EAAG,GAEtB,IAAIG,EAAS,IAAIE,IAAOC,IAAQoG,KAAKpV,IAGrC6O,EAAO/Q,MAAMwJ,EAAIxJ,EACjB+Q,EAAO/Q,MAAMyJ,EAAIzJ,GAG8B,IAA3C,CAAC,EAAG,KAAK,EAAM,OAAO8V,QAAQ9K,IAChC+F,EAAOvH,EAAIA,EAAKuH,EAAO3Q,MAAQ,EAC/B2Q,EAAOtH,EAAIA,EAAKsH,EAAOxQ,OAAS,IAEhCwQ,EAAOvH,EAAIA,EACXuH,EAAOtH,EAAIA,GAIbvc,KAAK8e,WAAWkB,SAAS6D,K,gDAObziB,GAEZpB,KAAK0f,QAAUte,EAAW6B,KAAKoQ,OAC/BrT,KAAKwf,OAASpe,EAAW6B,KAAKiQ,MAG9B9R,EAAWY,QAAQ0J,UAAU4oB,OAAOt0B,KAAKwf,OAAQxf,KAAK0f,SAGtDte,EAAWY,QAAQ0J,UAAUgK,MAAM1V,KAAK8V,QAAQqJ,mBAAmB/d,EAAW6B,KAAK2f,WAAY,WAC/FxhB,EAAWY,QAAQ0J,UAAUmK,gBAAkB7V,KAAK8V,QAAQqJ,mBAAmB/d,EAAW6B,KAAK2f,WAAY,UAG3GxhB,EAAWY,QAAQ0J,UAAUC,KAAK2E,MAAMC,OAAS,OAGjDnP,EAAWY,QAAQgvB,QAAQshB,kBAG3BlxC,EAAWY,QAAQ0J,UAAUC,KAAKC,U,gCAW9B0hC,EAAIC,EAAIC,EAAIC,EAAImB,GAEpB,IAAIgB,EAAe5vC,KAAK6vC,UAAUjB,GAG9BnrC,KAAO,IAAIub,IACfvb,KAAKwb,UAAU2wB,EAAan0B,SAAUm0B,EAAap0B,MAAO,GAC1D/X,KAAK8b,OAAO,EAAG,GACf9b,KAAKgc,OAAO+tB,EAAKF,EAAIG,EAAKF,GAC1B9pC,KAAK6Y,EAAIgxB,EACT7pC,KAAK8Y,EAAIgxB,EAGTvtC,KAAK8e,WAAWkB,SAASvc,Q,kCAcpB6Y,EAAGC,EAAGY,EAAKC,EAAMC,EAAOE,EAAQC,EAAQC,GAE7CN,EAAMnd,KAAKuxC,WAAWp0B,GAGtB,IAAInI,EAASlJ,SAASC,cAAc,UACpCiJ,EAAO9B,MAAQkK,EACfpI,EAAO3B,OAAS+J,EAChB,IAAIo0B,EAAMx8B,EAAO2O,WAAW,MACxB8tB,EAAKD,EAAIE,aAAa,EAAG,EAAGt0B,EAAMA,GAGtCG,EAASvd,KAAK8V,QAAQ67B,wBAAwBp0B,GAC9CC,EAASxd,KAAK8V,QAAQ67B,wBAAwBn0B,GAG9C,IAAK,IAAIo0B,EAAK,EAAGA,EAAKx0B,EAAMw0B,IAC1B,IAAK,IAAIC,EAAK,EAAGA,EAAKz0B,EAAMy0B,IAAM,CAEhC,IAAMC,EAAKF,EAAK,GAAMx0B,EAChB20B,EAAKF,EAAK,GAAMz0B,EAChB5e,EAAIkD,KAAK6lB,KAAK7lB,KAAKmsC,IAAIiE,EAAI,GAAKpwC,KAAKmsC,IAAIkE,EAAI,IAC/CC,OAAC,EAEDC,EAAMvwC,KAAK2lB,SAGb2qB,EADU,MAAR70B,EACEzb,KAAKwwC,KAAK,GAAMxwC,KAAKmsC,IAAIiE,EAAKz0B,EAAO,GAAK,GAAM3b,KAAKmsC,IAAIkE,EAAK10B,EAAO,IACxD,MAARF,EACLzb,KAAK4lB,IAAI,GAAI,GAAMlK,EAAO5e,IAAM,GAAM4e,IACzB,MAARD,GACL3e,EAAI,GAAM4e,EACR,EAKF,EAIS,QAAXK,EACFw0B,EAAMA,EAAMD,EAAI,IAAO,EAAMA,GAE7BC,GAAYD,EAId,IAAMx2B,EAAQ,CACZhd,EAAG+e,EAAO/e,EAAIyzC,EAAMz0B,EAAOhf,GAAK,EAAMyzC,GACtCE,EAAG50B,EAAO40B,EAAIF,EAAMz0B,EAAO20B,GAAK,EAAMF,GACtC78B,EAAGmI,EAAOnI,EAAI68B,EAAMz0B,EAAOpI,GAAK,EAAM68B,IAIpC/d,EAAgB,EAAL0d,EAAUC,EAAKz0B,EAAO,EACrCq0B,EAAG51C,KAAKq4B,GAAY1Y,EAAMhd,EAC1BizC,EAAG51C,KAAKq4B,EAAW,GAAK1Y,EAAM22B,EAC9BV,EAAG51C,KAAKq4B,EAAW,GAAK1Y,EAAMpG,EAC9Bq8B,EAAG51C,KAAKq4B,EAAW,GAAK,IAK5Bsd,EAAIY,aAAaX,EAAI,EAAG,GAGxB,IAAI5tB,EAAS,IAAIE,IAAOC,IAAQoG,KAAKpV,IAGrC6O,EAAOvH,EAAIA,EAAKc,EAAO,EACvByG,EAAOtH,EAAIA,EAAKa,EAAO,EAGvBpd,KAAK8e,WAAWkB,SAAS6D,K,sCAQlB0uB,EAAW3D,GAMlB,IAJA,IAAIgB,EAAe5vC,KAAK6vC,UAAUjB,GAG9BnrB,EAAO,GACFtnB,EAAI,EAAGA,EAAIo2C,EAAUl2C,OAAQF,IACpCsnB,EAAK9mB,KAAK41C,EAAUp2C,GAAG,IACvBsnB,EAAK9mB,KAAK41C,EAAUp2C,GAAG,IAEzBsnB,EAAK9mB,KAAK41C,EAAU,GAAG,IACvB9uB,EAAK9mB,KAAK41C,EAAU,GAAG,IAGvB,IAAIzB,QAAU,IAAI9xB,IAClB8xB,QAAQ7xB,UAAU2wB,EAAan0B,SAAUm0B,EAAap0B,MAAO,IACnC,IAAtBo0B,EAAa5zB,MAAe80B,QAAQjxB,UAAU+vB,EAAa75B,kBAC/D+6B,QAAQ0B,YAAY/uB,IACM,IAAtBmsB,EAAa5zB,MAAe80B,QAAQ/wB,UAGxC/f,KAAK8e,WAAWkB,SAAS8wB,W,2EAcrBx0B,EAAGC,EAAGG,EAAGC,EAAGiyB,GAEhB,IAAIgB,EAAe5vC,KAAK6vC,UAAUjB,GAE9BhvB,EAAY,IAAIZ,IACpBY,EAAUX,UAAU2wB,EAAan0B,SAAUm0B,EAAap0B,MAAO,IACrC,IAAtBo0B,EAAa5zB,MACf4D,EAAUC,UAAU+vB,EAAa75B,kBACjC6J,EAAUE,SAAS,EAAG,EAAGpD,EAAGC,GAC5BiD,EAAUG,WAEVH,EAAUE,SAAS,EAAG,EAAGpD,EAAGC,GAE9BiD,EAAUtD,EAAIA,EACdsD,EAAUrD,EAAIA,EAGdvc,KAAK8e,WAAWkB,SAASJ,K,kCASzB,IAAIxC,KAAO,CACTlK,MAAOlT,KAAKwf,OACZnM,OAAQrT,KAAK0f,SAEf,OAAOtC,O,gCAQHhc,GAEJA,OAAoC,IAAfA,EAA8BA,EAAapB,KAAKoB,WAGrEpB,KAAKoB,WAAW+yB,eAAiBn0B,KAGjCA,KAAK8e,WAAWhM,MAAMwJ,EAAItc,KAAKoB,WAAWmzB,SAC1Cv0B,KAAK8e,WAAWhM,MAAMyJ,EAAIvc,KAAKoB,WAAWozB,SAG1Cx0B,KAAKoB,WAAWY,QAAQ0J,UAAUmK,gBAAkB7V,KAAK8V,QAAQs7B,kBACjE,IACE,IAAMpzC,EAAIgC,KAAK8V,QAAQ28B,IACvB3mC,SAASjD,KAAKyH,MAAMuF,gBAApB,cAA6C7X,EAAEQ,EAA/C,YAAoDR,EAAEm0C,EAAtD,YAA2Dn0C,EAAEoX,EAA7D,KACA,MAAOpM,GACPwP,QAAQW,MAAMnQ,GAKhB,OAHAhJ,KAAKoB,WAAWY,QAAQ0J,UAAUoX,OAAO9iB,KAAK8e,YAG5B,MAAd1d,EACKA,EAAWsB,MAAMc,OAEjB,O,gCAaLkvC,EAAK50B,EAAQxB,EAAGC,EAAGiC,EAAMowB,GAE7B,IAAMgB,EAAe5vC,KAAK6vC,UAAUjB,GAIpC,GAAc,QAATpwB,GAAoBxe,KAAK2yC,cAAcD,GAAO,CAEjD,IAAMhD,EAAY,CAChBkD,cAAehD,EACfv8B,OAAQ,EACR1N,IAAK,CACH4pC,OAAQ,EACRl8B,OAAQ,EACRuR,cAAe,GACfsrB,gBAAiB,GACjBC,eAAgB,GAChBj9B,MAAO,GAETkP,KAAM,GACNtG,OAAQ,GACR5I,MAAO,EACP88B,MAAO,EACPC,MAAO,GAIHf,EAAMpjC,SAASC,cAAc,OACnCD,SAASjD,KAAKmD,YAAYkjC,GAC1BA,EAAI5+B,MAAM+P,WAAauvB,EAAaxxB,YACpC8wB,EAAI5+B,MAAMgQ,SAAW9O,OAAOo+B,EAAavxB,WAAa,KACtD6wB,EAAI5+B,MAAMkQ,YAAyC,IAA3BovB,EAAatxB,UAAsB,OAAS,SACpE4wB,EAAI5+B,MAAM2+B,WAAa,SACvBC,EAAI5+B,MAAM2jB,QAAU,eACpBib,EAAI5+B,MAAMuiC,WAAa,SACvB3D,EAAIF,UAAY0D,EAGhB1yC,KAAK2wC,eAAezB,EAAKQ,EAAWE,GAGpC9jC,SAASjD,KAAKoD,YAAYijC,GAGiB,IAAvCQ,EAAU/pC,IAAIif,cAAcvoB,SAC9BqzC,EAAUr8B,OAASq8B,EAAUr8B,OAASq8B,EAAU/pC,IAAI0N,OACpDq8B,EAAUttB,KAAKzlB,KAAK+yC,EAAU/pC,MAIhC+pC,EAAUO,MAAQ,EAClB,IAAK,IAAI9zC,EAAI,EAAGA,EAAIuzC,EAAUttB,KAAK/lB,OAAQF,IAAK,CAE9C,IAAK,IAAIkB,EAAI,EAAGA,EAAIqyC,EAAUttB,KAAKjmB,GAAGyoB,cAAcvoB,OAAQgB,IAAK,CAE/D,IAAMmmB,EAASksB,EAAUttB,KAAKjmB,GAAGozC,OAASG,EAAUttB,KAAKjmB,GAAG+zC,gBAAgB7yC,GAAGkyC,OAC/EG,EAAUttB,KAAKjmB,GAAGyoB,cAAcvnB,GAAGkf,EAAImzB,EAAUO,MAAQzsB,GAGV,IAA3C,CAAC,EAAG,KAAK,EAAM,OAAOoF,QAAQ9K,IAChC4xB,EAAUttB,KAAKjmB,GAAGyoB,cAAcvnB,GAAGif,EAAIozB,EAAUttB,KAAKjmB,GAAGyoB,cAAcvnB,GAAGif,EAAIA,EAAKozB,EAAUttB,KAAKjmB,GAAG+W,MAAQ,EAC7Gw8B,EAAUttB,KAAKjmB,GAAGyoB,cAAcvnB,GAAGkf,EAAImzB,EAAUttB,KAAKjmB,GAAGyoB,cAAcvnB,GAAGkf,EAAIA,EAAKmzB,EAAUr8B,OAAS,IAEtGq8B,EAAUttB,KAAKjmB,GAAGyoB,cAAcvnB,GAAGif,EAAIozB,EAAUttB,KAAKjmB,GAAGyoB,cAAcvnB,GAAGif,EAAIA,EAC9EozB,EAAUttB,KAAKjmB,GAAGyoB,cAAcvnB,GAAGkf,EAAImzB,EAAUttB,KAAKjmB,GAAGyoB,cAAcvnB,GAAGkf,EAAIA,EAAI,IAIxC,IAAxCmzB,EAAUttB,KAAKjmB,GAAGg0C,eAAe9yC,IACnC2C,KAAKyD,KAAKisC,EAAUttB,KAAKjmB,GAAGyoB,cAAcvnB,GAAGif,EAC3CozB,EAAUttB,KAAKjmB,GAAGyoB,cAAcvnB,GAAGkf,EAAImzB,EAAUttB,KAAKjmB,GAAG+zC,gBAAgB7yC,GAAGkyC,OAAS,EACrFG,EAAUttB,KAAKjmB,GAAGyoB,cAAcvnB,GAAGif,EAAIozB,EAAUttB,KAAKjmB,GAAGyoB,cAAcvnB,GAAG6V,MAC1Ew8B,EAAUttB,KAAKjmB,GAAGyoB,cAAcvnB,GAAGkf,EAAImzB,EAAUttB,KAAKjmB,GAAG+zC,gBAAgB7yC,GAAGkyC,OAAS,EACrFK,GAIJ5vC,KAAK8e,WAAWkB,SAAS0vB,EAAUttB,KAAKjmB,GAAGyoB,cAAcvnB,IAE3DqyC,EAAUO,MAAQP,EAAUO,MAAQP,EAAUttB,KAAKjmB,GAAGkX,YAEnD,CAEL,IAAIg9B,EAAY,CACdhwB,WAAYuvB,EAAaxxB,YACzBkC,SAAUsvB,EAAavxB,UACvBmC,YAAwC,IAA3BovB,EAAatxB,UAAsB,OAAS,SACzDtC,KAAM4zB,EAAap0B,OAEjB+0B,EAAc,IAAI5vB,IAAK+xB,EAAKrC,IAEe,IAA3C,CAAC,EAAG,KAAK,EAAM,OAAOznB,QAAQ9K,IAChCyyB,EAAYj0B,EAAIA,EAAKi0B,EAAYr9B,MAAQ,EACzCq9B,EAAYh0B,EAAIA,EAAKg0B,EAAYl9B,OAAS,IAE1Ck9B,EAAYj0B,EAAIA,EAChBi0B,EAAYh0B,EAAIA,GAIlBvc,KAAK8e,WAAWkB,SAASuwB,M,iCAvZ3B,OAAOvwC,KAAK0f,U,gCAQZ,OAAO1f,KAAKwf,W,+1BChlBKzD,E,WAEnB,gBAAajc,GAAM,iBACjBE,KAAK8yC,sBAEiB,IAAVhzC,GACVE,KAAKoxC,kBAAoB,EACzBpxC,KAAK+yC,OAAQ,EACb/yC,KAAKqxC,OAAS,QACdrxC,KAAKmxC,OAAQ,EACbnxC,KAAKgzC,YAAa,EAClBhzC,KAAKizC,aAAe,QACpBjzC,KAAKkzC,cAAe,EACpBlzC,KAAKmzC,WAAa,GAClBnzC,KAAKozC,iBAAkB,EACvBpzC,KAAKqzC,OAAQ,EACbrzC,KAAKsxC,UAAY,IAEjBtxC,KAAK+V,iBAAmBjW,EAAKmD,KAAK1E,IAAI,aAAc,GACpDyB,KAAKipC,KAAOnpC,EAAKmD,KAAK1E,IAAI,OAAQ,MAClCyB,KAAKwb,MAAQ1b,EAAKmD,KAAK1E,IAAI,aAAc,SACzCyB,KAAKgc,KAAuC,QAAhClc,EAAKmD,KAAK1E,IAAI,OAAQ,MAClCyB,KAAKse,UAAYxe,EAAKmD,KAAK1E,IAAI,YAAa,MAC5CyB,KAAKoe,YAActe,EAAKmD,KAAK1E,IAAI,cAAe,SAChDyB,KAAKue,YAAcze,EAAKmD,KAAK1E,IAAI,cAAe,MAChDyB,KAAKqe,UAAYve,EAAKmD,KAAK1E,IAAI,YAAa,IAC5CyB,KAAK0e,eAAiB5e,EAAKmD,KAAK1E,IAAI,iBAAkB,MACtDyB,KAAKwe,KAAO1e,EAAKmD,KAAK1E,IAAI,OAAQ,MAClCyB,KAAKyb,SAAW3b,EAAKmD,KAAK1E,IAAI,WAAY,I,+EAU1Bid,GAClB,IAAI83B,EAAiB,EAErB,GAAuB,iBAAX93B,GAEV,IAAyD,IAArD,qCAAqC2gB,KAAK3gB,GAI1C83B,EAFmB,IAAjB93B,EAAMnf,OAES0K,SAAS,KAAOyU,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAI,IAEjFzU,SAAS,KAAOyU,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAI,SAE/F,QAA0D,IAA/Cxb,KAAKuzC,iBAAiB/3B,EAAMuhB,eAE5CuW,EAAiBvsC,SAAS/G,KAAKuzC,iBAAiB/3B,EAAMuhB,eAAgB,SACjE,GAAwC,QAApCvhB,EAAM5b,MAAM,EAAG,GAAGm9B,cAAyB,CAEpD,IAAI5nB,EAAIqG,EAAMjX,MAAM,KAAK,GAAGA,MAAM,KAAK,GAEnC6Q,GADJD,EAAIA,EAAE5Q,MAAM,MACFmB,KAAI,SAAU4W,GAWtB,MATI,iBAAiB6f,KAAK7f,IAExBA,EAAIA,EAAE1c,MAAM,GAAI,GAEhB0c,GADAA,EAAI5a,KAAKC,MAAOoF,SAASuV,GAAK,IAAO,MAC/BnI,SAAS,KAGfmI,EAAIvV,SAASuV,GAAGnI,SAAS,IAEN,IAAbmI,EAAEjgB,OAAgB,IAAMigB,EAAIA,KAEtCg3B,EAAiBvsC,SAAS,KAAOqO,EAAE4M,KAAK,WAEV,IAAvBhiB,KAAKwzC,OAAOh4B,KAGnB83B,EAFE93B,EAAQ,IAEQ,MAAYA,EAAU,IAAMA,EAASA,EAGtC,UAIrB,OAAO83B,I,sEAGgB93B,GAEvB,IAAI83B,EAAiBtzC,KAAKmf,mBAAmB3D,GAE7C,MAAO,CACLhd,EAAG80C,GAAkB,GACrBnB,EAAGmB,GAAkB,EAAI,IACzBl+B,EAAoB,IAAjBk+B,K,oCAoBC30C,GACN,OAAO80C,IAAU90C,K,0CAURA,GACT,OAAiD,IAA1C,EAAC,EAAM,MAAO,EAAG,KAAKiqB,QAAQjqB,K,sDAiMrCqB,KAAKuzC,iBAAmB,CACtB,UAAa,WACb,aAAgB,WAChB,KAAQ,WACR,WAAc,WACd,MAAS,WACT,MAAS,WACT,OAAU,WACV,MAAS,WACT,eAAkB,WAClB,KAAQ,WACR,WAAc,WACd,MAAS,WACT,UAAa,WACb,UAAa,WACb,WAAc,WACd,UAAa,WACb,MAAS,WACT,eAAkB,WAClB,SAAY,WACZ,QAAW,WACX,KAAQ,WACR,SAAY,WACZ,SAAY,WACZ,cAAiB,WACjB,SAAY,WACZ,UAAa,WACb,SAAY,WACZ,UAAa,WACb,YAAe,WACf,eAAkB,WAClB,WAAc,WACd,WAAc,WACd,QAAW,WACX,WAAc,WACd,aAAgB,WAChB,cAAiB,WACjB,cAAiB,WACjB,cAAiB,WACjB,cAAiB,WACjB,WAAc,WACd,SAAY,WACZ,YAAe,WACf,QAAW,WACX,QAAW,WACX,WAAc,WACd,UAAa,WACb,YAAe,WACf,YAAe,WACf,QAAW,WACX,UAAa,WACb,WAAc,WACd,KAAQ,WACR,UAAa,WACb,KAAQ,WACR,KAAQ,WACR,MAAS,WACT,YAAe,WACf,SAAY,WACZ,QAAW,WACX,aAAc,WACd,OAAU,WACV,MAAS,WACT,MAAS,WACT,SAAY,WACZ,cAAiB,WACjB,UAAa,WACb,aAAgB,WAChB,UAAa,WACb,WAAc,WACd,UAAa,WACb,qBAAwB,WACxB,UAAa,WACb,UAAa,WACb,WAAc,WACd,UAAa,WACb,YAAe,WACf,cAAiB,WACjB,aAAgB,WAChB,eAAkB,WAClB,eAAkB,WAClB,eAAkB,WAClB,YAAe,WACf,KAAQ,WACR,UAAa,WACb,MAAS,WACT,QAAW,WACX,OAAU,WACV,iBAAoB,WACpB,WAAc,WACd,aAAgB,WAChB,aAAgB,WAChB,eAAkB,WAClB,gBAAmB,WACnB,kBAAqB,WACrB,gBAAmB,WACnB,gBAAmB,WACnB,aAAgB,WAChB,UAAa,WACb,UAAa,WACb,SAAY,WACZ,YAAe,WACf,KAAQ,WACR,QAAW,WACX,MAAS,WACT,UAAa,WACb,OAAU,WACV,UAAa,WACb,OAAU,WACV,cAAiB,WACjB,UAAa,WACb,cAAiB,WACjB,cAAiB,WACjB,WAAc,WACd,UAAa,WACb,KAAQ,WACR,KAAQ,WACR,KAAQ,WACR,WAAc,WACd,OAAU,WACV,IAAO,WACP,UAAa,WACb,UAAa,WACb,YAAe,WACf,OAAU,WACV,WAAc,WACd,SAAY,WACZ,SAAY,WACZ,OAAU,WACV,OAAU,WACV,QAAW,WACX,UAAa,WACb,UAAa,WACb,UAAa,WACb,KAAQ,WACR,YAAe,WACf,UAAa,WACb,IAAO,WACP,KAAQ,WACR,QAAW,WACX,OAAU,WACV,UAAa,WACb,OAAU,WACV,MAAS,WACT,MAAS,WACT,WAAc,WACd,OAAU,WACV,YAAe,YAIjBvzC,KAAK0zC,eAAiB,CACpB,KAAQ,aACR,MAAS,cACT,KAAQ,kBACR,0BAA2B,sBAC3B,OAAU,qBACV,OAAU,oBACV,MAAS,iB,8BA1XX,MAAO,CACLl1C,EAAGwB,KAAKoxC,mBAAqB,GAC7Be,EAAGnyC,KAAKoxC,mBAAqB,EAAI,IACjCh8B,EAA4B,IAAzBpV,KAAKoxC,oB,iBAIH9rC,M,2CA4BP,OAAOtF,KAAKoxC,mB,iBAOQ9rC,GACpBtF,KAAKoxC,kBAAoBpxC,KAAKmf,mBAAmB7Z,EAAK,Y,+BAQtD,OAAOtF,KAAK+yC,O,iBAOJztC,GACRtF,KAAK+yC,MAAQ/yC,KAAK2zC,UAAUruC,K,gCAQ5B,OAAOtF,KAAKqxC,Q,iBAOH/rC,GACTtF,KAAKqxC,OAASrxC,KAAKmf,mBAAmB7Z,EAAK,Y,+BAQ3C,OAAOtF,KAAKmxC,O,iBAOJ7rC,GACRtF,KAAKmxC,OAAiD,IAAxC,CAAC,EAAG,KAAK,EAAM,OAAOvoB,QAAQtjB,K,oCAQ5C,OAAOtF,KAAKgzC,Y,iBAOC1tC,GACbtF,KAAKgzC,WAAahzC,KAAK2zC,UAAUruC,K,sCAQjC,OAAOtF,KAAKizC,c,iBAOG3tC,GACXA,KAAOtF,KAAK0zC,eACd1zC,KAAKizC,aAAejzC,KAAK0zC,eAAepuC,GAExCtF,KAAKizC,aAAe3tC,I,sCAStB,OAAOtF,KAAKkzC,c,iBAOG5tC,GACftF,KAAKkzC,aAAelzC,KAAK2zC,UAAUruC,K,oCAQnC,OAAOtF,KAAKmzC,Y,iBAOC7tC,GACRtF,KAAKwzC,OAAOluC,GAIftF,KAAKmzC,WAAa7tC,EAFlBtF,KAAKmzC,WAAazqC,OAAOpD,EAAI1F,MAAM,GAAI,M,yCAWzC,OAAOI,KAAKozC,iB,iBAOM9tC,GAClBtF,KAAKozC,gBAAkBpzC,KAAK2zC,UAAUruC,K,+BAQtC,OAAOtF,KAAKqzC,O,iBAOJ/tC,GACRtF,KAAKqzC,MAAQrzC,KAAK2zC,UAAUruC,K,mCAQ5B,OAAOtF,KAAKsxC,W,iBAOAhsC,GACPtF,KAAKwzC,OAAOluC,KACftF,KAAKsxC,UAAY,GAEnBtxC,KAAKsxC,UAAYhsC,M,u6BCrTfsuC,gB,yQACCpb,EAAQnd,GAIX,OAA6B,IAAzBmd,EAAO/3B,cACF+3B,EAAOnd,GAEe,iBAAjBmd,EAAOnd,GACjBmd,EAAOj6B,IAAI8c,EAAM,MAAM,EAAM,MAAM,GACnCmd,EAAOnd,O,mBAQM0tB,oB,WAKnB,6BAAa3nC,GAAY,uGACvBpB,KAAKoB,WAAaA,EAClBpB,KAAK6zC,WAAa,IAAIC,MAAM9zC,KAAKoB,WAAW6B,KAAM,IAAI2wC,iB,wIAOjDG,IAAI,eACL9wC,KAAOjD,KAAK6zC,WACZ5+B,OAAS,SAATA,SAAS,OAAM,IAAI++B,gDAAY,MAAK5yC,aACxC6yC,KAAKF,Q,wiCCrCYjJ,gB,WAKnB,yBAAa9c,GAAQ,mGAEnBhuB,KAAKgC,QAAUgsB,E,oIAQViR,UAEL,GAAI,wDAAUA,UACZ,OAAOA,SACF,GAAwB,iBAAbA,SAAuB,CAEvCA,SAAWj/B,KAAKgC,QAAQgB,QAAQrC,UAAUs+B,SAAU,MAAM,GAG1D,IAAIiV,WAAal0C,KAAKgC,QAAQgB,QAAQyF,cAAcw2B,UACpD,MAAmB,WAAfiV,YAEsB,UAAfA,YAGFD,KAAKC,YAId,OAAOl0C,KAAKgC,QAAQ2G,cAAcy2B,eAAeH,c","file":"js/osweb.1.3.8.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,3]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","/** Class representing a variable store. */\r\nexport default class VarStore {\r\n  /**\r\n   * Create a variable store object for all variables.\r\n   * @param {Object} item - The item to which the var_store belongs.\r\n   * @param {Object} parent - The parent global var_store.\r\n   */\r\n  constructor (item, parent) {\r\n    // Create and set private properties.\r\n    this._item = item\r\n    this._parent = parent\r\n    this._ignored_properties = [\r\n      '_item', '_parent', '_bypass_proxy', '_ignored_properties'\r\n    ]\r\n  };\r\n\r\n  /**\r\n   * Get the value of a variable from the store (or thje parent store).\r\n   * @param {String} variable - The name of the variable.\r\n   * @param {Boolean|Number|String} defaultValue - The default value for the variable.\r\n   * @param {Object} evaluate - The parent global var_store.\r\n   * @param {Object} valid - The parent global var_store.\r\n   * @param {Boolean} addQuotes - The add quotes toggle.\r\n   * @return {Boolean|Number|String} - The value of the given variable.\r\n   */\r\n  get (variable, defaultValue, evaluate, valid, addQuotes) {\r\n    // Set the optional arguments\r\n    defaultValue = (typeof defaultValue === 'undefined') ? null : defaultValue\r\n    evaluate = (typeof evaluate === 'undefined') ? true : evaluate\r\n    valid = (typeof valid === 'undefined') ? null : valid\r\n    var value = null\r\n    // Gets an experimental variable.\r\n    if (variable in this) {\r\n      this._bypass_proxy = true // Avoid Proxy feedback loop\r\n      if (typeof this[variable] === 'string' && evaluate === true) {\r\n        value = this._item.syntax.eval_text(this[variable], null, addQuotes)\r\n      } else {\r\n        value = this[variable]\r\n      }\r\n      this._bypass_proxy = false\r\n    }\r\n    // If value is not found locally, look in experiment object.\r\n    if (value == null && this._parent && variable in this._parent) {\r\n      this._parent._bypass_proxy = true // Avoid Proxy feedback loop\r\n      if (typeof this._parent[variable] === 'string' && evaluate === true) {\r\n        value = this._item.syntax.eval_text(this._parent[variable], null, addQuotes)\r\n      } else {\r\n        value = this._parent[variable]\r\n      }\r\n      this._parent._bypass_proxy = false\r\n    }\r\n    // Return function result.\r\n    return value\r\n  }\r\n\r\n  /**\r\n   * Check if the variable is part of the variable store.\r\n   * @param {String} variable - The name of the variable.\r\n   * @return {Boolean} - True if the variable is part of the store.\r\n   */\r\n  has (variable) {\r\n    return this.inspect().includes(variable)\r\n  }\r\n\r\n  /** Create a list of all avariables available.\r\n   * @return {Array} - Array containing names of all variables.\r\n   */\r\n  inspect () {\r\n    let variables = []\r\n    for (let variable in this) {\r\n      if (this._ignored_properties.includes(variable)) continue\r\n      variables.push(variable)\r\n    }\r\n    return variables\r\n  }\r\n\r\n  /** Create a list of value/name pairs.\r\n   * @return {Array} - Array containing name and values of all variables.\r\n   */\r\n  items () {\r\n    let pairs = {}\r\n    for (let variable of this.inspect()) {\r\n      pairs[variable] = this[variable]\r\n    }\r\n    return pairs\r\n  }\r\n\r\n  /**\r\n   * Set the value of a variable in the store.\r\n   * @param {String} variable - The name of the variable.\r\n   * @value {Boolean|Number|String} - Value of the variable to set.\r\n   */\r\n  set (variable, value) {\r\n    this[variable] = value\r\n  }\r\n\r\n  /**\r\n   * Unset (remove) a variable from the store.\r\n   * @param {String} variable - The name of the variable.\r\n   */\r\n  unset (variable) {\r\n    if (this.has(variable) === true) {\r\n      delete this[variable]\r\n    }\r\n  }\r\n\r\n  /** Create a list of variable names.\r\n   * @return {Array} - Array containing namesof all variables.\r\n   */\r\n  vars () {\r\n    return this.inspect()\r\n  }\r\n\r\n  /**\r\n   * Clears all experimental variables, except those that are explicitly\r\n   * preserved.\r\n   * @param {Array} preserve - An array of variable names to preserve.\r\n   */\r\n  clear (preserve) {\r\n    preserve = (typeof preserve === 'undefined') ? [] : preserve\r\n    for (let variable of this.inspect()) {\r\n      if (preserve.includes(variable)) continue\r\n      this.unset(variable)\r\n    }\r\n  }\r\n}\r\n","import {\r\n  constants\r\n} from '../system/constants.js'\r\n\r\n/** Class representing the clock system. */\r\nexport default class Clock {\r\n  /**\r\n   * Create a clock object which controls a pseudo real-time clock.\r\n   * @param {Object} experiment - The experiment  to which the clock belongs.\r\n   */\r\n  constructor (experiment) {\r\n    // Create and set private properties.\r\n    this._experiment = experiment // Parent experiment item.\r\n    this._startTime = -1 // Start time anchor of the experiment.\r\n  }\r\n\r\n  /** Initialize the clock. */\r\n  _initialize () {\r\n    // Set the absolute start time of the expeirment.\r\n    this._startTime = this._now()\r\n  }\r\n\r\n  /** Get an absolute time stamp from the system in ms.\r\n   * @return {Number} - The current absolute time in ms.\r\n   */\r\n  _now () {\r\n    // Get the current time stamp using the best available timing method.\r\n    if (window.performance.now) {\r\n      return Math.round(window.performance.now())\r\n    } else if (window.performance.webkitNow) {\r\n      return Math.round(window.performance.webkitNow())\r\n    } else {\r\n      return new Date().getTime()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sleeps (pauses) for a duration (in milliseconds).\r\n   * @param {Number} ms - The duration to wait in ms.\r\n   */\r\n  sleep (ms) {\r\n    // Sleeps (pauses) for a duration (in milliseconds).\r\n    if (this._experiment !== null) {\r\n      // Set the event processor.\r\n      this._experiment._runner._events._run(ms, constants.RESPONSE_DURATION, null)\r\n    }\r\n  }\r\n\r\n  /** Get the relative time from the start of an experiment.\r\n   * @return {Number} - The current relative time in ms.\r\n   */\r\n  time () {\r\n    // Gives the current timestamp in milliseconds.\r\n    if (this._startTime !== -1) {\r\n      return (this._now() - this._startTime)\r\n    } else {\r\n      return 0\r\n    }\r\n  }\r\n}\r\n","import { constants } from '../system/constants.js'\r\nimport VarStore from '../classes/var_store.js'\r\nimport Clock from '../backends/clock.js'\r\n\r\n/** Class representing an OpenSesame item. */\r\nexport default class Item {\r\n  constructor (experiment, name, script) {\r\n    // Create and set private properties.\r\n    this._parent = null\r\n    this._runner = (experiment.constructor.name === 'Runner') ? experiment : experiment._runner\r\n    this._status = constants.STATUS_NONE\r\n\r\n    // Create and set public properties.\r\n    this.clock = (experiment.constructor.name === 'Runner') ? new Clock(this) : experiment.clock\r\n    this.count = 0\r\n    this.experiment = (experiment.constructor.name === 'Runner') ? this : experiment\r\n    this.name = name\r\n    this.python_workspace = this._runner._pythonWorkspace\r\n    this.response_store = this._runner._responseStore\r\n    this.syntax = this._runner._syntax\r\n    this.vars = new VarStore(this, (experiment.constructor.name === 'Runner') ? null : this.experiment.vars)\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    // Adjust the status of the item.\r\n    this._status = constants.STATUS_FINALIZE\r\n\r\n    // Implements the complete phase of the item.\r\n    if (this._parent !== null && this._runner._events._currentItem) {\r\n      // Return the process control to the parent of the element.\r\n      this._runner._events._currentItem = this._parent\r\n      this._runner._events._currentItem.run()\r\n    }\r\n  }\r\n\r\n  /** Implements the prepare complete phase of an item. */\r\n  _prepare_complete () {\r\n  }\r\n\r\n  /** Implements the update phase of an item. */\r\n  _update (response) {\r\n  }\r\n\r\n  /**\r\n     * Pauses the object execution. !WARNING This function can not be implemented due the script blocking of javascript.\r\n     * @param {Number} pMs - The sleep time in milliseconds.\r\n     */\r\n  sleep (pMs) {\r\n    this.clock.sleep(pMs)\r\n  }\r\n\r\n  /**\r\n     * Returns the current time.\r\n     * @returns {Number} - The current time in ms from the start of the experiment.\r\n     */\r\n  time () {\r\n    // Returns the current time.\r\n    return this.clock.time()\r\n  }\r\n\r\n  /**\r\n     * Parses comments from a single definition line, indicated by # // or '.\r\n.    * @param {String} line - The definition line to be parsed.\r\n     * @returns {Boolean} - Return true if the commennt is succesfully parsed.\r\n     */\r\n  parse_comment (line) {\r\n    // Parses comments from a single definition line, indicated by # // or '.\r\n    line = line.trim()\r\n    if ((line.length > 0) && (line.charAt(0) === '#')) {\r\n      // Add comments to the array removing the first character.\r\n      this.comments.push(line.slice(1))\r\n      return true\r\n    } else if ((line.length > 1) && (line.charAt(0) === '/')) {\r\n      // Add comments to the array removing the first two characters.\r\n      this.comments.push(line.slice(2))\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Parses keywords  from a single definition line.\r\n     * @param {String} line - The definition line to be parsed.\r\n     * @param {Boolean} fromAscii - If true the source is ascii.\r\n     * @param {Boolean} evaluate - If true the keyword is evaluated.\r\n     * @returns {Object} - Returns the keywords found in the line.\r\n     */\r\n  parse_keyword (line, fromAscii, evaluate) {\r\n  }\r\n\r\n  /**\r\n     * Implements arbitrary line parsing, for item-specific requirements.\r\n     * @param {String} line - The definition line to be parsed.\r\n     */\r\n  parse_line (line) {\r\n  }\r\n\r\n  /**\r\n    * Reads a single variable from a single definition line.\r\n    * @param {String} line - The definition line to be parsed.\r\n    * @return {Boolean} - Return true if the variabel is succesfully parsed.\r\n    */\r\n  parse_variable (line) {\r\n    // Reads a single variable from a single definition line.\r\n    if (this.parse_comment(line)) {\r\n      return true\r\n    } else {\r\n      // Split the single line into a set of tokens.\r\n      const [cmd, args, kwargs] = this._runner._syntax.parse_cmd(line)\r\n      if (cmd === 'set') {\r\n        if (args.length !== 2) {\r\n          this._runner._debugger.addError('Failed to parse definition: ' + line)\r\n        } else {\r\n          this.vars.set(args[0], args[1])\r\n          return true\r\n        }\r\n      } else {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Parses the item from a definition string.\r\n.    * @param {String} script - The definition script line to be parsed.\r\n     */\r\n  from_string (script) {\r\n    // Parses the item from a definition string.\r\n    this.variables = {}\r\n    this.comments = []\r\n    this.reset()\r\n\r\n    // Split the string into an array of lines.\r\n    if (script !== null) {\r\n      var lines = script.split('\\n')\r\n      for (var i = 0; i < lines.length; i++) {\r\n        if ((lines[i] !== '') && (this.parse_variable(lines[i]) === false)) {\r\n          this.parse_line(lines[i])\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Implements the reset item variables method. */\r\n  reset () {\r\n  }\r\n\r\n  /** Implements the prepeare phase of an item. */\r\n  prepare () {\r\n    // Set the internal counter.\r\n    this.experiment.vars.set('count_' + this.name, this.count)\r\n    this.count++\r\n\r\n    // Set the status to initialize.\r\n    this._status = constants.STATUS_INITIALIZE\r\n\r\n    // For debugging.\r\n    this._runner._debugger.addMessage('prepare ' + this.name)\r\n\r\n    // Implements the complete phase of the item (to support blocking script in the prepare phase).\r\n    if (!(this.type === 'sequence' && this._parent.type === 'sequence')) {\r\n      if ((this._parent !== null) && (this.type !== 'feedback')) {\r\n        // Prepare cycle of parent.\r\n        this._parent._prepare_complete()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Set a onset time stamp before running an item.\r\n     * @param {Number} time - The time to store as onset time.\r\n     */\r\n  set_item_onset (time) {\r\n    // Set a timestamp for the item's executions\r\n    time = (typeof time === 'undefined') ? this.clock.time() : time\r\n\r\n    // Add the time stamp to the variable list.\r\n    this.experiment.vars.set('time_' + this.name, time)\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    this._runner._debugger.addMessage('run ' + this.name)\r\n  }\r\n}\r\n","/**\n * Loop utility functions\n */\nimport combos from 'combos'\nimport {\n  isInteger,\n  isArray,\n  isPlainObject,\n  isString,\n  isEmpty,\n  shuffle,\n  zip,\n  zipObject,\n  fromPairs,\n  pick,\n  reverse\n} from 'lodash'\n\n/**\n * Group matrix values by their variables names\n *\n * @param {Object} srcMatrix The source matrix to transform\n * @returns {Object}\n */\nexport function unstack (srcMatrix) {\n  if (!isArray(srcMatrix)) {\n    throw new TypeError('srcMatrix should be an array')\n  }\n  return Object.values(srcMatrix).reduce((acc, cycle) => {\n    for (const [key, val] of Object.entries(cycle)) {\n      if (key in acc) {\n        acc[key].push(val)\n      } else {\n        acc[key] = [val]\n      }\n    }\n    return acc\n  }, {})\n}\n\n/**\n * Convert grouped by variable matrix back to a normal matrix\n * @param {array} srcMatrix\n * @returns {array}\n */\nexport function stack (srcMatrix) {\n  if (!isPlainObject(srcMatrix)) {\n    throw new TypeError('srcMatrix should be an object')\n  }\n  const columns = Object.keys(srcMatrix)\n  const rows = zip(...Object.values(srcMatrix))\n  return rows.map(row => zipObject(columns, row))\n}\n\n/**\n * Creates a full factorial design of all the variable values in the matrix\n * @param {array} matrix The array of cycles to fully cross\n * @returns {array}\n */\nexport function fullfactorial (matrix) {\n  const result = combos(unstack(matrix))\n  return result\n}\n\n/**\n * Shuffles the order of the rows in the matrix. If a column/variable name\n * is specified, only the rows in this column are shuffled.\n *\n * @export\n * @param {array} matrix The matrix to be shuffled\n * @param {array} columns  Array containing the variable/column to be shuffled\n * @returns {array}\n */\nexport function shuffleVert (matrix, columns) {\n  if (!isArray(matrix)) {\n    throw new TypeError('matrix should be of type array')\n  }\n  if (typeof (columns) === 'undefined' || (isArray(columns) && columns.length === 0)) {\n    return shuffle(matrix)\n  } else if (!isArray(columns)) {\n    throw new TypeError('Invalid argument for columns passed to shuffleVert. Expects an array containing column names')\n  } else {\n    let grouped = unstack(matrix)\n    let cols = pick(grouped, columns)\n    cols = Object.entries(cols).reduce((prev, [key, values]) => {\n      prev[key] = shuffle(values)\n      return prev\n    }, {})\n    return stack({ ...grouped, ...cols })\n  }\n}\n\n/**\n * Shuffles the matrix horizontally; shuffle the values of the columns\n * If column names are specified, only these will be shuffled\n *\n * @export\n * @param {array} matrix\n * @param {array} columns\n * @returns {array}\n */\nexport function shuffleHoriz (matrix, columns) {\n  if (!isArray(matrix)) {\n    throw new TypeError('matrix should be of type array')\n  }\n  if (typeof columns === 'undefined') columns = []\n  if (!isArray(columns)) {\n    throw new TypeError('Invalid argument specified to shuffleHoriz. Expects an array that optionally contains column names to shuffle')\n  }\n  return Object.values(matrix).map(row => {\n    const vars = columns.length === 0\n      ? row\n      : pick(row, columns)\n    const keys = Object.keys(vars)\n    let vals = Object.values(vars)\n    vals = shuffle(vals)\n    const res = fromPairs(zip(keys, vals))\n    return { ...row, ...res }\n  })\n}\n\n/**\n * Sorts only the specified columns of the matrix\n *\n * @export\n * @param {array} matrix\n * @param {string} col\n * @returns array\n */\nexport function sortCol (matrix, col) {\n  if (!isArray(matrix)) {\n    throw new TypeError('matrix should be of type array')\n  }\n  if (!isString(col) || col === '') {\n    throw new Error('Invalid argument specified to sortCol. Expects a column name')\n  }\n  const grouped = unstack(matrix)\n  grouped[col].sort()\n  return stack(grouped)\n}\n\n/**\n * Reverses the matrix order\n * If column names are specified, only their orders are reversed\n * @export\n * @param {array} matrix\n * @param {array} columns\n * @returns {array}\n */\nexport function reverseRows (matrix, columns) {\n  if (!isArray(matrix)) {\n    throw new TypeError('matrix should be of type array')\n  }\n  if (typeof columns === 'undefined') columns = []\n  if (!isArray(columns)) {\n    throw new TypeError('Invalid argument specified to reverseRows. Expects an array containing a column name')\n  }\n  if (columns.length === 0) {\n    return reverse(matrix)\n  } else {\n    let grouped = unstack(matrix)\n    let cols = pick(grouped, columns)\n    if (isEmpty(cols)) {\n      throw new ReferenceError(`one or more of ${columns} were not found in the matrix`)\n    }\n    cols = Object.entries(cols).reduce((prev, [key, values]) => {\n      prev[key] = reverse(values)\n      return prev\n    }, {})\n    return stack({ ...grouped, ...cols })\n  }\n}\n\n/**\n * Rolls the matrix with the specified distance\n *\n * @export\n * @param {array} matrix\n * @param {number} amount\n * @param {string} column\n * @returns array\n */\nexport function roll (matrix, amount, column) {\n  if (!isArray(matrix)) {\n    throw new TypeError('matrix should be of type array')\n  }\n  // operate on a copy of the array to preserve the original\n  matrix = [...matrix]\n\n  amount = parseInt(amount)\n  if (!isInteger(amount)) {\n    throw new TypeError(`amount needs to be an integer, was ${amount}`)\n  }\n\n  if (!column) {\n    return rollN(matrix, amount)\n  }\n\n  if (!isString(column)) {\n    throw new TypeError(`column expects a string, was ${column}`)\n  } else {\n    let grouped = unstack(matrix)\n    if (!grouped.hasOwnProperty(column)) {\n      throw new ReferenceError(`Could not find column ${column} in matrix`)\n    }\n    grouped[column] = rollN(grouped[column], amount)\n    return stack(grouped)\n  }\n}\n\n/**\n * Roll array contents forward or backward by the specified amount\n *\n * @param {array} list\n * @param {number} amount\n * @returns {array}\n */\nfunction rollN (list, amount) {\n  if (amount > 0) {\n    for (let i = 0; i < amount; i++) {\n      list.unshift(list.pop())\n    }\n  } else {\n    for (let i = 0; i > amount; i--) {\n      list.push(list.shift())\n    }\n  }\n  return list\n}\n\n/**\n * Duplicate (or remove) rows depending on the specified weight parameter\n *\n * @param {array} matrix The matrix containing the data\n * @param {string} weightCol The colom to use for weight values\n */\nexport function weight (matrix, weightCol) {\n  if (!isArray(matrix)) {\n    throw new TypeError('matrix should be of type array')\n  }\n  if (!isString(weightCol)) {\n    throw new TypeError('Invalid argument passed to weight. Expects a column name')\n  }\n  if (!matrix[0].hasOwnProperty(weightCol)) {\n    throw new ReferenceError(`Column '${weightCol}' not found in matrix`)\n  }\n  return matrix.reduce((result, item) => {\n    const weight = parseInt(item[weightCol])\n    if (!isInteger(weight)) {\n      throw new TypeError('Specified weight value is not an integer')\n    }\n    for (let i = 0; i < weight; i++) {\n      result.push(item)\n    }\n    return result\n  }, [])\n}\n","import {\r\n  isNumber,\r\n  isArray,\r\n  shuffle,\r\n  sortBy\r\n} from 'lodash'\r\n\r\nimport {\r\n  constants\r\n} from '../system/constants.js'\r\nimport Item from './item.js'\r\n\r\nimport {\r\n  fullfactorial,\r\n  shuffleVert,\r\n  shuffleHoriz,\r\n  sortCol,\r\n  reverseRows,\r\n  roll,\r\n  weight\r\n} from '../util/matrix'\r\n\r\n/**\r\n * Class representing a sequence item.\r\n * @extends Item\r\n */\r\nexport default class Loop extends Item {\r\n  /**\r\n   * Create an experiment item which controls the OpenSesame experiment.\r\n   * @param {Object} experiment - The experiment item to which the item belongs.\r\n   * @param {String} name - The unique name of the item.\r\n   * @param {String} script - The script containing the properties of the item.\r\n   */\r\n  constructor (experiment, name, script) {\r\n    // Inherited create.\r\n    super(experiment, name, script)\r\n\r\n    // Definition of public properties.\r\n    this.description = 'Repeatedly runs another item'\r\n    this.matrix = null\r\n    this._cycles = []\r\n\r\n    // Definition of private properties.\r\n    this._break_if = ''\r\n    this._cycles = []\r\n    this._index = 0\r\n    this._keyboard = null\r\n    this._operations = []\r\n    this._initialized = false\r\n\r\n    // Process the script.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    this._status = constants.STATUS_FINALIZE\r\n    super._complete()\r\n  }\r\n\r\n  /**\r\n   * Scans the provided list of argument for variables and retrieves them if found.\r\n   * The function works recursively and thus also parses elements inside arrays that are part of\r\n   * args.\r\n   *\r\n   * @param {array} args The list of arguments to parse.\r\n   * @returns {array} The parsed arguments list\r\n   */\r\n  _eval_args (args) {\r\n    if (!isArray(args)) return args\r\n    return args.map( el => {\r\n      if (isArray(el)) {\r\n        return this._eval_args(el)\r\n      } else {\r\n        return this._runner._syntax.eval_text(el)\r\n       }\r\n    })\r\n  }\r\n\r\n  /** Reset all item variables to their default value. */\r\n  reset () {\r\n    this.matrix = []\r\n    this.vars.cycles = 1\r\n    this.vars.repeat = 1\r\n    this.vars.skip = 0\r\n    this.vars.offset = 'no'\r\n    this.vars.order = 'random'\r\n    this.vars.item = ''\r\n    this.vars.break_if = 'never'\r\n    this._cycles = []\r\n    this._index = 0\r\n    this._operations = []\r\n    this._initialized = false\r\n  }\r\n\r\n  /**\r\n   * Parse a definition string and retrieve all properties of the item.\r\n   * @param {String} script - The script containing the properties of the item.\r\n   */\r\n  from_string (script) {\r\n    // Creates a loop from a definition in a string.\r\n    this.comments = []\r\n    this.variables = {}\r\n    this.reset()\r\n\r\n    // Split the string into an array of lines.\r\n    if (script != null) {\r\n      const lines = script.split('\\n')\r\n      for (let i = 0; i < lines.length; i++) {\r\n        if ((lines[i] !== '') && (this.parse_variable(lines[i]) === false)) {\r\n          const [instruction, ...params] = this.syntax.split(lines[i])\r\n\r\n          switch (instruction) {\r\n            case 'run':\r\n              if (params.length > 0) this.vars.item = params[0]\r\n              break\r\n            case 'setcycle':\r\n              if (params.length <= 2) {\r\n                this._runner._debugger.addError(`Incorrect setcycle command in item ${this.name}`)\r\n                break\r\n              }\r\n              const cycle = params[0]\r\n              const name = params[1]\r\n              let value = this.syntax.remove_quotes(params[2])\r\n              // Check if the value is numeric\r\n              value = isNumber(value) ? Number(value) : value\r\n              // If a python expression, convert to javascript.\r\n              if (value[0] === '=') {\r\n                // Parse the python statement.\r\n                value = this._runner._pythonParser._prepare(value.slice(1))\r\n                if (value !== null) {\r\n                  value = value.body[0]\r\n                }\r\n              }\r\n              if (this.matrix[cycle] === undefined) {\r\n                this.matrix[cycle] = {}\r\n              }\r\n              this.matrix[cycle][name] = value\r\n              break\r\n            case 'fullfactorial':\r\n              this._operations.push([fullfactorial, []])\r\n              // this.matrix = fullfactorial(this.matrix)\r\n              break\r\n            case 'shuffle':\r\n              this._operations.push([shuffleVert, [params]])\r\n              // this.matrix = shuffleVert(this.matrix, params)\r\n              break\r\n            case 'shuffle_horiz':\r\n              this._operations.push([shuffleHoriz, [params]])\r\n              // this.matrix = shuffleHoriz(this.matrix, params)\r\n              break\r\n            case 'slice':\r\n              this._operations.push([(matrix, args) => matrix.slice(...args), [params]])\r\n              // this.matrix = this.matrix.slice(...params)\r\n              break\r\n            case 'sort':\r\n              this._operations.push([sortCol, [...params]])\r\n              // this.matrix = sortCol(this.matrix, ...params)\r\n              break\r\n            case 'sortby':\r\n              this._operations.push([sortBy, [params]])\r\n              // this.matrix = sortBy(this.matrix, params)\r\n              break\r\n            case 'reverse':\r\n              this._operations.push([reverseRows, [params]])\r\n              // this.matrix = reverseRows(this.matrix, params)\r\n              break\r\n            case 'roll':\r\n              this._operations.push([roll, [...params]])\r\n              // this.matrix = roll(this.matrix, ...params)\r\n              break\r\n            case 'weight':\r\n              this._operations.push([weight, [...params]])\r\n              // this.matrix = weight(this.matrix, ...params)\r\n              break\r\n          }\r\n        }\r\n      }\r\n      // Set the number of cycles to the length of the generated matrix\r\n      this.vars.cycles = this.matrix.length\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prepares the variables for one single cycle within the loop.\r\n   * @param {Number} cycle -The cycle to apply.\r\n   */\r\n  apply_cycle (cycle) {\r\n    // Sets all the loop variables according to the cycle.\r\n    if (cycle in this.matrix) {\r\n      for (const variable in this.matrix[cycle]) {\r\n        // Get the value of the variable.\r\n        let value = this.matrix[cycle][variable]\r\n\r\n        // Check for python expression.\r\n        if (typeof value === 'object') {\r\n          // value contains ast tree, run the parser.\r\n          try {\r\n            // Evaluate the expression\r\n            value = this._runner._pythonParser._runstatement(value)\r\n          } catch (e) {\r\n            // Error during evaluation.\r\n            this._runner._debugger.addError(\r\n              'Failed to evaluate expression in in loop item: ' + this.name + ' (' + value + ')')\r\n          }\r\n        } else {\r\n          // Evaluate variabels potentially available in value.\r\n          value = this._runner._syntax.eval_text(value)\r\n        }\r\n        // Set the variable.\r\n        this.experiment.vars.set(variable, value)\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n\r\n    // Make sure the item to run exists.\r\n    if (this.experiment.items._items[this.vars.item] === 'undefined') {\r\n      this._runner._debugger.addError('Could not find an item which is called by loop item: ' +\r\n      this.name + ' (' + this.vars.item + ')')\r\n    }\r\n    this._initialized = false\r\n    super.prepare()\r\n    this.set_item_onset()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    super.run()\r\n\r\n    if (!this._initialized) {\r\n      // Perform the operations\r\n      this.matrix = this._operations.reduce((mtrx, [func, args]) =>\r\n        func(mtrx, ...this._eval_args(args)), this.matrix)\r\n      // Set the number of cycles to the length of the generated matrix\r\n      this.vars.cycles = this.matrix.length\r\n\r\n      // Walk through all complete repeats\r\n      const wholeRepeats = Math.floor(this.vars.get('repeat'))\r\n      for (let j = 0; j < wholeRepeats; j++) {\r\n        for (let i = 0; i < this.vars.cycles; i++) {\r\n          this._cycles.push(i)\r\n        }\r\n      }\r\n\r\n      // Add the leftover repeats.\r\n      const partialRepeats = this.vars.get('repeat') - wholeRepeats\r\n      if (partialRepeats > 0) {\r\n        // Get the amount of cycles to still repeat\r\n        const remainder = Math.floor(this.vars.cycles * partialRepeats)\r\n\r\n        let cycles = [...Array(this.vars.cycles).keys()]\r\n\r\n        if (this.vars.get('order') === 'random') {\r\n          // For randomly ordered loops, shuffle the order of the pool\r\n          // This makes sure that the next step of determining the repeatcycles\r\n          // is a 'random selection without replacement'\r\n          cycles = shuffle(cycles)\r\n        }\r\n        // Get the required amount of cycles to repeat from the pool.\r\n        let repeatCycles = cycles.splice(0, remainder)\r\n        // Add these cycles to the original cycles array\r\n        this._cycles = [...this._cycles, ...repeatCycles]\r\n      }\r\n\r\n      // Shuffle everything!.\r\n      if (this.vars.get('order') === 'random') {\r\n        this._cycles = shuffle(this._cycles)\r\n      }\r\n\r\n      this._initialized = true\r\n    }\r\n\r\n    const break_if_val = this.vars.get('break_if')\r\n    this._break_if = ['never', ''].includes(break_if_val)\r\n      ? null\r\n      : this.syntax.compile_cond(break_if_val)\r\n\r\n    // Check if if the cycle must be repeated.\r\n    if (this.experiment.vars.repeat_cycle === 1 && isNumber(this._index)) {\r\n      this._runner._debugger.msg('Repeating cycle: ' + this._index)\r\n      this._cycles.push(this._index)\r\n      if (this.vars.get('order') === 'random') {\r\n        this._cycles = shuffle(this._cycles)\r\n      }\r\n      this.experiment.vars.repeat_cycle = 0\r\n    }\r\n\r\n    if (this._cycles.length > 0) {\r\n      this._index = this._cycles.shift()\r\n      this.apply_cycle(this._index)\r\n\r\n      if (this._break_if !== null) {\r\n        this.python_workspace['this'] = this\r\n\r\n        const breakIf = this.syntax.eval_text(this._break_if, null, true)\r\n\r\n        if (this.python_workspace._eval(breakIf) === true) {\r\n          this._complete()\r\n          return\r\n        }\r\n      }\r\n\r\n      if (this._runner._itemStore._items[this.vars.item].type === 'sequence') {\r\n        this._runner._itemStore.prepare(this.vars.item, this)\r\n      } else {\r\n        this._runner._itemStore.execute(this.vars.item, this)\r\n      }\r\n    } else {\r\n      // Break the loop.\r\n      this._complete()\r\n    }\r\n  }\r\n}\r\n","import {\r\n  constants\r\n} from '../system/constants.js'\r\n\r\n/** Class representing a keyboard device. */\r\nexport default class Keyboard {\r\n  /**\r\n   * Create an object which represents a keyboard device.\r\n   * @param {Object} experiment - The experiment to which the logger belongs.\r\n   * @param {Number} timeOut - Duration in ms for time out.\r\n   * @param {Array} keyList - List of acceptable response keys.\r\n   */\r\n  constructor (experiment, timeOut, keyList) {\r\n    // Create and set private properties.\r\n    this._experiment = experiment // Anchor to the experiment object.\r\n    this._keyList = (typeof keyList === 'undefined') ? [] : keyList // List of acceptable response keys.\r\n    this._timeOut = (typeof timeOut === 'undefined') ? null : timeOut // Duration in millisecond for time-out.\r\n\r\n    // Set constant properties.\r\n    this._SYNONIEM_MAP = [\r\n      ['space', ' ', 'SPACE'],\r\n      ['\"', 'quotedbl', 'QUOTEDBL'],\r\n      ['!', 'exclaim', 'EXCLAIM'],\r\n      ['#', 'hash', 'HASH'],\r\n      ['$', 'dollar', 'DOLLAR'],\r\n      ['&', 'ampersand', 'AMPERSAND'],\r\n      [\"'\", 'quote', 'QUOTE'],\r\n      ['(', 'leftbracket', 'leftparen', 'LEFTBRACKET', 'LEFTPAREN'],\r\n      [')', 'rightbracket', 'rightparen', 'RIGHTBRACKET', 'RIGHTPAREN'],\r\n      ['*', 'asteriks', 'ASTERISK'],\r\n      ['+', 'plus', 'PLUS'],\r\n      [',', 'comma', 'COMMA'],\r\n      ['-', 'minus', 'MINUS'],\r\n      ['.', 'period', 'PERIOD'],\r\n      ['/', 'slash', 'SLASH'],\r\n      ['1'],\r\n      ['2'],\r\n      ['3'],\r\n      ['4'],\r\n      ['5'],\r\n      ['6'],\r\n      ['7'],\r\n      ['8'],\r\n      ['9'],\r\n      ['0'],\r\n      ['=', 'equals', 'EQUALS'],\r\n      [':', 'colon', 'COLON'],\r\n      [';', 'semicolon', 'SEMICOLON'],\r\n      ['<', 'less', 'LESS'],\r\n      ['>', 'greater', 'GREATER'],\r\n      ['?', 'question', 'QUESTION'],\r\n      ['@', 'at', 'AT'],\r\n      ['a', 'A'],\r\n      ['b', 'B'],\r\n      ['c', 'C'],\r\n      ['d', 'D'],\r\n      ['e', 'E'],\r\n      ['f', 'F'],\r\n      ['g', 'G'],\r\n      ['h', 'H'],\r\n      ['i', 'I'],\r\n      ['j', 'J'],\r\n      ['k', 'K'],\r\n      ['l', 'L'],\r\n      ['m', 'M'],\r\n      ['n', 'N'],\r\n      ['o', 'O'],\r\n      ['p', 'P'],\r\n      ['q', 'Q'],\r\n      ['r', 'R'],\r\n      ['s', 'S'],\r\n      ['t', 'T'],\r\n      ['u', 'U'],\r\n      ['v', 'V'],\r\n      ['w', 'W'],\r\n      ['x', 'X'],\r\n      ['y', 'Y'],\r\n      ['z', 'Z'],\r\n      ['kp0', 'KP0'],\r\n      ['kp1', 'KP1'],\r\n      ['kp2', 'KP2'],\r\n      ['kp3', 'KP3'],\r\n      ['kp4', 'KP4'],\r\n      ['kp5', 'KP5'],\r\n      ['kp6', 'KP6'],\r\n      ['kp7', 'KP7'],\r\n      ['kp8', 'KP8'],\r\n      ['kp9', 'KP9'],\r\n      ['kp_divide', 'KP_DIVIDE'],\r\n      ['kp_enter', 'KP_ENTER'],\r\n      ['kp_equals', 'KP_EQUALS'],\r\n      ['kp_minus', 'KP_MINUS'],\r\n      ['kp_multiply', 'KP_MULTIPLY'],\r\n      ['kp_period', 'KP_PERIOD'],\r\n      ['kp_plus', 'KP_PLUS'],\r\n      ['\\\\', 'backslash', 'BACKSLASH'],\r\n      ['^', 'power', 'caret', 'POWER', 'CARET'],\r\n      ['_', 'underscore', 'UNDERSCORE'],\r\n      ['`', 'backquote', 'BACKQUOTE'],\r\n      ['f1', 'F1', 'help', 'HELP'],\r\n      ['f2', 'F2'],\r\n      ['f3', 'F3'],\r\n      ['f4', 'F4'],\r\n      ['f5', 'F5'],\r\n      ['f6', 'F6'],\r\n      ['f7', 'F7'],\r\n      ['f8', 'F8'],\r\n      ['f9', 'F9'],\r\n      ['f10', 'F10'],\r\n      ['f11', 'F11'],\r\n      ['f12', 'F12'],\r\n      ['f13', 'F13'],\r\n      ['f14', 'F14'],\r\n      ['f15', 'F15'],\r\n      ['up', 'UP'],\r\n      ['down', 'DOWN'],\r\n      ['left', 'LEFT'],\r\n      ['right', 'RIGHT'],\r\n      ['menu', 'MENU'],\r\n      ['lshift', 'left shift', 'LSHIFT', 'LEFT SHIFT'],\r\n      ['lctrl', 'left ctrl', 'LCTRL', 'LEFT CTRL'],\r\n      ['lalt', 'left alt', 'LALT', 'LEFT ALT'],\r\n      ['rshift', 'right shift', 'RSHIFT', 'RIGHT SHIFT'],\r\n      ['rctrl', 'right ctrl', 'RCTRL', 'RIGHT CTRL'],\r\n      ['ralt', 'right alt', 'alt gr', 'RALT', 'RIGHT ALT', 'ALT GR'],\r\n      ['page up', 'pageup', 'PAGE UP', 'PAGEUP'],\r\n      ['page down', 'pagedown', 'PAGE DOWN', 'PAGEDOWN'],\r\n      ['pause', 'PAUSE'],\r\n      ['scroll lock', 'scrollock', 'SCROLL LOCK', 'SCROLLOCK'],\r\n      ['caps lock', 'capslock', 'CAPS LOCK', 'CAPSLOCK'],\r\n      ['nummlock', 'NUMMLOCK'],\r\n      ['clear', 'CLEAR'],\r\n      ['enter', 'ENTER', 'return', 'RETURN'],\r\n      ['tab', 'TAB'],\r\n      ['backspace', 'BACKSPACE'],\r\n      ['end', 'END'],\r\n      ['home', 'HOME'],\r\n      ['insert', 'INSERT'],\r\n      ['delete', 'DELETE'],\r\n      ['sysreq', 'sys req', 'SYSREQ', 'SYS REQ'],\r\n      ['break', 'BREAK'],\r\n      ['escape', 'ESCAPE'],\r\n      ['print', 'PRINT'],\r\n      ['print screen', 'PRINT SCREEN'],\r\n      ['lmeta', 'left meta', 'LMETA', 'LEFT META', 'lsuper', 'LSUPER', 'left super', 'LEFT SUPER'],\r\n      ['rmeta', 'right meta', 'RMETA', 'RIGHT META', 'rsuper', 'right super', 'RSUPER', 'RIGHT SUPER'],\r\n      // key defined below are not supported yet.\r\n      ['euro', 'EURO'],\r\n      ['first', 'FIRST'],\r\n      ['last', 'LAST'],\r\n      ['kp enter', 'KP ENTER'],\r\n      ['kp equals', 'KP EQUALS'],\r\n      ['mode', 'MODE'],\r\n      ['unknown', 'UNKNOWN'],\r\n      ['unknown key', 'UNKNOWN KEY']\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * Convert all response values to their default values (remove synoniems).\r\n   * @param {Array} responses - A list of response values.\r\n   * @return {Array} - List of default values for the given responses.\r\n   */\r\n  _get_default_from_synoniem (responses) {\r\n    const defaults = []\r\n    let synonyms\r\n    for (let i = 0; i < responses.length; i++) {\r\n      synonyms = this._synonyms(responses[i])\r\n      if (typeof synonyms === 'undefined') {\r\n        throw new ReferenceError(`Unknown key '${responses[i]}'`)\r\n      }\r\n      defaults.push(synonyms[0])\r\n    }\r\n    return defaults\r\n  }\r\n\r\n  /**\r\n   * Set the configuration for the keyboard backend.\r\n   * @param {Number} timeOut - Duration in ms for time out.\r\n   * @param {Array} keyList - List of acceptable response keys.\r\n   */\r\n  _set_config (timeOut, keyList) {\r\n    // Set the properties.\r\n    this._keyList = keyList\r\n    this._timeOut = timeOut\r\n  }\r\n\r\n  /**\r\n   * Convert a response value to its default value (remove synoniem).\r\n   * @param {String} button - A response.\r\n   * @return {String|Null} - Default value of the response.\r\n   */\r\n  _synonyms (button) {\r\n    if (typeof button !== 'undefined') {\r\n      for (let i = 0; i < this._SYNONIEM_MAP.length; i++) {\r\n        for (let j = 0; j < this._SYNONIEM_MAP[i].length; j++) {\r\n          if (this._SYNONIEM_MAP[i][j] === button) {\r\n            return this._SYNONIEM_MAP[i]\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  /** Clear all pending keyboard input. */\r\n  flush () {\r\n    // Always returns false because flusihing is not possible.\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Collects a single key press.\r\n   * @param {Number} timeOut - Duration in ms for time out.\r\n   * @param {Array} keyList - List of acceptable response keys.\r\n   */\r\n  get_key (timeOut, keyList) {\r\n    // Collects a single key press.\r\n    this._keyList = (typeof keyList === 'undefined') ? this._keyList : keyList\r\n    this._timeOut = (typeof timeOut === 'undefined') ? this._timeOut : timeOut\r\n\r\n    if (this._experiment !== null) {\r\n      // Set the event processor.\r\n      this._experiment._runner._events._run(this._timeOut, constants.RESPONSE_KEYBOARD, this._keyList)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve the moderator keys (LIST, CTRL, ALT) pressed during a response.\r\n   * @return {Array} - List of pressed moderator keys.\r\n   */\r\n  get_mods () {\r\n    var moderators = []\r\n    if (this._experiment._runner._events.keyDownEvent !== null) {\r\n      if (this._experiment._runner._events.keyDownEvent.event.shiftKey === true) {\r\n        moderators.push('shift')\r\n      }\r\n      if (this._experiment._runner._events.keyDownEvent.event.ctrlKey === true) {\r\n        moderators.push('ctrl')\r\n      }\r\n      if (this._experiment._runner._events.keyDownEvent.event.altKey === true) {\r\n        moderators.push('alt')\r\n      }\r\n    }\r\n    return moderators\r\n  }\r\n\r\n  /**\r\n   * Shows or hides a virtual keyboard.\r\n   * @param {Boolean} visible - If true the virtual keyboard is shown.\r\n   */\r\n  show_virtual_keyboard (visible) {\r\n    // Shows or hides a virtual keyboard.\r\n    if (visible === true) {\r\n      // Hack to show the virutal keyboard. ## Must be tested!\r\n      this._experiment._runner._renderer.view.focus()\r\n    } else {\r\n      // Hack to hide the virtual keyboard. ## Must be tested!\r\n      var tmp = document.createElement('input')\r\n      document.body.appendChild(tmp)\r\n      tmp.focus()\r\n      document.body.removeChild(tmp)\r\n    }\r\n  }\r\n}\r\n","import Item from './item.js'\r\nimport Keyboard from '../backends/keyboard.js'\r\nimport { constants } from '../system/constants.js'\r\n\r\n/**\r\n * Class representing a Sequence item.\r\n * @extends Item\r\n */\r\nexport default class Sequence extends Item {\r\n  /** The sequence class controls the running of a series of items. */\r\n  constructor (experiment, name, script) {\r\n    // Inherited.\r\n    super(experiment, name, script)\r\n\r\n    // Create and set private properties.\r\n    this._index = -1\r\n    this._items = null\r\n    this._keyboard = null\r\n\r\n    // Create and set public properties.\r\n    this.description = 'Runs a number of items in sequence'\r\n    this.flush_keyboard = 'yes'\r\n    this.items = null\r\n\r\n    // Process the script.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    // sequence is finalized.\r\n    this._status = constants.STATUS_FINALIZE\r\n\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /** Implements the prepare complete phase of an item. */\r\n  _prepare_complete () {\r\n    // Generate the items list for the run cycle.\r\n    if (this._index < this.items.length) {\r\n      if ((this.items[this._index].item in this._runner._itemStore._items) === false) {\r\n        this._runner._debugger.addError('Could not find a child item which is called by sequence item: ' + this.name + ' (' + this.items[this._index].item.name + ')')\r\n      } else {\r\n        // Increase the current index.\r\n        this._index++\r\n\r\n        // Add the item to the internal list.\r\n        this._items.push({\r\n          'item': this.items[this._index - 1].item,\r\n          'cond': this.syntax.compile_cond(this.items[this._index - 1].cond)\r\n        })\r\n\r\n        // Prepare the item.\r\n        this._runner._itemStore.prepare(this.items[this._index - 1].item, this)\r\n      }\r\n    } else {\r\n      // Prepare process is done, start execution.\r\n      this._index = 0\r\n\r\n      // Remove the prepare phase form the stack.\r\n      this._runner._itemStack.pop()\r\n\r\n      // Check if this sequence is part of a parent sequence and must jump back in the prepare phase.\r\n      if (this._parent.type === 'sequence') {\r\n        this._parent._prepare_complete()\r\n      } else {\r\n        // Execute the next cycle of the sequence itself.\r\n        this._runner._itemStore.run(this.name, this._parent)\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Reset all item variables to their default value. */\r\n  reset () {\r\n    this.items = []\r\n    this.vars.flush_keyboard = 'yes'\r\n  }\r\n\r\n  /**\r\n     * Parse a definition string and retrieve all properties of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  from_string (script) {\r\n    // Parses a definition string.\r\n    this.variables = {}\r\n    this.comments = []\r\n    this.reset()\r\n\r\n    // Split the string into an array of lines.\r\n    if (script !== null) {\r\n      var lines = script.split('\\n')\r\n      for (var i = 0; i < lines.length; i++) {\r\n        if ((lines[i] !== '') && (this.parse_variable(lines[i]) === false)) {\r\n          var tokens = this.syntax.split(lines[i])\r\n          if ((tokens.length > 0) && (tokens[0] === 'run')) {\r\n            var item = tokens[1]\r\n            var cond = 'always'\r\n            if (tokens.length > 2) {\r\n              cond = tokens[2]\r\n            }\r\n            // Push the item and condition definition to the items list.\r\n            this.items.push({\r\n              'item': item,\r\n              'cond': cond\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    // Inherited.\r\n    super.prepare()\r\n\r\n    // Create a keyboard to flush responses at the start of the run phase\r\n    if (this.vars.flush_keyboard === 'yes') {\r\n      this._keyboard = new Keyboard(this.experiment)\r\n    } else {\r\n      this._keyboard = null\r\n    }\r\n\r\n    // Generate the items list for the run cycle.\r\n    this._index = 0\r\n    this._items = []\r\n\r\n    // Prepare the items.\r\n    this._prepare_complete()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Check if all items have been processed.\r\n    if (this._index < this._items.length) {\r\n      // Flush the keyboard at the beginning of the sequence.\r\n      if ((this._index === 0) && (this.vars.flush_keyboard === 'yes')) {\r\n        this._keyboard.flush()\r\n      }\r\n\r\n      // Increase the current index.\r\n      this._index++\r\n      const currentItem = this._items[this._index - 1]\r\n\r\n      // Set the workspace.\r\n      this._runner._pythonWorkspace['self'] = this\r\n\r\n      // Check if the item may run.\r\n      if (this._runner._pythonWorkspace._eval(currentItem.cond) === true) {\r\n        // run the current item of the sequence object.\r\n        this._runner._itemStore.run(currentItem.item, this)\r\n      } else {\r\n        // Execute the next cycle of the sequence itself.\r\n        this.run()\r\n      }\r\n    } else {\r\n      // sequence is finalized.\r\n      this._complete()\r\n    }\r\n  }\r\n}\r\n","import sortBy from 'lodash/sortBy'\nimport isFunction from 'lodash/isFunction'\n\nimport Item from './item.js'\nimport { constants } from '../system/constants.js'\n\n/**\n * Class representing coroutines\n * @extends Item\n */\nexport default class Coroutines extends Item {\n  constructor (experiment, name, script) {\n    // Inherited create.\n    super(experiment, name, script)\n    // Definition of public properties.\n    this.description = 'Repeatedly runs another item'\n    // The tasks to perform\n    this.tasks = []\n    // The tasks to perform this iteration\n    this.schedule = []\n    // Process the script.\n    this.from_string(script)\n  }\n\n  from_string (script) {\n    if (script === null) return\n    for (let s of script.split('\\n')) {\n      const [cmd, arglist, kwdict] = this.experiment.syntax.parse_cmd(s)\n      if (cmd === 'set') {\n        const [variable, value] = arglist\n        this.vars[variable] = value\n      }\n      if (cmd === 'run' && arglist.length) {\n        const task = {\n          item_name: arglist.shift(),\n          start_time: kwdict.start || 0,\n          end_time: kwdict.end || 0,\n          run_if: kwdict.runif || 'always'\n        }\n        this.tasks.push(task)\n      }\n    }\n  }\n\n  prepare () {\n    this._runner._debugger.addMessage(`Preparing coroutines item '${this.name}'`)\n    this.schedule = this.tasks.reduce((result, taskParams) => {\n      const item_name = this._runner._syntax.eval_text(taskParams.item_name, this.vars)\n      const item = this._runner._itemStore._items[item_name]\n      if (!item) {\n        const msg = `Coroutines '${this.name}' - could not find item: ${item_name}`\n        this._runner._debugger.addError(msg)\n        throw new Error(msg)\n      }\n      this._runner._pythonWorkspace['self'] = this\n      if (this._runner._pythonWorkspace._eval(taskParams.run_if) === true) {\n        const start_time = this._runner._syntax.eval_text(taskParams.start_time, this.vars)\n        const end_time = this._runner._syntax.eval_text(taskParams.end_time, this.vars)\n        result.push(new Task(item, item_name, start_time, end_time,\n          taskParams.item_name === this.vars.get('end_after_item')))\n      }\n      return result\n    }, [])\n    super.prepare()\n  }\n\n  run () {\n    this._runner._debugger.addMessage(`Running coroutines item '${this.name}'`)\n    super.run()\n    // Prepare all tasks\n    for (let task of this.schedule) {\n      this._runner._itemStore.prepare(task.item_name, this)\n    }\n    this.schedule = sortBy(this.schedule, 'start_time')\n    // Launch all tasks and wrap them in the coroutine helper\n    for (let task of this.schedule) {\n      this._runner._debugger.addMessage(`Launching task '${task.item_name}'`)\n      task.launch()\n    }\n\n    this.active = []\n    this.dt = 0\n    this.t0 = performance.now()\n    this.running = true\n\n    this._loop()\n  }\n\n  _loop () {\n    while (this.schedule.length > 0 && this.schedule[0].started(this.dt)) {\n      this.active.push(this.schedule.shift())\n    }\n    this.active = sortBy(this.active, 'end_time')\n    let _active = []\n    for (let task of this.active) {\n      let status = task.step()\n      if (status === task.RUNNING) {\n        _active.push(task)\n        continue\n      }\n      if (status === task.ABORTED) {\n        this.running = false\n      }\n    }\n    this.active = _active\n    while (this.active.length > 0 && this.active[0].stopped(this.dt)) {\n      this.active.shift()\n    }\n\n    this.dt = performance.now() - this.t0\n    if (this.running && this.dt < this.vars.get('duration') &&\n      ![constants.TIMER_BREAK, constants.TIMER_EXIT, constants.TIMER_ERROR]\n        .includes(this._runner._events._state)) {\n      setTimeout(this._loop.bind(this), 0) // The well-known trick to deal with JS async nature...\n    } else {\n      // Kill all remaining tasks\n      for (let task of this.active) {\n        this._runner._debugger.addMessage(`Killing task '${task.item_name}'`)\n        task.kill()\n      }\n      this._complete()\n    }\n  }\n}\n\nclass Task {\n  UNINITIALISED = 0\n  RUNNING = 1\n  FINISHED = 2\n  ABORTED = -1\n\n  constructor (item, item_name, start_time, end_time, abort_on_end) {\n    this.item = item\n    this.item_name = item_name\n    this.start_time = start_time\n    this.end_time = end_time\n    this.abort_on_end = abort_on_end\n    this.state = this.UNINITIALISED\n    this._coroutine = null\n    this.step = () => { throw new Error('Task has not been initialized') }\n  }\n\n  launch () {\n    if (!isFunction(this.item.coroutine)) {\n      throw new Error(`Item ${this.item_name} does not have correct coroutine implementation`)\n    }\n    this._coroutine = this.item.coroutine()\n    this._coroutine.next()\n    this.step = () => {\n      // console.log(`Stepping ${this.item_name}`)\n      const { value, done } = this._coroutine.next(true)\n      if (value === false) {\n        this.state = this.ABORTED\n        return this.ABORTED\n      }\n      if (done === true) {\n        let newState\n        if (this.abort_on_end) {\n          newState = this.ABORTED\n        } else {\n          newState = this.FINISHED\n        }\n        this.state = newState\n        return this.state\n      }\n      return this.state // Should be this.RUNNING\n    }\n    this.state = this.RUNNING\n  }\n\n  started (dt) {\n    return dt >= this.start_time\n  }\n\n  stopped (dt) {\n    if (dt < this.end_time) {\n      return false\n    }\n    return this.kill()\n  }\n\n  kill () {\n    let response = this._coroutine.next(false)\n    if (response.done === true) {\n      this.state = this.FINISHED\n      return true\n    } else {\n      return false\n    }\n  }\n}\n","import {\r\n  constants\r\n} from '../system/constants.js'\r\n\r\n/** Class representing a mouse device. */\r\nexport default class Mouse {\r\n  /**\r\n   * Create an object which represents a mouse device.\r\n   * @param {Object} experiment - The experiment to which the logger belongs.\r\n   * @param {Number} timeOut - Duration in ms for time out.\r\n   * @param {Array} buttonList - List of acceptable response buttons.\r\n   * @param {Boolean} visible - Toggle for showing the mouse cursor.\r\n   */\r\n  constructor (experiment, timeOut, buttonList, visible) {\r\n    // Create and set public properties.\r\n    this._experiment = experiment\r\n    this._timeOut = (typeof timeOut === 'undefined') ? null : timeOut\r\n    this._buttonList = (typeof buttonList === 'undefined') ? null : buttonList\r\n    this._visible = (typeof visible === 'undefined') ? false : visible\r\n\r\n    // Set constant properties.\r\n    this._SYNONIEM_MAP = [\r\n      ['1', 'left_button'],\r\n      ['2', 'middle_button'],\r\n      ['3', 'right_button'],\r\n      ['4', 'scroll_up'],\r\n      ['5', 'scroll_down']\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * Convert all response values to their default values (remove synoniems).\r\n   * @param {Array} responses - A list of response values.\r\n   * @return {Array} - List of default values for the given responses.\r\n   */\r\n  _get_default_from_synoniem (responses) {\r\n    // Return the default synoniem value from a response.\r\n    var defaults = []\r\n    for (var i = 0; i < responses.length; i++) {\r\n      var synoniem = this._synonyms(responses[i])\r\n      defaults.push(synoniem[0])\r\n    }\r\n    return defaults\r\n  }\r\n\r\n  /**\r\n   * Set the configuration for the mouse backend.\r\n   * @param {Number} timeOut - Duration in ms for time out.\r\n   * @param {Array} buttonList - List of acceptable response buttons.\r\n   * @param {Boolean} visible - Toggle for showing the mouse cursor.\r\n   */\r\n  _set_config (timeOut, buttonList, visible) {\r\n    // Set mouse properties.\r\n    this._timeOut = timeOut\r\n    this._buttonList = buttonList\r\n    this._visible = visible\r\n  }\r\n\r\n  /**\r\n   * Convert a response value to its default value (remove synoniem).\r\n   * @param {String} button - A response.\r\n   * @return {String|Null} - Default value of the response or null if none.\r\n   */\r\n  _synonyms (button) {\r\n    if (typeof button !== 'undefined') {\r\n      for (var i = 0; i < this._SYNONIEM_MAP.length; i++) {\r\n        for (var j = 0; j < this._SYNONIEM_MAP[i].length; j++) {\r\n          if (this._SYNONIEM_MAP[i][j] === button) {\r\n            return this._SYNONIEM_MAP[i]\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  /** Clear all pending mouse input. */\r\n  flush () {\r\n    // Always returns false because flusihing is not possible.\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Collects a single mouse click.\r\n   * @param {Number} timeOut - Duration in ms for time out.\r\n   * @param {Array} buttonList - List of acceptable response buttons.\r\n   * @param {Boolean} visible - Toggle for showing the mouse cursor.\r\n   */\r\n  get_click (timeOut, buttonList, visible) {\r\n    // Collects a single mouse click.\r\n    this._timeOut = (typeof timeOut === 'undefined') ? this._timeOut : timeOut\r\n    this._buttonList = (typeof buttonList === 'undefined') ? this._buttonList : buttonList\r\n    this._visible = (typeof visible === 'undefined') ? this._visible : visible\r\n\r\n    if (this._experiment !== null) {\r\n      // Hide or show the mouse.\r\n      this.show_cursor(this._visible)\r\n\r\n      // Set the event processor.\r\n      this._experiment._runner._events._run(this._timeOut, constants.RESPONSE_MOUSE, this._buttonList)\r\n    };\r\n  }\r\n\r\n  /**\r\n   *  Returns the current mouse position. !Warning: this methods uses the state in\r\n   *  the last known mouse move, not the current state.\r\n   *  @param {Object} - Object with time, x and y coordinate of the mouse cursor.\r\n   */\r\n  get_pos () {\r\n    // Returns the current mouse position. !Warning: this methods uses the state in the last known mouse respone, not the current state.\r\n    if (this._experiment._runner._events._mouseMoveEvent !== null) {\r\n      return {\r\n        'rtTime': this._experiment._runner._events._mouseMoveEvent.rtTime,\r\n        'x': this._experiment._runner._events._mouseMoveEvent.event.clientX,\r\n        'y': this._experiment._runner._events._mouseMoveEvent.event.clientY\r\n      }\r\n    } else {\r\n      return {\r\n        'rtTime': -1,\r\n        'x': -1,\r\n        'y': -1\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Returns the current mouse position. !Warning: this methods uses the state in\r\n   *  the last known mouse press, not the current state.\r\n   *  @param {Object} - Object with the state of the mouse buttons.\r\n   */\r\n  get_pressed () {\r\n    // Returns the current button state of the mouse buttons. !Warning: this methods uses the state in the last known mouse respone, not the current state.\r\n    if (this._experiment._runner.events._mouse_press !== null) {\r\n      return {\r\n        'buttons': [(this._experiment._runner._events._mouseDownEvent.event.button === 0),\r\n          (this._experiment._runner._events._mouseDownEvent.event.button === 1),\r\n          (this._experiment._runner._events._mouseDownEvent.event.button === 2)\r\n        ]\r\n      }\r\n    } else {\r\n      return {\r\n        'buttons': [null, null, null]\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Sets the current position of the cursor. */\r\n  set_pos (pos) {}\r\n\r\n  /**\r\n   * Shows or hides the mouse cursor.\r\n   * @param {Boolean} show - If true the mouse cursor is shown.\r\n   */\r\n  show_cursor (show) {\r\n    // Set the property\r\n    this._visible = show\r\n\r\n    // Immediately changes the visibility of the mouse cursor.\r\n    if (show === true) {\r\n      // Show the mouse cursor.\r\n      this._experiment._runner._renderer.view.style.cursor = 'default'\r\n    } else {\r\n      // Set the cursor visibility to none.\r\n      this._experiment._runner._renderer.view.style.cursor = 'none'\r\n    }\r\n  }\r\n}\r\n","import Item from './item.js'\r\nimport Keyboard from '../backends/keyboard.js'\r\nimport Mouse from '../backends/mouse.js'\r\nimport {\r\n  constants\r\n} from '../system/constants.js'\r\n\r\n/**\r\n * Class representing a GeneralResponse item.\r\n * @extends Item\r\n */\r\nexport default class GenericResponse extends Item {\r\n  /** The sequence class controls the running of a serie of items. */\r\n  constructor (experiment, name, script) {\r\n    // Inherited.\r\n    super(experiment, name, script)\r\n\r\n    // Create and set private properties.\r\n    this._allowed_responses = null\r\n    this._duration = 0\r\n    this._duration_func = null\r\n    this._keyboard = null\r\n    this._mouse = null\r\n    this._responsetype = constants.RESPONSE_NONE\r\n    this._timeout = -1\r\n\r\n    // Create and set public properties.\r\n    this.auto_response = 'a'\r\n    this.process_feedback = false\r\n    this.synonyms = null\r\n  }\r\n\r\n  /** Implements the complete phase of the general response item. */\r\n  _complete () {\r\n    // Check if a timeout has occured which must be treaded as a response.\r\n    if ((typeof this.vars.timeout !== 'undefined') &&\r\n      ((this.experiment._runner._events._timeStamp - this.experiment.vars.get('time_' + this.name)) > this.vars.timeout)) {\r\n      // Process the timeout none response.\r\n      this.process_response_timeout()\r\n    }\r\n\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /**\r\n     * Implements the update response phase of the general response item.\r\n     * @param {Object} response - The response object which is evaluated.\r\n     */\r\n  _update (response) {\r\n    if (response !== null) {\r\n      // Implements the update response phase of the item.\r\n      if ((this._responsetype === constants.RESPONSE_KEYBOARD) &&\r\n        (response.type === constants.RESPONSE_KEYBOARD)) {\r\n        this.process_response_keypress(response)\r\n      } else if ((this._responsetype === constants.RESPONSE_MOUSE) &&\r\n        (response.type === constants.RESPONSE_MOUSE)) {\r\n        this.process_response_mouseclick(response)\r\n      }\r\n    }\r\n  }\r\n\r\n  /** The auto responder method for simulated keyboard interaction. */\r\n  auto_responser () {}\r\n\r\n  /** The auto responder method for simulated mouse interaction. */\r\n  auto_responser_mouse () {}\r\n\r\n  /** Prepare the list with allowed responses */\r\n  prepare_allowed_responses () {\r\n    // Prepare the allowed responses.\r\n    if (this.vars.get('allowed_responses') === null) {\r\n      this._allowed_responses = null\r\n    } else {\r\n      // Create a list of allowed responses that are separated by semicolons.\r\n      // Also trim any whitespace.\r\n      const allowed_responses = String(this.vars.get('allowed_responses')).split(';')\r\n        .map(item => (typeof item === 'string')\r\n          ? item.replace(/^\"(.*)\"$/g, '$1').trim()\r\n          : item).filter(Boolean)\r\n      if (this.vars.duration === 'keypress') {\r\n        // this._allowed_responses = allowed_responses;\r\n        this._allowed_responses = this._keyboard._get_default_from_synoniem(allowed_responses)\r\n      } else if (this.vars.duration === 'mouseclick') {\r\n        // For mouse responses, we don't check if the allowed responses make sense.\r\n        this._allowed_responses = this._mouse._get_default_from_synoniem(allowed_responses)\r\n      }\r\n\r\n      // If allowed responses are provided, the list should not be empty.\r\n      if (this._allowed_responses.length === 0) {\r\n        this.experiment._runner._debugger.addError(\r\n          'Defined responses are not valid in keyboard_response: ' +\r\n          this.name + ' (' + this.vars.get('allowed_responses') + ')')\r\n      }\r\n    }\r\n  }\r\n\r\n  // Prepare the duration of the stimulus interaction. */\r\n  prepare_duration () {\r\n    // Get duration.\r\n    this._duration = this.syntax.remove_quotes(this.vars.get('duration'))\r\n\r\n    // Prepare the duration.\r\n    if (this._duration !== null) {\r\n      if ((this._duration === 'keypress') || (this._duration === 'mouseclick') ||\r\n                (this._duration === 'sound') || (this._duration === 'video')) {\r\n        this._duration = -1\r\n        if (this.vars.duration === 'keypress') {\r\n          this.prepare_duration_keypress()\r\n          this._responsetype = constants.RESPONSE_KEYBOARD\r\n        } else if (this.vars.duration === 'mouseclick') {\r\n          this.prepare_duration_mouseclick()\r\n          this._responsetype = constants.RESPONSE_MOUSE\r\n        } else if (this.vars.duration === 'sound') {\r\n          this._responsetype = constants.RESPONSE_SOUND\r\n        } else if (this.vars.duration === 'video') {\r\n          this._responsetype = constants.RESPONSE_VIDEO\r\n        }\r\n      } else {\r\n        // Prepare a duration in milliseconds\r\n        this._duration = Number(this._duration)\r\n        if (this._duration === 0) {\r\n          this._responsetype = constants.RESPONSE_NONE\r\n        } else {\r\n          this._responsetype = constants.RESPONSE_DURATION\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Prepare the system for a keyboard duration interval. */\r\n  prepare_duration_keypress () {\r\n    // Prepare a keyboard duration.\r\n    this._keyboard = new Keyboard(this.experiment)\r\n    if (this.experiment.auto_response === true) {\r\n      this._duration_func = this.auto_responder\r\n    } else {\r\n      var final_duration = (this._timeout !== -1) ? this._timeout : this._duration\r\n      this._keyboard._set_config(final_duration, this._allowed_responses)\r\n    }\r\n  }\r\n\r\n  /** Prepare the system for a mouseclick duration interval. */\r\n  prepare_duration_mouseclick () {\r\n    // Prepare a mouseclick duration.\r\n    this._mouse = new Mouse(this.experiment)\r\n    if (this.experiment.auto_response === true) {\r\n      this._duration_func = this.auto_responder_mouse\r\n    } else {\r\n      var final_duration = (this._timeout !== -1) ? this._timeout : this._duration\r\n      this._mouse._set_config(final_duration, this._allowed_responses, false)\r\n    }\r\n  }\r\n\r\n  /** Prepare the system for a timeout. */\r\n  prepare_timeout () {\r\n    // Prepare the timeout.\r\n    if (this.vars.get('timeout') !== null) {\r\n      if (typeof this.vars.timeout === 'number') {\r\n        // Prepare a duration in milliseconds\r\n        this._timeout = this.vars.timeout\r\n      } else {\r\n        this._timeout = -1\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Select the type of stimulus response processing. */\r\n  process_response () {\r\n    // Start stimulus response cycle.\r\n    switch (this._responsetype) {\r\n    case constants.RESPONSE_NONE:\r\n      // Duration is 0, so complete the stimulus/response cycle.\r\n      this._status = constants.STATUS_FINALIZE\r\n      this._complete()\r\n      break\r\n    case constants.RESPONSE_DURATION:\r\n      this.sleep_for_duration()\r\n      break\r\n    case constants.RESPONSE_KEYBOARD:\r\n      this._keyboard.get_key()\r\n      break\r\n    case constants.RESPONSE_MOUSE:\r\n      this._mouse.get_click()\r\n      break\r\n    case constants.RESPONSE_SOUND:\r\n      this._sampler.wait()\r\n      break\r\n    case constants.RESPONSE_VIDEO:\r\n      this._video_player.wait()\r\n      break\r\n    }\r\n  }\r\n\r\n  /** Sets the mouse coordinates based **/\r\n  set_mouse_coordinates (clientX, clientY) {\r\n    // We need the top-left and scaling of the viewport to set the mouse\r\n    // coordinates so that 0,0 corresponds to the display center. The scaling\r\n    // needs to be taken into account also such that the viewport always has\r\n    // the same size in cursor coordinates, even if it's scaled down.\r\n    const rect = this._runner._renderer.view.getBoundingClientRect()\r\n    const scale = Math.min(\r\n      (rect.right - rect.left) / this.experiment.vars.width,\r\n      (rect.bottom - rect.top) / this.experiment.vars.height\r\n    )\r\n    const center_x = scale * this.experiment.vars.width / 2\r\n    const center_y = scale * this.experiment.vars.height / 2\r\n    this.experiment.vars.cursor_x = (clientX - center_x - rect.left) / scale\r\n    this.experiment.vars.cursor_y = (clientY - center_y - rect.top) / scale\r\n  }\r\n\r\n  /** Process a keyboard response. */\r\n  process_response_keypress (retval) {\r\n    this.experiment._start_response_interval = this.sri\r\n    this.experiment._end_response_interval = retval.rtTime\r\n    this.experiment.vars.response = this.syntax.sanitize(retval.resp)\r\n    this.synonyms = this._keyboard._synonyms(this.experiment.vars.response)\r\n    this.response_bookkeeping()\r\n  }\r\n\r\n  /** Process a mouse click response. */\r\n  process_response_mouseclick (retval) {\r\n    this.experiment._start_response_interval = this.sri\r\n    this.experiment._end_response_interval = retval.rtTime\r\n    this.experiment.vars.response = retval.resp\r\n    this.synonyms = this._mouse._synonyms(this.experiment.vars.response)\r\n    this.set_mouse_coordinates(retval.event.clientX, retval.event.clientY)\r\n    this.response_bookkeeping()\r\n  }\r\n\r\n  /** Process a time out response. */\r\n  process_response_timeout () {\r\n    this.experiment._start_response_interval = this.sri\r\n    this.experiment._end_response_interval = this.experiment._runner._events._timeStamp\r\n    this.experiment.vars.response = 'None'\r\n    this.synonyms = ['None', 'none']\r\n    this.response_bookkeeping()\r\n  }\r\n\r\n  /** General response logging after a stimulus/response. */\r\n  response_bookkeeping () {\r\n    // The respone and response_time variables are always set, for every response item\r\n    this.experiment.vars.set('response_time', this.experiment._end_response_interval - this.experiment._start_response_interval)\r\n    this.experiment.vars.set('response_' + this.name, this.experiment.vars.get('response'))\r\n    this.experiment.vars.set('response_time_' + this.name, this.experiment.vars.get('response_time'))\r\n    this.experiment._start_response_interval = null\r\n\r\n    // But correctness information is only set for dedicated response items,\r\n    // such as keyboard_response items, because otherwise we might confound the feedback\r\n    if (this.process_feedback === true) {\r\n      this.experiment.vars.correct = ''\r\n      if (this.vars.get('correct_response') !== null) {\r\n        // If a correct_response has been defined, we use it to determine accuracy etc.\r\n        if (this.synonyms !== null) {\r\n          if (this.synonyms.includes(this.syntax.remove_quotes(this.vars.get('correct_response').toString()))) {\r\n            this.experiment.vars.correct = 1\r\n            this.experiment.vars.total_correct = this.experiment.vars.total_correct + 1\r\n          } else {\r\n            this.experiment.vars.correct = 0\r\n          }\r\n        }\r\n      }\r\n      // Do some response bookkeeping\r\n      this.experiment.vars.total_response_time = this.experiment.vars.total_response_time + this.experiment.vars.response_time\r\n      this.experiment.vars.total_responses = this.experiment.vars.total_responses + 1\r\n      this.experiment.vars.accuracy = Math.round(100.0 * this.experiment.vars.total_correct / this.experiment.vars.total_responses)\r\n      this.experiment.vars.acc = this.experiment.vars.accuracy\r\n      this.experiment.vars.average_response_time = Math.round(this.experiment.vars.total_response_time / this.experiment.vars.total_responses)\r\n      this.experiment.vars.avg_rt = this.experiment.vars.average_response_time\r\n      this.experiment.vars.set('correct_' + this.name, this.vars.correct)\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Sets or resets the start of the stimulus response interval.\r\n     * @param {Boolean} reset - If true reset the sri value.\r\n     */\r\n  set_sri (reset) {\r\n    // Sets the start of the response interval.\r\n    if (reset === true) {\r\n      this.sri = self.vars.get('time_' + this.name)\r\n      this.experiment._start_response_interval = this.vars.get('time_' + this.name)\r\n    }\r\n    if (!this.experiment._start_response_interval) {\r\n      this.sri = this.experiment.vars.get('time_' + this.name)\r\n    } else {\r\n      this.sri = this.experiment._start_response_interval\r\n    }\r\n  }\r\n\r\n  /** Sleep for a specified time. */\r\n  sleep_for_duration () {\r\n    // Sleep for a specified time.\r\n    this.sleep(this._duration)\r\n  }\r\n\r\n  /** Implements the prepare phase of the general response item. */\r\n  prepare () {\r\n    // Implements the prepare phase of the item.\r\n    this.prepare_timeout()\r\n    this.prepare_allowed_responses()\r\n    this.prepare_duration()\r\n\r\n    // Inherited.\r\n    super.prepare()\r\n  }\r\n}\r\n","import GenericResponse from './generic_response.js'\r\nimport Canvas from '../backends/canvas.js'\r\n\r\n/**\r\n * Class representing a Sketchpad item.\r\n * @extends GeneralResponse\r\n */\r\nexport default class Sketchpad extends GenericResponse {\r\n  constructor (experiment, name, script) {\r\n    super(experiment, name, script)\r\n\r\n    // Create and set public properties.\r\n    this.canvas = new Canvas(experiment, false)\r\n    this.elements = []\r\n\r\n    // Process the script.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /**\r\n     * Sort function used for determining the draw index (z-index) of alle elemente.\r\n     * @param {Object} a - The first object to compare.\r\n     * @param {Object} b - The second object to compare.\r\n     * @return {Number} - The result of the comparison.\r\n     */\r\n  _compare (a, b) {\r\n    // Sort function used for determining the draw index (z-index) of alle elemente.\r\n    if (a.z_index() < b.z_index()) { return 1 } else if (a.z_index() > b.z_index()) { return -1 } else { return 0 }\r\n  }\r\n\r\n  /** Implements the complete phase of the Sketchpad item. */\r\n  _complete () {\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /** Resets all item variables to their default value. */\r\n  reset () {\r\n    // Resets all item variables to their default value.\r\n    this.elements = []\r\n    this.vars.duration = 'keypress'\r\n  }\r\n\r\n  /**\r\n     * Parse a definition string and retrieve all properties of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  from_string (script) {\r\n    // Define and reset variables to their defaults.\r\n    this.variables = {}\r\n    this.comments = []\r\n    this.reset()\r\n\r\n    // Split the string into an array of lines.\r\n    if (script !== null) {\r\n      const lines = script.split('\\n')\r\n      for (let i = 0; i < lines.length; i++) {\r\n        if ((lines[i] !== '') && (this.parse_variable(lines[i]) === false)) {\r\n          const tokens = this.syntax.split(lines[i])\r\n          if ((tokens.length > 0) && (tokens[0] === 'draw')) {\r\n            if (this.experiment.items._isClass(tokens[1]) === true) {\r\n              var element = this.experiment.items._newElementClass(tokens[1], this, lines[i])\r\n              this.elements.push(element)\r\n            } else {\r\n              this.experiment._runner._debugger.addError('Failed to parse definition: ' + tokens[1])\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Sort the elements usin the z-index.\r\n      this.elements.sort(this._compare)\r\n    }\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    // Clear the canvas.\r\n    this.canvas.clear()\r\n\r\n    // Draw the elements.\r\n    for (let i = 0; i < this.elements.length; i++) {\r\n      if (this.elements[i].is_shown() === true) {\r\n        this.elements[i].draw()\r\n      }\r\n    }\r\n\r\n    // Inherited.\r\n    super.prepare()\r\n  }\r\n\r\n  /** Implements the run phase of the Sketschpad. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Check if background color needs to be changed\r\n    const backgroundColor = this.vars.get('background')\r\n    if (backgroundColor) {\r\n      this.canvas._styles.background_color = backgroundColor\r\n    }\r\n\r\n    // Set the onset and start the stimulus response process.\r\n    this.set_item_onset(this.canvas.show())\r\n    this.set_sri(false)\r\n    this.process_response()\r\n  }\r\n\r\n  * coroutine () {\r\n    yield\r\n    this.set_item_onset(this.canvas.show())\r\n  }\r\n}\r\n","import Sketchpad from './sketchpad.js'\r\n\r\n/**\r\n * Class representing a feedback item.\r\n * @extends Sketchpad\r\n */\r\nexport default class Feedback extends Sketchpad {\r\n  /**\r\n   * Create a feedback which show feedback info to the subhect.\r\n   * @param {Object} experiment - The experiment item to which the item belongs.\r\n   * @param {String} name - The unique name of the item.\r\n   * @param {String} script - The script containing the properties of the item.\r\n   */\r\n  constructor (experiment, name, script) {\r\n    // Inherited create.\r\n    super(experiment, name, script)\r\n\r\n    // Definition of public properties.\r\n    this.description = 'Provides feedback to the participant'\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    // Inherited.\r\n    super._complete()\r\n\r\n    // Reset feedback variables.\r\n    if (this.vars.reset_variables === 'yes') {\r\n      this.experiment.reset_feedback()\r\n    }\r\n  }\r\n\r\n  /** Resets all item variables to their default value. */\r\n  reset () {\r\n    // Inherited.\r\n    super.reset()\r\n\r\n    // Reset the variables.\r\n    this.vars.reset_variables = 'yes'\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    this._parent._prepare_complete()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    // Inherited.\r\n    super.prepare()\r\n    super.run()\r\n  }\r\n}\r\n","import Item from './item.js'\r\n\r\n/**\r\n * Class representing an inline item.\r\n * @extends Item\r\n */\r\nexport default class InlineScript extends Item {\r\n  /**\r\n     * Create an inline item which executes inline python code.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited create.\r\n    super(experiment, name, script)\r\n\r\n    // Define and set the public properties.\r\n    this.description = 'Executes Python code'\r\n\r\n    // Define and set the public properties.\r\n    this._prepare_run = false\r\n    this._prepare_tree = null\r\n    this._run_tree = null\r\n\r\n    // Process the script.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    // Check if the parser is in pause mode and must be restarted.\r\n    if (this.experiment._runner._pythonParser._status === 1) {\r\n      // Process the current active node.\r\n      this.experiment._runner._pythonParser._process_nodes()\r\n    } else {\r\n      if (this._prepare_run === true) {\r\n        // Inherited prepare.\r\n        super.prepare()\r\n      } else {\r\n        // Inherited.\r\n        super._complete()\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Implements the complete script phase of an item. */\r\n  _complete_script () {\r\n    // Added for video script functionaliry.\r\n    this._complete()\r\n  }\r\n\r\n  /** Reset all item variables to their default value. */\r\n  reset () {\r\n    this.vars._prepare = ''\r\n    this.vars._run = ''\r\n  }\r\n\r\n  /**\r\n     * Parse a definition string and retrieve all properties of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  from_string (script) {\r\n    // Parses a definition string.\r\n    this.reset()\r\n\r\n    // Split the string into an array of lines.\r\n    if (script !== null) {\r\n      var read_run_lines = false\r\n      var read_prepare_lines = false\r\n      var lines = script.split('\\n')\r\n      for (var i = 0; i < lines.length; i++) {\r\n        var tokens = this.syntax.split(lines[i])\r\n        if ((tokens !== null) && (tokens.length > 0)) {\r\n          switch (tokens[0]) {\r\n            case 'set':\r\n              this.parse_variable(lines[i])\r\n              break\r\n            case '__end__':\r\n              read_run_lines = false\r\n              read_prepare_lines = false\r\n              break\r\n            case '___prepare__':\r\n              read_prepare_lines = true\r\n              break\r\n            case '___run__':\r\n              read_run_lines = true\r\n              break\r\n            default:\r\n              if (read_run_lines === true) {\r\n                this.vars._run = this.vars._run + lines[i] + '\\n'\r\n              } else if (read_prepare_lines === true) {\r\n                this.vars._prepare = this.vars._prepare + lines[i] + '\\n'\r\n              }\r\n          }\r\n        } else {\r\n          if (read_run_lines === true) {\r\n            this.vars._run = this.vars._run + lines[i] + '\\n'\r\n          } else if (read_prepare_lines === true) {\r\n            this.vars._prepare = this.vars._prepare + lines[i] + '\\n'\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    // Compile the script code to ast trees.\r\n    this._prepare_tree = this.experiment._runner._pythonParser._parse(this.vars._prepare)\r\n    this._run_tree = this.experiment._runner._pythonParser._parse(this.vars._run)\r\n\r\n    // Execute the run code.\r\n    if (this._prepare_tree !== null) {\r\n      // Set the current item.\r\n      this.experiment._runner._events._currentItem = this\r\n\r\n      // Set the prepare run toggle.\r\n      this._prepare_run = true\r\n\r\n      // Record the onset of the current item.\r\n      this.set_item_onset()\r\n\r\n      // Start the parser\r\n      this.experiment._runner._pythonParser._run(this, this._prepare_tree)\r\n    } else {\r\n      // Inherited.\r\n      super.prepare()\r\n    }\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Set the prepare run toggle.\r\n    this._prepare_run = false\r\n\r\n    // Record the onset of the current item.\r\n    this.set_item_onset()\r\n\r\n    // Execute the run code.\r\n    if (this._run_tree !== null) {\r\n      // Start the parser\r\n      this.experiment._runner._pythonParser._run(this, this._run_tree)\r\n    } else {\r\n      // To prevent prepeare script from running twice.\r\n      this.experiment._runner._pythonParser._status = 0\r\n\r\n      // No script, so jump to compelte.\r\n      this._complete()\r\n    }\r\n  }\r\n}\r\n","import Item from './item.js'\r\n\r\n/**\r\n * Class representing an inline item.\r\n * @extends Item\r\n */\r\nexport default class InlineJavaScript extends Item {\r\n  /**\r\n     * Create an inline item which executes inline python code.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited create.\r\n    super(experiment, name, script)\r\n    // Define and set the public properties.\r\n    this.description = 'Executes JavaScript code (ECMA 5.1)'\r\n    this.workspace = experiment._javascriptWorkspace\r\n    // Process the script\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Reset all item variables to their default value. */\r\n  reset () {\r\n    this.vars._prepare = ''\r\n    this.vars._run = ''\r\n  }\r\n\r\n  /**\r\n     * Parse a definition string and retrieve all properties of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  from_string (script) {\r\n    // Parses a definition string.\r\n    this.reset()\r\n    // Split the string into an array of lines.\r\n    if (script !== null) {\r\n      var read_run_lines = false\r\n      var read_prepare_lines = false\r\n      var lines = script.split('\\n')\r\n      for (var i = 0; i < lines.length; i++) {\r\n        var tokens = this.syntax.split(lines[i])\r\n        if ((tokens !== null) && (tokens.length > 0)) {\r\n          switch (tokens[0]) {\r\n            case 'set':\r\n              this.parse_variable(lines[i])\r\n              break\r\n            case '__end__':\r\n              read_run_lines = false\r\n              read_prepare_lines = false\r\n              break\r\n            case '___prepare__':\r\n              read_prepare_lines = true\r\n              break\r\n            case '___run__':\r\n              read_run_lines = true\r\n              break\r\n            default:\r\n              if (read_run_lines === true) {\r\n                this.vars._run = this.vars._run + lines[i] + '\\n'\r\n              } else if (read_prepare_lines === true) {\r\n                this.vars._prepare = this.vars._prepare + lines[i] + '\\n'\r\n              }\r\n          }\r\n        } else {\r\n          if (read_run_lines === true) {\r\n            this.vars._run = this.vars._run + lines[i] + '\\n'\r\n          } else if (read_prepare_lines === true) {\r\n            this.vars._prepare = this.vars._prepare + lines[i] + '\\n'\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    this.workspace._eval(this.vars._prepare)\r\n    super.prepare()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    super.run()\r\n    this.set_item_onset()\r\n    this.workspace._eval(this.vars._run)\r\n    this._complete()\r\n  }\r\n}\r\n","import GenericResponse from './generic_response.js'\r\nimport Keyboard from '../backends/keyboard.js'\r\n\r\n/**\r\n * Class representing a keyboard response item.\r\n * @extends GenericResponse\r\n */\r\nexport default class KeyboardResponse extends GenericResponse {\r\n  /**\r\n     * Create a keyboard response item which waits for a keyboard response.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited.\r\n    super(experiment, name, script)\r\n\r\n    // Definition of public properties.\r\n    this.description = 'Collects keyboard responses'\r\n\r\n    // Definition of private properties.\r\n    this._flush = 'yes'\r\n    this._keyboard = new Keyboard(this.experiment)\r\n\r\n    // Process the script.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Resets all item variables to their default value. */\r\n  reset () {\r\n    this.auto_response = 'space'\r\n    this.process_feedback = true\r\n    this.vars.allowed_responses = null\r\n    this.vars.correct_response = null\r\n    this.vars.duration = 'keypress'\r\n    this.vars.flush = 'yes'\r\n    this.vars.timeout = 'infinite'\r\n  }\r\n\r\n  /** Implements the prepare phase of the KeyboardResponse. */\r\n  prepare () {\r\n    // Set the internal flush property.\r\n    this._flush = (this.vars.flush) ? this.vars.flush : 'yes'\r\n\r\n    // Inherited.\r\n    super.prepare()\r\n  }\r\n\r\n  /** Implements the run phase of the KeyboardResponse. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Record the onset of the current item.\r\n    this.set_item_onset()\r\n\r\n    // Flush responses, to make sure that earlier responses are not carried over.\r\n    if (this._flush === 'yes') {\r\n      this._keyboard.flush()\r\n    }\r\n\r\n    this.set_sri()\r\n    this.process_response()\r\n  }\r\n\r\n  * coroutine () {\r\n    const keyDownHandler = (event) => {\r\n      const keypress = this.experiment._runner._events._processKeyboardEvent(event, 1)\r\n      let allowed_responses = 'all'\r\n      if (this.vars.get('allowed_responses')) {\r\n        allowed_responses = this._keyboard._get_default_from_synoniem(\r\n          this.vars.get('allowed_responses').split(';').map(key => key.trim())\r\n        )\r\n      }\r\n\r\n      if (allowed_responses === 'all' || allowed_responses.includes(keypress.resp)) {\r\n        this.response = keypress\r\n      }\r\n    }\r\n\r\n    window.addEventListener('keydown', keyDownHandler)\r\n    yield\r\n    // Record the onset of the current item.\r\n    this.set_item_onset()\r\n\r\n    this.set_sri()\r\n    let proceed = true\r\n    this.response = null\r\n    while (!this.response && proceed) {\r\n      proceed = yield true\r\n    }\r\n    window.removeEventListener('keydown', keyDownHandler)\r\n    if (this.response) this.process_response_keypress(this.response)\r\n  }\r\n}\r\n","import GenericResponse from './generic_response.js'\r\nimport Mouse from '../backends/mouse.js'\r\n\r\n/**\r\n * Class representing a mouse response item.\r\n * @extends GenericResponse\r\n */\r\nexport default class MouseResponse extends GenericResponse {\r\n  /**\r\n     * Create an mouse response item which waits for a mouse response.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited.\r\n    super(experiment, name, script)\r\n\r\n    // Definition of public properties.\r\n    this.description = 'Collects mouse responses'\r\n    this.resp_codes = {}\r\n\r\n    // Definition of private properties.\r\n    this._flush = 'yes'\r\n    this._mouse = new Mouse(this.experiment)\r\n\r\n    // Process the script.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Implements the complete phase of the Sketschpad. */\r\n  _complete () {\r\n    // Hide the mouse cursor.\r\n    this._mouse.show_cursor(false)\r\n\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /** Resets all item variables to their default value. */\r\n  reset () {\r\n    this.auto_response = 1\r\n    this.process_feedback = true\r\n    this.resp_codes = {}\r\n    this.resp_codes['0'] = 'timeout'\r\n    this.resp_codes['1'] = 'left_button'\r\n    this.resp_codes['2'] = 'middle_button'\r\n    this.resp_codes['3'] = 'right_button'\r\n    this.resp_codes['4'] = 'scroll_up'\r\n    this.resp_codes['5'] = 'scroll_down'\r\n    this.vars.allowed_responses = null\r\n    this.vars.correct_response = null\r\n    this.vars.duration = 'mouseclick'\r\n    this.vars.flush = 'yes'\r\n    this.vars.show_cursor = 'yes'\r\n    this.vars.timeout = 'infinite'\r\n  }\r\n\r\n  /** Implements the prepare phase of the Sketschpad. */\r\n  prepare () {\r\n    // Set the internal flush property.\r\n    this._flush = (this.vars.flush) ? this.vars.flush : 'yes'\r\n\r\n    // Inherited.\r\n    super.prepare()\r\n  }\r\n\r\n  /** Implements the run phase of the Sketschpad. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Record the onset of the current item.\r\n    this.set_item_onset()\r\n\r\n    // Show the cursor if defined.\r\n    if (this.vars.show_cursor === 'yes') {\r\n      this._mouse.show_cursor(true)\r\n    }\r\n\r\n    // Flush responses, to make sure that earlier responses are not carried over.\r\n    if (this._flush === 'yes') {\r\n      this._mouse.flush()\r\n    }\r\n\r\n    this.set_sri()\r\n    this.process_response()\r\n  }\r\n\r\n  * coroutine () {\r\n    const mouseDownHandler = (event) => {\r\n      this.response = this.experiment._runner._events._processMouseEvent(event, 1)\r\n    }\r\n\r\n    const touchHandler = (event) => {\r\n      event.button = 0\r\n      event.clientX = event.changedTouches[0].clientX\r\n      event.clientY = event.changedTouches[0].clientY\r\n      this.response = this.experiment._runner._events._processMouseEvent(event, 1)\r\n    }\r\n\r\n    window.addEventListener('mousedown', mouseDownHandler)\r\n    window.addEventListener('touchstart', touchHandler)\r\n\r\n    yield\r\n    // Show the cursor if defined.\r\n    if (this.vars.show_cursor === 'yes') {\r\n      this._mouse.show_cursor(true)\r\n    }\r\n\r\n    // Record the onset of the current item.\r\n    this.set_item_onset()\r\n\r\n    this.set_sri()\r\n    let proceed = true\r\n    this.response = null\r\n    while (!this.response && proceed) {\r\n      proceed = yield true\r\n    }\r\n    window.removeEventListener('mousedown', mouseDownHandler)\r\n    window.removeEventListener('touchstart', touchHandler)\r\n    if (this.response) this.process_response_mouseclick(this.response)\r\n  }\r\n}\r\n","import Item from './item.js'\r\nimport { constants } from '../system/constants.js'\r\n\r\n/**\r\n * Class representing a logger item.\r\n * @extends Item\r\n */\r\nexport default class Logger extends Item {\r\n  /**\r\n     * Create an experiment item which controls the OpenSesame experiment.\r\n     * @param {Object} pExperiment - The experiment item to which the item belongs.\r\n     * @param {String} pName - The unique name of the item.\r\n     * @param {String} pScript - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    super(experiment, name, script)\r\n    this.description = 'Logs experimental data'\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /** Reset all item variables to their default value. */\r\n  reset () {\r\n    this.logvars = []\r\n    this.vars.auto_log = 'yes'\r\n  }\r\n\r\n  /**\r\n     * Parse a definition string and retrieve all properties of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  from_string (script) {\r\n    this.reset()\r\n    if (script !== null) {\r\n      var lines = script.split('\\n')\r\n      for (var i = 0; i < lines.length; i++) {\r\n        if ((lines[i] !== '') && (this.parse_variable(lines[i]) === false)) {\r\n          var tokens = this.syntax.split(lines[i])\r\n          if ((tokens[0] === 'log') && (tokens.length > 0)) {\r\n            this.logvars.push(tokens[1])\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.logvars.sort()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    super.run()\r\n    if (this._status !== constants.STATUS_FINALIZE) {\r\n      this._status = constants.STATUS_FINALIZE\r\n      this.set_item_onset()\r\n      this.experiment._log.write_vars(\r\n        (this.vars.get('auto_log') === 'yes')\r\n          ? this.logvars.concat(this.experiment.vars.inspect()).sort()\r\n          : this.logvars\r\n      )\r\n      this._complete()\r\n    }\r\n  }\r\n}\r\n","import {\r\n  constants\r\n} from '../system/constants.js'\r\n\r\nlet audioCtx = null\r\ntry {\r\n  audioCtx = new (window.AudioContext || window.webkitAudioContext)()\r\n} catch (e) {\r\n  console.warning('Web Audio API is not supported in this browser')\r\n}\r\n\r\n/** Class representing a sampler. */\r\nexport default class SamplerBackend {\r\n  /**\r\n   * Create a sampler object which controls the sampler device.\r\n   * @param {Object} experiment - The experiment to which the sampler belongs.\r\n   * @param {String} source - The sound source name.\r\n   * @param {Number} volume - The volume to use when playing the sound.\r\n   * @param {Number} pitch - The pitch to use when playing the sound.\r\n   * @param {Number} pan - The pan to use when playing the sound.\r\n   * @param {String} duration - The duration of the sound.\r\n   * @param {Number} fade - The fade to use when playing the sound.\r\n   * @param {Boolean} block - If true use the sound ad a block wave.\r\n   */\r\n  constructor (experiment, source, volume, pitch, pan, duration, fade, block) {\r\n    // Create and set public properties.\r\n    this.block = (typeof block === 'undefined') ? false : block\r\n    this.duration = (typeof duration === 'undefined') ? 'sound' : duration\r\n    this.experiment = experiment\r\n    this.volume = (typeof volume === 'undefined') ? 1 : volume\r\n    this.fade = (typeof fade === 'undefined') ? 0 : fade\r\n    this.pan = (typeof pan === 'undefined') ? 0 : pan\r\n    this.pitch = (typeof pitch === 'undefined') ? 1 : pitch\r\n\r\n    try {\r\n      this.sample = source.data.cloneNode()\r\n    } catch (e) {\r\n      console.error(`Could not play sound:`, source)\r\n      throw e\r\n    }\r\n    this.sample.onended = () => this.experiment._runner._events._audioEnded(this)\r\n\r\n    if (audioCtx) {\r\n      this.source = audioCtx.createMediaElementSource(this.sample)\r\n    } else {\r\n      this.source = this.sample\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Play a sound file.\r\n   * @param {Number} volume - The volume to use when playing the sound.\r\n   * @param {Number} pitch - The pitch to use when playing the sound.\r\n   * @param {Number} pan - The pan to use when playing the sound.\r\n   * @param {String} duration - The duration of the sound.\r\n   * @param {Number} fade - The fade to use when playing the sound.\r\n   * @param {Boolean} block - If true use the sound ad a block wave.\r\n   */\r\n  play (volume, pitch, pan, duration, fade, block) {\r\n    // Check if optional parameters are defined.\r\n    this.block = block || this.block\r\n    this.duration = typeof duration === 'undefined' ? this.duration : duration\r\n    this.volume = typeof volume === 'undefined' ? this.volume : volume\r\n    this.pitch = typeof pitch === 'undefined' ? this.pitch : pitch\r\n    this.pan = typeof pan === 'undefined' ? this.pan : pan\r\n    this.fade = typeof fade === 'undefined' ? this.fade : fade\r\n\r\n    if (audioCtx) {\r\n      if (audioCtx.state === 'suspended') audioCtx.resume()\r\n      this.source.connect(this.applyFilters())\r\n    } else {\r\n      this.source.volume = this.volume\r\n    }\r\n\r\n    this.sample.play()\r\n  }\r\n\r\n  /** Set the blocking of the sound (wait period). */\r\n  wait () {\r\n    // Set the blocking of the sound.\r\n    this.experiment._runner._events._run(this, -1, constants.RESPONSE_SOUND, [])\r\n  }\r\n\r\n  applyFilters () {\r\n    const nodes = [audioCtx.destination]\r\n\r\n    try {\r\n      const gainNode = audioCtx.createGain()\r\n      gainNode.gain.setValueAtTime(this.volume, audioCtx.currentTime)\r\n\r\n      if (this.fade) {\r\n        gainNode.gain.setValueAtTime(0, audioCtx.currentTime)\r\n        gainNode.gain.linearRampToValueAtTime(this.volume, audioCtx.currentTime + this.fade / 1000)\r\n      }\r\n\r\n      nodes.unshift(gainNode)\r\n    } catch (e) {\r\n      console.warning('Unable to apply volume or gain', e)\r\n    }\r\n\r\n    if (this.pan) {\r\n      try {\r\n        nodes.unshift(new StereoPannerNode(audioCtx, { pan: this.pan }))\r\n      } catch (e) {\r\n        console.warning('Unable to apply panning', e)\r\n      }\r\n    }\r\n\r\n    // Connect the filters creating a chain\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      if (nodes[i] !== audioCtx.destination) {\r\n        nodes[i].connect(nodes[i + 1])\r\n      }\r\n    }\r\n\r\n    return nodes.shift(0)\r\n  }\r\n}\r\n","import GenericResponse from './generic_response.js'\r\nimport SamplerBackend from '../backends/sampler.js'\r\n\r\n/**\r\n * Class representing a sampler item.\r\n * @extends GenericResponse\r\n */\r\nexport default class Sampler extends GenericResponse {\r\n  /**\r\n     * Create a sampler  item which plays a sound.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited create.\r\n    super(experiment, name, script)\r\n\r\n    // Definition of public properties.\r\n    this.block = false\r\n    this.description = 'Plays a sound file in .wav or .ogg format'\r\n\r\n    // Definition of private properties.\r\n    this._sample = null\r\n    this._sampler = null\r\n\r\n    // Process the script.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Reset all item variables to their default value. */\r\n  reset () {\r\n    this.block = false\r\n    this.vars.sample = ''\r\n    this.vars.pan = 0\r\n    this.vars.pitch = 1\r\n    this.vars.fade_in = 0\r\n    this.vars.stop_after = 0\r\n    this.vars.volume = 1\r\n    this.vars.duration = 'sound'\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    // Create the sample\r\n    if (this.vars.sample !== '') {\r\n      // Retrieve the content from the file pool.\r\n      this._sample = this._runner._pool[this.syntax.eval_text(this.vars.sample, this.vars, false)]\r\n      this._sampler = new SamplerBackend(this.experiment, this._sample)\r\n      this._sampler.volume = this.vars.volume\r\n      this._sampler.duration = this.vars.duration\r\n      this._sampler.fade = this.vars.fade\r\n      this._sampler.pan = this.vars.pan\r\n      this._sampler.pitch = this.vars.pitch\r\n    } else {\r\n      // Show error message.\r\n      this._runner._debugger.addError('No sample has been specified in sampler: ' + this.vars.sample)\r\n    }\r\n\r\n    // Inherited.\r\n    super.prepare()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    this.set_item_onset()\r\n    this.set_sri()\r\n    this._sampler.play()\r\n    this.process_response()\r\n  }\r\n}\r\n","import Sampler from './sampler.js'\r\n\r\n/**\r\n * Class representing a synth item.\r\n * @extends Sampler\r\n */\r\nexport default class Synth extends Sampler {\r\n  /**\r\n     * Create a synth item which create a synthessised sound wave.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} Ssript - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited create.\r\n    super(experiment, name, script)\r\n\r\n    // Define and set the public properties.\r\n    this.description = 'A basic sound synthesizer'\r\n  }\r\n}\r\n","/** Class representing a general visual element. */\r\nexport default class BaseElement {\r\n  /**\r\n   * Create a log object which stores all the response data.\r\n   * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n   * @param {String} script - The script containing properties of the visual element.\r\n   * @param {Object} defaults - The default property values of the visual element.\r\n   */\r\n  constructor (sketchpad, script, defaults) {\r\n    // Set class parameter properties.\r\n    this.canvas = sketchpad.canvas\r\n    this.defaults = defaults\r\n    this.defaults.show_if = 'always'\r\n    this.defaults.z_index = 0\r\n    this.experiment = sketchpad.experiment\r\n    this.fix_coordinates = (sketchpad.vars.uniform_coordinates === 'yes')\r\n    this.name = sketchpad.name\r\n    this.only_keywords = false\r\n    this.pool = sketchpad.experiment.pool\r\n    this.properties = {}\r\n    this.sketchpad = sketchpad\r\n    this.syntax = sketchpad.syntax\r\n    this.vars = sketchpad.vars\r\n\r\n    // Set the private properties.\r\n    this._properties = null\r\n\r\n    // Read the definition string.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /**\r\n   * Parses the element from a definition string.\r\n   *\r\n   * @param {String} script The definition script line to be parsed.\r\n   * @memberof BaseElement\r\n   */\r\n  from_string (script) {\r\n    this.properties = this.sketchpad.syntax.parse_cmd(script)[2]\r\n  }\r\n\r\n  /**\r\n   * Determines the drawing order of the elements.\r\n   *\r\n   * @returns {Number}\r\n   * @memberof BaseElement\r\n   */\r\n  z_index () {\r\n    return this.properties.z_index\r\n  }\r\n\r\n  /**\r\n   * Calculate the dynamic elements within properties.\r\n   *\r\n   * @memberof BaseElement\r\n   */\r\n  eval_properties () {\r\n    // Evaluates all properties and return them.\r\n    const xc = this.experiment.vars.width / 2\r\n    const yc = this.experiment.vars.height / 2\r\n\r\n    this._properties = Object.entries(this.properties).reduce((result, [prop, val]) => {\r\n      let value = this.syntax.eval_text(val, this.vars, false)\r\n\r\n      if (['x', 'x1', 'x2'].includes(prop)) {\r\n        value = Math.round(Number(value) + xc)\r\n      }\r\n\r\n      if (['y', 'y1', 'y2'].includes(prop)) {\r\n        value = Math.round(Number(value) + yc)\r\n      }\r\n\r\n      result[prop] = value\r\n      return result\r\n    }, {})\r\n  }\r\n\r\n  /**\r\n   * Determines whether the element should be shown, based on the show-if statement.\r\n   *\r\n   * @returns {Boolean} Returns true if the element must be shown.\r\n   * @memberof BaseElement\r\n   */\r\n  is_shown () {\r\n    // Set the self of the current workspace.\r\n    this.experiment.python_workspace['self'] = this.sketchpad\r\n\r\n    // Determines whether the element should be shown, based on the show-if statement.\r\n    return this.experiment.python_workspace._eval(this.experiment.syntax.compile_cond(this.properties['show_if']))\r\n  }\r\n\r\n  /**\r\n   * Draws the element\r\n   *\r\n   * @memberof BaseElement\r\n   */\r\n  draw () {\r\n    // Calculate the dynamic properties.\r\n    this.eval_properties()\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\nimport Styles from '../backends/styles.js'\r\n\r\n/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nexport default class Arrow extends BaseElement {\r\n  /**\r\n   * Create an experiment item which controls the OpenSesame experiment.\r\n   * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n   * @param {String} script - The script containing properties of the visual element.\r\n   */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.arrow_body_length = 0.8\r\n    defaults.arrow_body_width = 0.5\r\n    defaults.arrow_head_width = 30\r\n    defaults.fill = 1\r\n    defaults.color = sketchpad.vars.get('foreground')\r\n    defaults.penwidth = 1\r\n    defaults.x1 = null\r\n    defaults.y1 = null\r\n    defaults.x2 = null\r\n    defaults.y2 = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Create a styles object containing style information\r\n    var styles = new Styles()\r\n    styles.background_color = this._properties.color\r\n    styles.color = this._properties.color\r\n    styles.fill = this._properties.fill\r\n    styles.penwidth = this._properties.penwidth\r\n\r\n    // Draw the arrow element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.arrow(this._properties.x1, this._properties.y1,\r\n      this._properties.x2, this._properties.y2, this._properties.arrow_body_width,\r\n      this._properties.arrow_body_length, this._properties.arrow_head_width,\r\n      styles)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\nimport Styles from '../backends/styles.js'\r\n\r\n/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nexport default class Circle extends BaseElement {\r\n  /**\r\n   * Create an experiment item which controls the OpenSesame experiment.\r\n   * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n   * @param {String} script - The script containing properties of the visual element.\r\n   */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.color = sketchpad.vars.get('foreground')\r\n    defaults.fill = 0\r\n    defaults.penwidth = 1\r\n    defaults.x = null\r\n    defaults.y = null\r\n    defaults.r = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Create a styles object containing style information\r\n    var styles = new Styles()\r\n    styles.background_color = this._properties.color\r\n    styles.color = this._properties.color\r\n    styles.fill = this._properties.fill\r\n    styles.penwidth = this._properties.penwidth\r\n\r\n    // Draw the circle element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.circle(this._properties.x, this._properties.y,\r\n      this._properties.r, styles)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\nimport Styles from '../backends/styles.js'\r\n\r\n/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nexport default class Ellipse extends BaseElement {\r\n  /**\r\n   * Create an experiment item which controls the OpenSesame experiment.\r\n   * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n   * @param {String} script - The script containing properties of the visual element.\r\n   */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    const defaults = {\r\n      fill: 1,\r\n      color: sketchpad.vars.get('foreground'),\r\n      penwidth: 1,\r\n      x: null,\r\n      y: null,\r\n      w: null,\r\n      h: null\r\n    }\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Create a styles object containing style information\r\n    var styles = new Styles()\r\n    styles.background_color = this._properties.color\r\n    styles.color = this._properties.color\r\n    styles.fill = this._properties.fill\r\n    styles.penwidth = this._properties.penwidth\r\n\r\n    // Draw the ellipse element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.ellipse(Number(this._properties.x),\r\n      Number(this._properties.y), Number(this._properties.w),\r\n      Number(this._properties.h), styles)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\nimport Styles from '../backends/styles.js'\r\n\r\n/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nexport default class Fixdot extends BaseElement {\r\n  /**\r\n   * Create an experiment item which controls the OpenSesame experiment.\r\n   * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n   * @param {String} script - The script containing properties of the visual element.\r\n   */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.color = sketchpad.vars.get('foreground')\r\n    defaults.style = 'default'\r\n    defaults.x = null\r\n    defaults.y = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Create a styles object containing style information\r\n    var styles = new Styles(this.sketchpad)\r\n    styles.color = this._properties.color\r\n    // Draw the fixdot element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.fixdot(this._properties.x, this._properties.y,\r\n      this._properties.style, styles)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\n\r\n/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nexport default class Gabor extends BaseElement {\r\n  /**\r\n   * Create an experiment item which controls the OpenSesame experiment.\r\n   * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n   * @param {String} script - The script containing properties of the visual element.\r\n   */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.bgmode = 'avg'\r\n    defaults.color1 = 'white'\r\n    defaults.color2 = 'black'\r\n    defaults.env = 'gaussian'\r\n    defaults.freq = 1\r\n    defaults.orient = 0\r\n    defaults.phase = 0\r\n    defaults.size = 96\r\n    defaults.stdev = 12\r\n    defaults.x = null\r\n    defaults.y = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Draw the gabor element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.gabor(this._properties.x, this._properties.y,\r\n      this._properties.orient, this._properties.freq, this._properties.env,\r\n      this._properties.size, this._properties.stdev, this._properties.phase,\r\n      this._properties.color1, this._properties.color2, this._properties.bgmode)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\n\r\n/**\r\n * Class representing an image element.\r\n * @extends BaseElement\r\n */\r\nexport default class ImageElement extends BaseElement {\r\n  /**\r\n     * Create an experiment item which controls the OpenSesame experiment.\r\n     * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n     * @param {String} script - The script containing properties of the visual element.\r\n     */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    const defaults = {}\r\n    defaults.center = 1\r\n    defaults.file = null\r\n    defaults.scale = 1\r\n    defaults.x = null\r\n    defaults.y = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n\r\n    // Set the class private properties.\r\n    this._file = null\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Draw the image element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.image(this._properties.file, this._properties.center,\r\n      this._properties.x, this._properties.y, this._properties.scale)\r\n  }\r\n}\r\n","/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nimport BaseElement from './base_element.js'\r\nimport Styles from '../backends/styles.js'\r\n\r\nexport default class Line extends BaseElement {\r\n  /**\r\n     * Create an experiment item which controls the OpenSesame experiment.\r\n     * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n     * @param {String} script - The script containing properties of the visual element.\r\n     */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.color = sketchpad.vars.get('foreground')\r\n    defaults.penwidth = 1\r\n    defaults.x1 = null\r\n    defaults.y1 = null\r\n    defaults.x2 = null\r\n    defaults.y2 = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Create a styles object containing style information\r\n    var styles = new Styles()\r\n    styles.color = this._properties.color\r\n    styles.penwidth = this._properties.penwidth\r\n\r\n    // Draw the line element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.line(this._properties.x1, this._properties.y1,\r\n      this._properties.x2, this._properties.y2, styles)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\n\r\n/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nexport default class Noise extends BaseElement {\r\n  /**\r\n   * Create an experiment item which controls the OpenSesame experiment.\r\n   * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n   * @param {String} script - The script containing properties of the visual element.\r\n   */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.color1 = 'white'\r\n    defaults.color2 = 'black'\r\n    defaults.env = 'gaussian'\r\n    defaults.size = 96\r\n    defaults.stdev = 12\r\n    defaults.x = null\r\n    defaults.y = null\r\n    defaults.bgmode = 'avg'\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Draw the noise element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.noise(this._properties.x, this._properties.y,\r\n      this._properties.env, this._properties.size, this._properties.stdev,\r\n      this._properties.color1, this._properties.color2, this._properties.bgmode)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\nimport Styles from '../backends/styles.js'\r\n\r\n/**\r\n * Class representing an arrow element.\r\n * @extends BaseElement\r\n */\r\nexport default class Rect extends BaseElement {\r\n  /**\r\n     * Create an experiment item which controls the OpenSesame experiment.\r\n     * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n     * @param {String} script - The script containing properties of the visual element.\r\n     */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.fill = 1\r\n    defaults.color = sketchpad.vars.get('foreground')\r\n    defaults.penwidth = 1\r\n    defaults.x = null\r\n    defaults.y = null\r\n    defaults.w = null\r\n    defaults.h = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n\r\n    // Create a styles object containing style information\r\n    var styles = new Styles()\r\n    styles.fill = this._properties.fill\r\n    styles.color = this._properties.color\r\n    styles.background_color = this._properties.color\r\n    styles.penwidth = this._properties.penwidth\r\n\r\n    // Draw the rectangle element to the canvas of the sketchpad.\r\n    this.sketchpad.canvas.rect(this._properties.x, this._properties.y,\r\n      this._properties.w, this._properties.h, styles)\r\n  }\r\n}\r\n","import BaseElement from './base_element.js'\r\nimport Styles from '../backends/styles.js'\r\n\r\n/**\r\n * Class representing a textline element.\r\n * @extends BaseElement\r\n */\r\nexport default class Textline extends BaseElement {\r\n  /**\r\n     * Create an experiment item which controls the OpenSesame experiment.\r\n     * @param {Object} sketchpad - The sketchpad item that owns the visual element.\r\n     * @param {String} script - The script containing properties of the visual element.\r\n     */\r\n  constructor (sketchpad, script) {\r\n    // Create a default property container.\r\n    var defaults = {}\r\n    defaults.center = 1\r\n    defaults.color = sketchpad.vars.get('foreground')\r\n    defaults.font_family = sketchpad.vars.get('font_family')\r\n    defaults.font_size = sketchpad.vars.get('font_size')\r\n    defaults.font_bold = sketchpad.vars.get('font_bold')\r\n    defaults.font_italic = sketchpad.vars.get('font_italic')\r\n    defaults.html = 'yes'\r\n    defaults.text = null\r\n    defaults.x = null\r\n    defaults.y = null\r\n\r\n    // Inherited.\r\n    super(sketchpad, script, defaults)\r\n  }\r\n\r\n  /** Implements the draw phase of an element. */\r\n  draw () {\r\n    // Inherited.\r\n    super.draw()\r\n    const text = this._properties.text\r\n    // Create a styles object containing style information\r\n    const styles = new Styles()\r\n    styles.color = this._properties.color\r\n    styles.font_family = this._properties.font_family\r\n    styles.font_size = Number(this._properties.font_size)\r\n    styles.font_italic = (this._properties.font_italic === 'yes')\r\n    styles.font_bold = (this._properties.font_bold === 'yes')\r\n    styles.font_underline = (this._properties.font_underline === 'yes')\r\n\r\n    this.sketchpad.canvas.text(text, this._properties.center,\r\n      this._properties.x, this._properties.y, this._properties.html,\r\n      styles)\r\n  }\r\n}\r\n","import { Container, Graphics } from 'pixi.js'\n/** Class representing an OpenSesame Widget. */\nexport default class Widget {\n  /**\n     * Create a widget object which is the base class for all widgets.\n     * @param {Object} form - The form  which the widget belongs.\n     */\n  constructor (form) {\n    // Set the class public properties.\n    this.focus = false\n    this.form = form\n    this.rect = null\n    this.type = 'widget'\n    this.var = null\n\n    // Create the widget container.\n    this._container = new Container() // - Create the container which represents the canvas.\n  }\n\n  /**\n     * Draw a frame around the widget.\n     * @param {Number|String} rect - The coordinates of the frame (ignored).\n     * @param {Number|String} style - The style to use (ignored).\n     */\n  draw_frame (rect, style) {\n    // Create the background line elements.\n    var line = new Graphics()\n    line.lineStyle(1, this.form._canvas._styles._convertColorValue(this.form._themes.theme['gray'].lineColorLeftTop), 1)\n    line.moveTo(this._container._width, 0)\n    line.lineTo(0, 0)\n    line.lineTo(0, this._container._height)\n    line.lineStyle(1, this.form._canvas._styles._convertColorValue(this.form._themes.theme['gray'].lineColorRightBottom), 1)\n    line.lineTo(this._container._width, this._container._height)\n    line.lineTo(this._container._width, 0)\n    line.x = 0\n    line.y = 0\n\n    // Create the background color element.\n    var rectangle = new Graphics()\n    rectangle.lineStyle(1, this.form._canvas._styles._convertColorValue(this.form._themes.theme['gray'].backgroundColor), 1)\n    rectangle.beginFill(this.form._canvas._styles._convertColorValue(this.form._themes.theme['gray'].backgroundColor))\n    rectangle.drawRect(1, 1, this._container._width - 2, this._container._height - 2)\n    rectangle.endFill()\n    rectangle.x = 0\n    rectangle.y = 0\n\n    // Add the line element to container.\n    this._container.addChild(rectangle)\n    this._container.addChild(line)\n  }\n\n  /**\n     * Sets an experimental variable.\n     * @param {Boolean|Number|String} value - The value for the variable.\n     * @param {String} variable - The name of the variabler to set.\n     */\n  set_var (value, variable) {\n    // Sets an experimental variable.\n    if (variable === null) {\n      variable = this.var\n    }\n\n    if (variable !== null) {\n      this.form.experiment.vars.set(variable, value)\n    }\n  }\n}\n","import Widget from './widget.js'\nimport { Rectangle, Text } from 'pixi.js'\nimport { constants } from '../system/constants.js'\n\n/**\n * Class representing an OpenSesame label Widget.\n * @extends LabelWidget\n */\nexport default class ButtonWidget extends Widget {\n  /**\n     * Create a widget button object which represents a push button.\n     * @param {Object} form - The form  which the widget belongs.\n     * @param {Object} properties - The properties belonging to the widget.\n     */\n  constructor (form, properties) {\n    // Inherited create.\n    super(form, properties)\n\n    // Set the class public properties.\n    this.center = (typeof properties['center'] !== 'undefined') ? (properties['center'] === 'yes') : true\n    this.frame = (typeof properties['frame'] !== 'undefined') ? (properties['frame'] === 'yes') : true\n    this.text = properties['text']\n    this.type = 'button'\n    this.var = (typeof properties['var'] !== 'undefined') ? properties['var'] : this.var\n\n    // Set the current value of the variable to false (not pressed).\n    this.set_var(false, this.var)\n  }\n\n  /**\n     * Draw the label widget.\n     * @param {Number|String} text - The text for the labe.\n     * @param {Number|String} html - Toggle if the text contains html (ignored).\n     */\n  draw_text (text, html) {\n    //  Create the text element\n    var text_style = {\n      fontFamily: this.form._canvas._styles.font_family,\n      fontSize: this.form.experiment.vars.font_size,\n      fontStyle: (this.form.experiment.vars.font_italic === 'yes') ? 'italic' : 'normal',\n      fontWeight: (this.form.experiment.vars.font_bold === 'yes') ? 'bold' : 'normal',\n      fill: this.form.experiment.vars.foreground\n    }\n    var text_element = new Text(text, text_style)\n\n    // Position the text element.\n    if (this.center === true) {\n      text_element.x = (this._container._width - text_element.width) / 2\n      text_element.y = (this._container._height - text_element.height) / 2\n    } else {\n      text_element.x = 5\n      text_element.y = 5\n    }\n\n    // Add the text_element to the container.\n    this._container.addChild(text_element)\n  }\n\n  /** General drawing method for the label widget. */\n  render () {\n    // Set the interactive mode (if not set yet).\n    if ((this.form.item.vars.only_render === 'no') && (this._container.interactive === false)) {\n      this._container.interactive = true\n      this._container.buttonMode = true\n      this._container.hitArea = new Rectangle(0, 0, this._container._width, this._container._height)\n      this._container.on('mousedown', function (event) { this.response(event) }.bind(this))\n      this._container.on('touchstart', function (event) { this.response(event) }.bind(this))\n    }\n\n    // Draw the frame (if enabled).\n    if (this.frame === true) {\n      this.draw_frame()\n    }\n\n    // Update the text.\n    var text = this.form.experiment.syntax.eval_text(this.text, null, false)\n\n    // Draw the text.\n    this.draw_text(text)\n  }\n\n  /**\n     * Process the response for the button widget.\n     * @param {Object} event - The response event.\n     */\n  response (event) {\n    // Set the attached variable.\n    this.set_var(true, this.var)\n\n    // Complete the item element.\n    if (this.form.timeout === null) {\n      this.form.item._complete()\n    } else {\n      this.form.experiment._runner._events._currentItem._status = constants.STATUS_FINALIZE\n    }\n  }\n}\n","import Widget from './widget.js'\nimport { Text, Graphics, Rectangle } from 'pixi.js'\nimport { constants } from '../system/constants.js'\n\n/** Class representing an OpenSesame text input Widget. */\nexport default class CheckBoxWidget extends Widget {\n  /**\n     * Create a widget object which represents a text label.\n     * @param {Object} form - The form  which the widget belongs.\n     * @param {Object} properties - The properties belonging to the widget.\n     */\n  constructor (form, properties) {\n    // Inherited create.\n    super(form)\n\n    // Set the class public properties.\n    this.checked = (typeof properties['checked'] !== 'undefined') ? (properties['checked'] === 'yes') : false\n    this.click_accepts = (typeof properties['click_accepts'] !== 'undefined') ? (properties['click_accepts'] === 'yes') : false\n    this.frame = (typeof properties['frame'] !== 'undefined') ? (properties['frame'] === 'yes') : false\n    this.group = (typeof properties['group'] !== 'undefined') ? properties['group'] : null\n    this.text = (typeof properties['text'] !== 'undefined') ? properties['text'] : ''\n    this.var = (typeof properties['var'] !== 'undefined') ? properties['var'] : null\n    this.type = 'checkbox'\n\n    // Set the class private properties.\n    this._checkbox = null\n  }\n\n  /**\n     * Draw the label widget.\n     * @param {Number|String} text - The text for the labe.\n     * @param {Number|String} html - Toggle if the text contains html (ignored).\n     */\n  draw_text (text, html) {\n    //  Create the text element\n    var text_style = {\n      fontFamily: this.form._canvas._styles.font_family,\n      fontSize: this.form.experiment.vars.font_size,\n      fontStyle: (this.form.experiment.vars.font_italic === 'yes') ? 'italic' : 'normal',\n      fontWeight: (this.form.experiment.vars.font_bold === 'yes') ? 'bold' : 'normal',\n      fill: this.form.experiment.vars.foreground\n    }\n    var text_element = new Text(text, text_style)\n    text_element.x = 24\n    text_element.y = 5\n\n    // PIXI: create the border box.\n    var box_lines = new Graphics()\n    box_lines.lineStyle(1, 0x000000)\n    box_lines.moveTo(1, 0)\n    box_lines.lineTo(13, 0)\n    box_lines.moveTo(14, 1)\n    box_lines.lineTo(14, 13)\n    box_lines.moveTo(0, 1)\n    box_lines.lineTo(0, 13)\n    box_lines.moveTo(1, 14)\n    box_lines.lineTo(13, 14)\n    box_lines.x = 5\n    box_lines.y = 7\n\n    //  create the fill box.\n    var box_fill = new Graphics()\n    box_fill.lineStyle(1, 0xffffff, 1)\n    box_fill.beginFill(0xffffff)\n    box_fill.drawRect(1, 1, 12, 12)\n    box_fill.endFill()\n    box_fill.x = 5\n    box_fill.y = 7\n\n    //  create the check line.\n    this._checkbox = new Graphics()\n    this._checkbox.lineStyle(1, 0x04b010)\n    this._checkbox.moveTo(4, 5)\n    this._checkbox.lineTo(7, 12)\n    this._checkbox.lineTo(12, 3)\n    this._checkbox.x = 5\n    this._checkbox.y = 7\n    this._checkbox.visible = false\n\n    // Add the text_element to the container.\n    this._container.addChild(box_lines)\n    this._container.addChild(box_fill)\n    this._container.addChild(this._checkbox)\n    this._container.addChild(text_element)\n  }\n\n  /** General drawing method for the label widget. */\n  render () {\n    // Set the interactive mode (if not set yet).\n    if (this._container.interactive === false) {\n      this._container.interactive = true\n      this._container.buttonMode = true\n      this._container.hitArea = new Rectangle(0, 0, this._container._width, this._container._height)\n      this._container.on('mousedown', function (event) {\n        this.response(event)\n      }.bind(this))\n      this._container.on('touchstart', function (event) {\n        this.response(event)\n      }.bind(this))\n    }\n\n    // Clear the old content.\n    this._container.removeChildren()\n\n    // Draw the frame (if enabled).\n    if (this.frame === true) {\n      this.draw_frame()\n    }\n\n    // Update the text.\n    var text = this.form.experiment.syntax.eval_text(this.text, null, false)\n\n    // Draw the text.\n    this.draw_text(text)\n\n    // Set the toggle\n    this.set_checked(this.checked)\n  }\n\n  /**\n     * Set the status of the checkbox.\n     * @param {Boolean} checked - Toggle to check or uncheck the checkbox.\n     */\n  set_checked (checked) {\n    // Set the property.\n    this.checked = checked\n\n    // PIXY: set the checkbox element.\n    this._checkbox.visible = checked\n\n    // Rerender the form.\n    this.form._canvas.show(this.form.experiment)\n\n    // Adjust the widget.\n    this.set_var(checked)\n  }\n\n  /**\n     * Process the response for the text input widget.\n     * @param {Object} event - The response event.\n     */\n  response (event) {\n    // Check if the checkbox is part of a group\n    if (this.group !== null) {\n      // Set group response.\n      for (var i = 0; i < this.form.widgets.length; i++) {\n        if ((this.form.widgets[i].type === 'checkbox') && (this.form.widgets[i] !== this) &&\n          (this.form.widgets[i].group === this.group)) {\n          this.form.widgets[i].set_checked(false)\n        }\n      }\n\n      // Set checkbox.\n      this.set_checked(true)\n    } else {\n      // Set single response.\n      this.set_checked(!this.checked)\n    }\n\n    // Complete the item element if accept_clicks is set to true.\n    if (this.click_accepts === true) {\n      if (this.form.timeout === null) {\n        this.form.item._complete()\n      } else {\n        this.form.experiment._runner._events._currentItem._status = constants.STATUS_FINALIZE\n      }\n    }\n  }\n\n  /**\n     * Sets an experimental variable.\n     * @param {Boolean|Number|String} pVal - The value for the variable.\n     * @param {String} pVar - The name of the variabler to set.\n     */\n  set_var (pVal, pVar) {\n    // set variable.\n    var variable = (typeof pVar !== 'undefined') ? pVar : this.var\n\n    // Only set variable if it is defined.\n    if (variable !== null) {\n      var values = []\n      for (var i = 0; i < this.form.widgets.length; i++) {\n        if ((this.form.widgets[i].type === 'checkbox') && (this.form.widgets[i].var === this.var) && (this.form.widgets[i].checked === true)) {\n          values.push(this.form.widgets[i].text)\n        }\n      }\n\n      // Inherited.\n      if (values === []) {\n        super.set_var('no', variable)\n      } else {\n        super.set_var(values.join(';'), variable)\n      }\n    }\n  }\n}\n","/** Class representing OpenSesame themes. */\nexport default class Themes {\n  /** Create a themes object which cpntains a list of html themes. */\n  constructor () {\n    // Definition of public properties.\n    this.theme = []\n    this.theme['gray'] = {\n      backgroundColor: '#888a85',\n      box_size: 16,\n      lineColorLeftTop: '#babdb6',\n      lineColorRightBottom: '#555753'\n    }\n  }\n}\n","import Canvas from '../backends/canvas.js'\nimport Themes from './themes.js'\nimport { constants } from '../system/constants.js'\n\n/** Class representing an Form widget for showing widgets. */\nexport default class FormWidget {\n  /**\n     * Create a form widget object used to show widget elements to the subject.\n     * @param {Object} experiment - The experiment item to which the form belongs.\n     * @param {String} cols - The unique name of the item.\n     * @param {String} rows - The unique name of the item.\n     * @param {String} spacing - The script containing the properties of the item.\n     * @param {String} margins - The script containing the properties of the item.\n     * @param {String} theme - The script containing the properties of the item.\n     * @param {Object} item - The item to which the form belongs.\n     * @param {String} timeout - The script containing the properties of the item.\n     * @param {String} clicks - The script containing the properties of the item.\n     */\n  constructor (experiment, cols, rows, spacing, margins, theme, item, timeout, clicks) {\n    // Set the class public properties.\n    this.clicks = clicks\n    this.cols = cols\n    this.experiment = experiment\n    this.height = this.experiment.vars.height\n    this.item = (item !== null) ? item : experiment\n    this.margins = margins\n    this.rows = rows\n    this.spacing = spacing\n    this.span = []\n    this.theme = theme\n    this.timeout = timeout\n    this.widgets = []\n    this.width = this.experiment.vars.width\n\n    // Calculate the total number ot rows and columns.\n    this.colNr = 0\n    for (let i = 0; i < cols.length; i++) {\n      this.colNr = this.colNr + Number(cols[i])\n    }\n    this.rowNr = 0\n    for (let i = 0; i < rows.length; i++) {\n      this.rowNr = this.rowNr + Number(rows[i])\n    }\n\n    // Set the class private properties.\n    this._groupId = 0\n\n    // Create the form canvas.\n    this._canvas = new Canvas(this.experiment, false)\n    this._canvas._styles.background_color = experiment.vars.background\n\n    // Set the form dimensions.\n    this._canvas._container.height = experiment.vars.height\n    this._canvas._container.width = experiment.vars.width\n    this._canvas._styles.font_family = experiment.vars.font_family\n\n    // Create the themes object.\n    this._themes = new Themes()\n  }\n\n  /** Create a unique group id for muliple rating scale groups. */\n  _getGroupId () {\n    // Return a unique group id and increase it.\n    return this._groupId++\n  }\n\n  /**\n     * Execute and render the form.\n     * @param {Object} pFocus_widget - The widget which receives focus (optional).\n     */\n  _exec (focus_widget) {\n    // Render the form.\n    this.render()\n\n    // Enabled the focus widget.\n    if (focus_widget !== null) {\n      // Focus the text_input widget.\n      focus_widget.setFocus()\n    }\n\n    // Set the timer to form pause.\n    this.experiment._runner._events._state = constants.TIMER_FORM\n\n    // PIXI: Set the cursor visibility to none (default).\n    this.experiment._runner._renderer.view.style.cursor = 'default'\n\n    // Set the onset time.\n    this.item.set_item_onset()\n\n    // Set the duration parameter.\n    if ((this.timeout !== null) && (this.item !== null)) {\n      this.item.sleep(this.timeout)\n    }\n  }\n\n  /** General drawing method for the label widget. */\n  render () {\n    // Clear the old content.\n    this._canvas._container.removeChildren()\n\n    // render all widgets.\n    for (var i = 0; i < this.widgets.length; i++) {\n      // Add the widget to the container.\n      this._canvas._container.addChild(this.widgets[i]._container)\n\n      // Render the widget.\n      this.widgets[i].render()\n    }\n\n    // Show the form.\n    this._canvas.show(this.experiment)\n  }\n\n  /**\n     * Add a widget to a location on the form.\n     * @param {Object} widget - The widget to add to the form.\n     * @param {Object} pos - The position of the widget.\n     * @param {Number} colSpan - The width of the widget.\n     * @param {Number} rowSpan - The height of the widget.\n     */\n  set_widget (widget, pos, colSpan, rowSpan) {\n    // Calculate the form width and height minus the margins.\n    var form_width = this.experiment.vars.width - Number(this.margins[1]) - Number(this.margins[3])\n    var form_height = this.experiment.vars.height - Number(this.margins[0]) - Number(this.margins[2])\n\n    // Calculate the position and dimension of the widget on the form.\n    var x = Number(this.margins[3]) + Number(this.spacing)\n    for (let i = 0; i < Number(pos[0]); i++) {\n      x = x + (Number(this.cols[i]) / this.colNr) * form_width\n    }\n    var y = Number(this.margins[0]) + Number(this.spacing)\n    for (let i = 0; i < Number(pos[1]); i++) {\n      y = y + (Number(this.rows[i]) / this.rowNr) * form_height\n    }\n    var width = 0\n    let range = Number(Number(pos[0]) + Number(colSpan))\n    for (let i = Number(pos[0]); i < range; i++) {\n      width = width + Number(this.cols[i])\n    }\n    width = (width / this.colNr) * form_width - 2 * Number(this.spacing)\n\n    let height = 0\n    range = Number(Number(pos[1]) + Number(rowSpan))\n    for (var i = Number(pos[1]); i < range; i++) {\n      height = height + Number(this.rows[i])\n    }\n    height = (height / this.rowNr) * form_height - 2 * Number(this.spacing)\n\n    // Set the widget position and dimensions.\n    widget._container.width = Math.round(width)\n    widget._container.height = Math.round(height)\n    widget._container.x = Math.round(x)\n    widget._container.y = Math.round(y)\n\n    // Add the widget to the list.\n    this.widgets.push(widget)\n  }\n}\n","import Widget from './widget.js'\n\n/**\n * Class representing an OpenSesame label Widget.\n * @extends Widget\n */\nexport default class ImageWidget extends Widget {\n  /**\n     * Create a widget object which represents a text label.\n     * @param {Object} form - The form to which the widget belongs.\n     * @param {Object} properties - The properties belonging to the widget.\n     */\n  constructor (form, properties) {\n    // Inherited create.\n    super(form)\n\n    // Set the class public properties.\n    this.adjust = (typeof properties['adjust'] !== 'undefined') ? (properties['adjust'] === 'true') : true\n    this.frame = (typeof properties['frame'] !== 'undefined') ? (properties['frame'] === 'yes') : false\n    this.path = (typeof properties['path'] !== 'undefined') ? properties['path'] : null\n    this.type = 'image'\n  }\n\n  /** General drawing method for the label widget. */\n  render () {\n    // Clear the old content.\n    this._container.removeChildren()\n\n    // Draw the frame (if enabled).\n    if (this.frame === true) {\n      this.draw_frame()\n    }\n\n    // Get image from file pool.\n    var name = this.form.experiment._runner._syntax.remove_quotes(this.path)\n    var img = this.form.experiment._runner._pool[name].data\n\n    // Create a temporary canvas to make an image data array.\n    var canvas = document.createElement('canvas')\n    canvas.width = img.width\n    canvas.height = img.height\n    var ctx = canvas.getContext('2d')\n    ctx.drawImage(img, 0, 0)\n\n    // Create the image sprite.\n    var sprite = new PIXI.Sprite(PIXI.Texture.fromCanvas(canvas))\n\n    // Adjust the dimensions of the sprite.\n    if (this.adjust === true) {\n      // Calculate the aspect ratio.\n      var ar = (img.width / img.height)\n      // Adjust the size.\n      if (this._container._height >= this._container._width) {\n        // Stretch horizontal.\n        sprite.width = this._container._width\n        sprite.height = ar * this._container._width\n        sprite.x = 0\n        sprite.y = (this._container._height - sprite.height) / 2\n      } else {\n        // Stretc vertical.\n        sprite.height = this._container._height\n        sprite.width = ar * this._container._height\n        sprite.x = (this._container._width - sprite.width) / 2\n        sprite.y = 0\n      }\n    } else {\n      // No adjusting, just position the sprite in center of the widget.\n      sprite.x = (this._container._width / 2) - (sprite.width / 2)\n      sprite.y = (this._container._height / 2) - (sprite.height / 2)\n    }\n\n    // Add the image to the stage.\n    this._container.addChild(sprite)\n  }\n}\n","import ImageWidget from './image_widget.js'\nimport { Rectangle } from 'pixi.js'\nimport { constants } from '../system/constants.js'\n\n/**\n * Class representing an OpenSesame Image Button Widget.\n * @extends ImageWidget\n */\nexport default class ImageButtonWidget extends ImageWidget {\n  /**\n     * Create a widget object which represents a text label.\n     * @param {Object} form - The form  which the widget belongs.\n     * @param {Object} properties - The properties belonging to the widget.\n     */\n  constructor (form, properties) {\n    // Inherited create.\n    super(form, properties)\n\n    // Set the class public properties.\n    this.type = 'image_button'\n    this.var = (typeof properties['var'] !== 'undefined') ? properties['var'] : null\n\n    // Set the current status of the checkbox.\n    this.set_var(false, this.var)\n  }\n\n  /** General drawing method for the label widget. */\n  render () {\n    // Set the interactive mode (if not set yet).\n    if ((this.form.item.vars.only_render === 'no') && (this._container.interactive === false)) {\n      this._container.interactive = true\n      this._container.buttonMode = true\n      this._container.hitArea = new Rectangle(0, 0, this._container._width, this._container._height)\n      this._container.on('mousedown', function (event) {\n        this.response(event)\n      }.bind(this))\n      this._container.on('touchstart', function (event) {\n        this.response(event)\n      }.bind(this))\n    }\n\n    // Inherited.\n    super.render()\n  }\n\n  /**\n     * Process the response for the button widget.\n     * @param {Object} event - The response event.\n     */\n  response (event) {\n    // Set the current status of the checkbox.\n    this.set_var(true, this.var)\n\n    // Complete the item element.\n    if (this.form.timeout === null) {\n      this.form.item._complete()\n    } else {\n      this.form.experiment._runner._events._currentItem._status = constants.STATUS_FINALIZE\n    }\n  }\n}\n","import { Text } from 'pixi.js'\nimport Widget from './widget.js'\n\n/**\n * Class representing an OpenSesame label Widget.\n * @extends Widget\n */\nexport default class LabelWidget extends Widget {\n  /**\n   * Create a widget object which represents a text label.\n   * @param {Object} form - The form  which the widget belongs.\n   * @param {Object} properties - The properties belonging to the widget.\n   */\n  constructor (form, properties) {\n    // Inherited create.\n    super(form)\n\n    // Set the class public properties.\n    this.center = (typeof properties['center'] !== 'undefined')\n      ? (properties['center'] === 'yes')\n      : true\n    this.frame = (typeof properties['frame'] !== 'undefined')\n      ? (properties['frame'] === 'yes')\n      : false\n    this.text = properties['text']\n    this.type = 'label'\n  }\n\n  /**\n     * Convert a text string to a collection of lines.\n     * @param {Number|String} text - The text to convert into lines.\n     * @param {Number} width - The height of the containing box.\n     * @param {Number} height - The width of the containing box.\n     * @param {Object} text_style - The styling of the text.\n     * @param {Array} - Array of text lines.\n     */\n  text_lines (text, width, height, text_style) {\n    // Create a temporary canvas context.\n    var canvas = document.createElement('canvas')\n    canvas.width = 800\n    canvas.height = 600\n    var buffer_context = canvas.getContext('2d')\n\n    // Set the context font style.\n    buffer_context.font = text_style.fontSize + 'px ' + text_style.fontFamily\n    if (text_style.fontWeight === 'bold') {\n      buffer_context.font = 'bold ' + buffer_context.font\n    }\n    if (text_style.fontStyle === 'italic') {\n      buffer_context.font = 'italic ' + buffer_context.font\n    }\n\n    // Create the lines of text\n    var words = text.split(' ')\n    var lines = []\n    var line = ''\n    var line_length = 0\n    while (words.length > 0) {\n      // Get the next word and the length of the word with one space.\n      var word = words.shift()\n      var word_length = buffer_context.measureText(word + ' ').width\n      if (word === '<br/>') {\n        // line is done, add it to the lines.\n        lines.push(line)\n        // Set the new line.\n        line = ''\n        line_length = word_length\n      } else if ((line_length + word_length) > width) {\n        // line is done, add it to the lines.\n        lines.push(line)\n        // Set the new line.\n        line = word\n        line_length = word_length\n      } else {\n        // Add the word to the line\n        line = (line === '') ? word : line + ' ' + word\n        // increate the length of the line.\n        line_length = line_length + word_length\n      }\n    }\n\n    // Check for remainder words.\n    lines.push(line)\n\n    // Return the lines.\n    return lines\n  }\n\n  /**\n     * Draw the label widget.\n     * @param {Number|String} text - The text for the label.\n     * @param {Number|String} html - Toggle if the text contains html (ignored).\n     */\n  draw_text (text, html) {\n    // Create the text element\n    var text_style = {\n      fontFamily: this.form._canvas._styles.font_family,\n      fontSize: this.form.experiment.vars.font_size,\n      fontStyle: (this.form.experiment.vars.font_italic === 'yes') ? 'italic' : 'normal',\n      fontWeight: (this.form.experiment.vars.font_bold === 'yes') ? 'bold' : 'normal',\n      fill: this.form.experiment.vars.foreground\n    }\n    // Get the lines and properties.\n    const text_elements = this.text_lines(text, this._container._width - 10,\n      this._container._height - 10, text_style)\n    const lineProperties = this.form._canvas._getTextBaseline('MgyQ', text_style.fontFamily,\n      text_style.fontSize, text_style.fontWeight)\n\n    // Calculate the starting y position.\n    let y = (this.center === true) ? (this._container._height - ((text_elements.length) * lineProperties.height)) / 2 : 5\n    // Create the lines.\n    for (let i = 0; i < text_elements.length; i++) {\n      const text_element = new Text(text_elements[i], text_style)\n      text_element.x = Math.round((this.center === true) ? (this._container._width - text_element.width) / 2 : 5)\n      text_element.y = Math.round(y)\n      y = y + lineProperties.height\n\n      // Add the text_element to the container.\n      this._container.addChild(text_element)\n    }\n  }\n\n  /** General drawing method for the label widget. */\n  render () {\n    // Clear the old content.\n    this._container.removeChildren()\n\n    // Draw the frame (if enabled).\n    if (this.frame === true) {\n      this.draw_frame()\n    }\n\n    // Update the text.\n    const text = this.form.experiment.syntax.eval_text(this.text, this.form.item.vars, false)\n\n    // Draw the text.\n    this.draw_text(text)\n  }\n}\n","import Widget from './widget.js'\nimport { Graphics, Container, Rectangle } from 'pixi.js'\n\n/** Class representing an OpenSesame text input Widget. */\nexport default class RatingScaleWidget extends Widget {\n  /**\n   * Create a widget object which represents a text label.\n   * @param {Object} form - The form  which the widget belongs.\n   * @param {Object} properties - The properties belonging to the widget.\n   */\n  constructor (form, properties) {\n    // Inherited create.\n    super(form)\n\n    // Set the class public properties.\n    this.click_accepts = (typeof properties['click_accepts'] !== 'undefined') ? (properties['click_accepts'] === 'yes') : false\n    this.default = (typeof properties['default'] !== 'undefined') ? properties['default'] : null\n    this.orientation = (typeof properties['orientation'] !== 'undefined') ? properties['orientation'] : 'horizontal'\n    this.nodes = (typeof properties['nodes'] !== 'undefined') ? properties['nodes'] : '5'\n    this.var = (typeof properties['var'] !== 'undefined') ? properties['var'] : null\n    this.type = 'rating_scale'\n\n    // Set the class private properties.\n    this._checkBoxes = []\n    this._groupId = this.form._getGroupId()\n\n    // Create a list of possible nodes.\n    this._processNodes()\n  }\n\n  /** Create a list of checkbox nodes. */\n  _processNodes () {\n    // Process the nodes.\n    this._nodes = []\n\n    // Check for a valid number.\n    if (!isNaN(parseFloat(this.nodes)) && isFinite(this.nodes)) {\n      // Create alist of empty nodes.\n      for (var i = 0; i < Number(this.nodes); i++) {\n        this._nodes.push('')\n      }\n    } else {\n      // Create a list of\n      var labels = this.nodes.split(';')\n      for (let i = 0; i < labels.length; i++) {\n        this._nodes.push(labels[i])\n      }\n    }\n  }\n\n  /** Draw a border for the rating scale.\n     * @param {Number} x - x position of the checkbox.\n     * @param {Number} y - y position of the checkbox.\n     * @param {Number} width - width of the border.\n     * @param {Number} height - height of the border.\n     */\n  _drawBorder (x, y, width, height) {\n    // Create the rectangle element.\n    var rectangle = new Graphics()\n    rectangle.lineStyle(1, this.form._canvas._styles._convertColorValue(this.form._themes.theme['gray'].backgroundColor), 1)\n    rectangle.drawRect(x, y, width, height)\n    rectangle.x = 0\n    rectangle.y = 0\n\n    // Add the rectangle to the container.\n    this._container.addChild(rectangle)\n  }\n\n  /** Draw a checkbox element\n     * @param {Number} x - x position of the checkbox.\n     * @param {Number} y - y position of the checkbox.\n     */\n  _drawCheckBox (x, y) {\n    // PIXI: create the border box.\n    var box_lines = new Graphics()\n    box_lines.lineStyle(1, 0x000000)\n    box_lines.moveTo(1, 0)\n    box_lines.lineTo(13, 0)\n    box_lines.moveTo(14, 1)\n    box_lines.lineTo(14, 13)\n    box_lines.moveTo(0, 1)\n    box_lines.lineTo(0, 13)\n    box_lines.moveTo(1, 14)\n    box_lines.lineTo(13, 14)\n    box_lines.x = 5\n    box_lines.y = 7\n\n    // PIXI: create the fill box.\n    var box_fill = new Graphics()\n    box_fill.lineStyle(1, 0xffffff, 1)\n    box_fill.beginFill(0xffffff)\n    box_fill.drawRect(1, 1, 12, 12)\n    box_fill.endFill()\n    box_fill.x = 5\n    box_fill.y = 7\n\n    //  create the check line.\n    var box_check = new Graphics()\n    box_check.lineStyle(1, 0x04b010)\n    box_check.moveTo(4, 5)\n    box_check.lineTo(7, 12)\n    box_check.lineTo(12, 3)\n    box_check.x = 5\n    box_check.y = 7\n    box_check.visible = false\n\n    // Add the elements to a container.\n    var container = new Container()\n    container.addChild(box_lines)\n    container.addChild(box_fill)\n    container.addChild(box_check)\n    container.x = x\n    container.y = y\n\n    // Add the wisget to the container.\n    this._container.addChild(container)\n    this._checkBoxes.push(container)\n\n    // Set the interactive mode.\n    container.interactive = true\n    container.buttonMode = true\n    container.hitArea = new Rectangle(0, 5, 15, 15)\n    container.on('mousedown', function (event) {\n      this.response(event)\n    }.bind(this))\n    container.on('touchstart', function (event) {\n      this.response(event)\n    }.bind(this))\n  }\n\n  /** Draw a label element\n     * @param {Number} x - x position of the checkbox.\n     * @param {Number} y - y position of the checkbox.\n     * @param {String} text - the text for the label.\n     * @param {Boolean} horizotal - if true horizontal otherwise vertical.\n     */\n  _drawText (x, y, text, horizontal) {\n    // PIXI - Create the text element\n    var text_style = {\n      fontFamily: this.form._canvas._styles.font_family,\n      fontSize: this.form.experiment.vars.font_size,\n      fontStyle: (this.form.experiment.vars.font_italic === 'yes') ? 'italic' : 'normal',\n      fontWeight: (this.form.experiment.vars.font_bold === 'yes') ? 'bold' : 'normal',\n      fill: this.form.experiment.vars.foreground\n    }\n\n    // Get the lines and properties.\n    var lineProperties = this.form._canvas._getTextBaseline(text, text_style.fontFamily, text_style.fontSize, text_style.fontWeight)\n    var text_element = new Text(text, text_style)\n    if (horizontal === true) {\n      text_element.x = x - (text_element.width / 2) + 15\n      text_element.y = y - lineProperties.height\n    } else {\n      text_element.x = x - text_element.width - 15\n      text_element.y = y + 2\n    }\n\n    // Add the text_element to the container.\n    this._container.addChild(text_element)\n  }\n\n  /** General drawing method for the label widget. */\n  render () {\n    // Set the interactive mode (if not set yet).\n    if ((this.form.item.vars.only_render === 'no') && (this._container.interactive === false)) {\n      this._container.interactive = true\n      this._container.buttonMode = true\n      this._container.hitArea = new Rectangle(0, 0, this._container._width, this._container._height)\n    }\n\n    // Clear the old content.\n    this._checkBoxes = []\n    this._container.removeChildren()\n\n    // Set the default positions.\n    var cx = this._container._width / 2\n    var cy = this._container._height / 2\n    var _h = this.form._themes.theme['gray'].box_size\n\n    // Define horizontal or vertical positioning.\n    if (this.orientation === 'horizontal') {\n      // Calculate the distances between the checkboxes.\n      var dx = (1 * this._container._width - 3 * _h) / (this._nodes.length - 1)\n\n      // Create the rounding rectangle.\n      this._drawBorder(0, cy - 0.5 * _h, this._container._width, 2 * _h)\n\n      // create the label and checkbox widgets.\n      var _x = _h\n      for (var i = 0; i < this._nodes.length; i++) {\n        // Create the checkbox widget\n        this._drawCheckBox(_x, cy - 5)\n\n        // Update the text.\n        const text = this.form.experiment.syntax.eval_text(this._nodes[i], null, false)\n\n        // Create the text label;\n        this._drawText(_x, cy - 8, text, true)\n\n        // Increase the position.\n        _x = _x + dx\n      }\n    } else {\n      // Calculate the distances between the checkboxes.\n      var dy = (1 * this._container._height - 3 * _h) / (this._nodes.length - 1)\n\n      // Create the rounding rectangle.\n      this._drawBorder(cx - 0.5 * _h, 0, 2 * _h, this._container._height)\n\n      // create the label and checkbox widgets.\n      var _y = _h\n      for (let i = 0; i < this._nodes.length; i++) {\n        // Create the checkbox widget\n        this._drawCheckBox(cx - 5, _y)\n\n        // Update the text.\n        var text = this.form.experiment.syntax.eval_text(this._nodes[i], null, false)\n\n        // Create the text label;\n        this._drawText(cx - 8, _y, text, false)\n\n        // Increase the position.\n        _y = _y + dy\n      }\n    }\n\n    // Enable the default checkbox.\n    if (this.default !== null) {\n      // Enable the checkbox.\n      this._checkBoxes[Number(this.default)].children[2].visible = true\n\n      // Set the value\n      this.set_value(Number(this.default))\n    }\n  }\n\n  /**\n     * Process the response for the text input widget.\n     * @param {Object} event - The response event.\n     */\n  response (event) {\n    // Parse trough the boxes.\n    for (var i = 0; i < this._checkBoxes.length; i++) {\n      if (this._checkBoxes[i] === event.currentTarget) {\n        // Enable the checkbox.\n        this._checkBoxes[i].children[2].visible = true\n\n        // Set the value for the rating scale.\n        this.set_value(i)\n      } else {\n        // Disable the checkbox.\n        this._checkBoxes[i].children[2].visible = false\n      }\n    }\n  }\n\n  /**\n     * Sets the rating scale value.\n     * @param {Number} value - The value for the rating scale.\n     */\n  set_value (value) {\n    // Chekc for a valid value\n    if ((value === null) && ((value < 0) || (value > this._nodes.length))) {\n      this.form.experiment._runner._debugger.addError('Trying to select a non-existing node. Did you specify an incorrect default value?')\n    } else {\n      // Set the value property.\n      this.value = value\n\n      // Set te variable.\n      this.set_var(value)\n    }\n  }\n\n  /**\n     * Sets an experimental variable.\n     * @param {Boolean|Number|String} pVal - The value for the variable.\n     * @param {String} pVar - The name of the variabler to set.\n     */\n  set_var (pVal, pVar) {\n    // set variable.\n    var variable = (typeof pVar !== 'undefined') ? pVar : this.var\n\n    // Only set variable if it is defined.\n    if (variable !== null) {\n      var values = []\n      for (var i = 0; i < this.form.widgets.length; i++) {\n        if ((this.form.widgets[i].type === 'checkbox') && (this.form.widgets[i].var === this.var) && (this.form.widgets[i].checked === true)) {\n          values.push(this.form.widgets[i].text)\n        }\n      }\n\n      // Inherited.\n      if (values === []) {\n        super.set_var('no', variable)\n      } else {\n        super.set_var(values.join(';'), variable)\n      }\n    }\n  }\n}\n","import Widget from './widget.js'\nimport {\n  constants\n} from '../system/constants.js'\n\n// import TextInput from 'pixi-text-input'\n\n/**\n * Class representing an OpenSesame Image Widget.\n * @extends Widget\n */\nexport default class TextInputWidget extends Widget {\n  /**\n   * Create a widget button object which represents a text input.\n   * @param {Object} form - The form  which the widget belongs.\n   * @param {Object} properties - The properties belonging to the widget.\n   */\n  constructor (form, properties) {\n    // Inherited create.\n    super(form)\n\n    // Set the class public properties.\n    this.center = (typeof properties['center'] !== 'undefined') ? (properties['center'] === 'yes') : false\n    this.focus = false\n    this.frame = (typeof properties['frame'] !== 'undefined') ? (properties['frame'] === 'yes') : true\n    this.stub = (typeof properties['stub'] !== 'undefined') ? properties['stub'] : 'Type here...'\n    this.text = (typeof properties['text'] !== 'undefined') ? properties['text'] : ''\n    this.var = (typeof properties['var'] !== 'undefined') ? properties['var'] : null\n    this.return_accepts = (typeof properties['return_accepts'] !== 'undefined') ? (properties['return_accepts'] === 'yes') : false\n    this.type = 'text_input'\n  }\n\n  /** Focus the Text area widget. */\n  setFocus () {\n    // Set focus toggle.\n    this.focus = true\n  }\n\n  /**\n   * Process the response for the text input widget.\n   * @param {Object} event - The response event.\n   */\n  response (widget, event) {\n    // Set the variable.\n    widget.set_var(widget.inputField.text, widget.var)\n\n    // Only respond to enter key.\n    if ((event.keyCode === 13) && (widget.return_accepts === true)) {\n      // Complete the item element.\n      if (widget.form.timeout === null) {\n        widget.form.item._complete()\n      } else {\n        widget.form.experiment._runner._events._currentItem._status = constants.STATUS_FINALIZE\n      }\n    }\n  }\n\n  /**\n   * Draw the label widget.\n   * @param {Number|String} pText - The text for the labe.\n   * @param {Number|String} pHtml - Toggle if the text contains html (ignored).\n   */\n  draw_text (text, html) {\n    const box_style = {\n      fill: this.form._canvas._styles._convertColorValue(this.form.experiment.vars.background),\n      rounded: 5\n    }\n\n    // PIXI - Create the text element\n    const text_style = {\n      fontFamily: this.form._canvas._styles.font_family,\n      fontSize: this.form.experiment.vars.font_size,\n      fontStyle: (this.form.experiment.vars.font_italic === 'yes') ? 'italic' : 'normal',\n      fontWeight: (this.form.experiment.vars.font_bold === 'yes') ? 'bold' : 'normal',\n      fill: this.form.experiment.vars.foreground\n    }\n    // this.inputField = new TextInput(text_style, box_style)\n    // this.inputField.x = 5\n    // this.inputField.y = 5\n    // this.inputField.keydown = this.response\n    // this.inputField.focus()\n    // this._container.addChild(this.inputField)\n  }\n\n  /** General drawing method for the label widget. */\n  render () {\n    // Clear the old content.\n    this._container.removeChildren()\n\n    // // Draw the frame (if enabled).\n    // if (this.frame === true) {\n    //   this.draw_frame()\n    // }\n\n    // Draw the text.\n    this.draw_text(this.text)\n  }\n}\n","import Item from '../items/item.js'\r\nimport {\r\n  isNumber\r\n} from 'lodash'\r\n\r\n/**\r\n * Class representing a advanced delay item.\r\n * @extends Item\r\n */\r\nexport default class AdvancedDelay extends Item {\r\n  /**\r\n   * Create an advanced delay plugin item which delays for e specific duration the experiment.\r\n   * @param {Object} experiment - The experiment item to which the item belongs.\r\n   * @param {String} name - The unique name of the item.\r\n   * @param {String} script - The script containing the properties of the item.\r\n   */\r\n  constructor (experiment, name, script) {\r\n    super(experiment, name, script)\r\n    this.description = 'Waits for a specified duration'\r\n    this._duration = -1\r\n    this.from_string(script)\r\n  }\r\n\r\n  /**\r\n   * Gaussian distribution function.\r\n   * @param {Number} mean - The mean value.\r\n   * @param {Number} std - The standard deviation value.\r\n   * @return {Number} - result value\r\n   */\r\n  _random_gauss(mean, std) {\r\n    let u = 0\r\n    let v = 0\r\n     while(u === 0) u = Math.random()\r\n     while(v === 0) v = Math.random()\r\n     return Math.max(0, mean + Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI*v) * std)\r\n  }\r\n\r\n  /**\r\n   * Uniform distribution function.\r\n   * @param {Number} mean - The mean value.\r\n   * @param {Number} stdev - The standard deviation value.\r\n   * @return {Number} - result value\r\n   */\r\n  _random_uniform (mean, jitter) {\r\n    return Math.max(0, Math.floor(mean + Math.random() * jitter - jitter / 2))\r\n  }\r\n\r\n  /** Resets all item variables to their default value. */\r\n  reset () {\r\n    this.vars.duration = 1000\r\n    this.vars.jitter = 0\r\n    this.vars.jitter_mode = 'Uniform'\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    let duration = this.vars.get('duration')\r\n    let jitter = this.vars.get('jitter')\r\n    let jitter_mode = this.vars.get('jitter_mode')\r\n    if ((!isNumber(duration)) || (duration < 0)) {\r\n      this._runner._debugger.addError('Duration should be a positive numeric value in advanced_delay ' + this.name)\r\n    }\r\n    if (jitter_mode === 'Uniform') {\r\n      this._duration = this._random_uniform(duration, jitter)\r\n    } else if (jitter_mode === 'Std. Dev.') {\r\n      this._duration = this._random_gauss(duration, jitter)\r\n    } else {\r\n      this._runner._debugger.addError('Unknown jitter mode in advanced_delay ' + this.name)\r\n    }\r\n    if (this._duration < 0) {\r\n      this._duration = 0\r\n    }\r\n    this._duration = Number(this._duration)\r\n    this.experiment.vars.set('delay_' + this.name, this._duration)\r\n    this._runner._debugger.addMessage('delay for ' + this._duration + ' ms.')\r\n    super.prepare()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    super.run()\r\n    this.set_item_onset(this.time())\r\n    this.sleep(this._duration)\r\n  }\r\n}\r\n","import Item from '../items/item.js'\nimport FormWidget from '../widgets/form.js'\nimport { constants } from '../system/constants.js'\n\n/**\n * Class representing a base form class.\n * @extends Item\n */\nexport default class FormBase extends Item {\n  /**\n     * Create a base form item which is used as basic class for all form types.\n     * @param {Object} experiment - The experiment item to which the item belongs.\n     * @param {String} name - The unique name of the item.\n     * @param {String} script - The script containing the properties of the item.\n     * @param {String} itemType - The type of form to create.\n     * @param {String} description - The description of the form plugin.\n     */\n  constructor (experiment, name, script, itemType, description) {\n    // Inherited.\n    super(experiment, name, script)\n\n    // Define and set the public properties.\n    this.cols = []\n    this.description = 'A generic form plug-in'\n    this.focus_widget = null\n    this.form = null\n    this.options = []\n    this.rows = []\n    this.timeout = null\n\n    // Set the class private properties.\n    this._form_options = false\n    this._form_text = false\n\n    // Set the class public properties.\n    this.description = description\n    this.item_type = itemType\n\n    // Process the script.\n    this.from_string(script)\n  }\n\n  /** Implements the complete phase of an item. */\n  _complete () {\n    // PIXI: Set the cursor visibility to none (default).\n    this.experiment._runner._renderer.view.style.cursor = 'none'\n\n    // Set the timer to normal mode.\n    this.experiment._runner._events._state = constants.TIMER_NONE\n\n    // form is finalized.\n    this._status = constants.STATUS_FINALIZE\n\n    // Inherited.\n    super._complete()\n  }\n\n  _update (response) {\n    // Update the rendering of the active form.\n    this.form._canvas.show(this.form.experiment)\n  }\n\n  /** Resets all item variables to their default value. */\n  reset () {\n    this.vars.cols = '2;2'\n    this.vars.rows = '2;2'\n    this.vars.spacing = 10\n    this.vars._theme = 'gray'\n    this.vars.only_render = 'no'\n    this.vars.timeout = 'infinite'\n    this.vars.margins = '50;50;50;50'\n    this._widgets = []\n  }\n\n  parse_line (line) {\n    // Split the line in tokens.\n    var list = this.syntax.split(line)\n\n    if ((this._form_text === true) && (list[0] !== '__end__')) {\n      this.vars['form_text'] = this.vars['form_text'] + line.replace('\\t', '') + ' <br/> '\n    }\n    if ((this._form_options === true) && (list[0] !== '__end__')) {\n      this.options.push(line.replace('\\t', ''))\n    }\n\n    // Check for widget definition.\n    if (list[0] === 'widget') {\n      // Remove widget command.\n      list.shift()\n\n      // Add widget to the list.\n      this._widgets.push(list)\n    } else if (list[0] === '__options__') {\n      this._form_options = true\n    } else if (list[0] === '__form_text__') {\n      this.vars['form_text'] = ''\n      this._form_text = true\n    } else if (list[0] === '__end__') {\n      this._form_options = false\n      this._form_text = false\n    }\n  }\n\n  /** Implements the prepare phase of an item. */\n  prepare () {\n    // Retrieve the column, rows and margins.\n    var cols = (typeof this.vars.cols === 'string') ? this.vars.cols.split(';') : [String(this.vars.cols)]\n    var rows = (typeof this.vars.rows === 'string') ? this.vars.rows.split(';') : [String(this.vars.rows)]\n    var margins = this.vars.margins.split(';')\n\n    // Get the time out parameter.\n    let timeout\n    if (this.vars.timeout === 'infinite') {\n      timeout = null\n    } else {\n      timeout = this.vars.timeout\n    }\n\n    // Create the basic form.\n    this.form = new FormWidget(this.experiment, cols, rows, this.vars.spacing,\n      margins, this.vars._theme, this, timeout, this.vars.form_clicks === 'yes')\n\n    // Parse the widget definitions.\n    for (var i = 0; i < this._widgets.length; i++) {\n      this.focus_widget = null\n      var kwdict = {}\n      var parameters = []\n      parameters.push(this.form)\n      if (this._widgets[i].length > 5) {\n        for (var j = 5; j < this._widgets[i].length; j++) {\n          var varName = String(this._widgets[i][j]).substr(0, String(this._widgets[i][j]).indexOf('='))\n          var varValue = String(this._widgets[i][j]).substring(String(this._widgets[i][j]).indexOf('=') + 1, String(this._widgets[i][j]).length)\n          kwdict[varName] = this.syntax.remove_quotes(varValue)\n          kwdict[varName] = this.syntax.eval_text(kwdict[varName], this.form.item.vars, true)\n          kwdict[varName] = this.syntax.remove_quotes(kwdict[varName])\n          parameters.push(this.syntax.remove_quotes(varValue))\n        }\n      }\n\n      // Process focus keyword.\n      var focus = false\n      if ((typeof kwdict['focus'] !== 'undefined') && (kwdict['focus'] === 'yes')) {\n        delete (kwdict['focus'])\n        focus = true\n      }\n\n      // Parse arguments\n      var _type = this._widgets[i][4]\n      var col = this._widgets[i][0]\n      var row = this._widgets[i][1]\n      var colspan = this._widgets[i][2]\n      var rowspan = this._widgets[i][3]\n\n      // Create the widget.\n      try {\n        var _w = this.experiment.items._newWidgetClass(_type, this.form, kwdict)\n      } catch (e) {\n        this.experiment._runner._debugger.addError('Failed to create widget ' + _type + ', error:' + e)\n      }\n\n      // Add the widget to the parent form.\n      this.form.set_widget(_w, [col, row], colspan, rowspan)\n\n      // Add as focus widget\n      if (focus === true) {\n        if (this.focus_widget != null) {\n          this.experiment._runner._debugger.addError('Osweb error: You can only specify one focus widget')\n        } else {\n          this.focus_widget = _w\n        }\n      }\n    }\n\n    // Inherited.\n    super.prepare()\n  }\n\n  /** Implements the run phase of an item. */\n  run () {\n    // Inherited.\n    super.run()\n\n    // Execute the form.\n    if (this.vars.only_render === 'yes') {\n      // Render the form.\n      this.form.render()\n\n      // Continue the process.\n      this._complete()\n    } else {\n      this.form._exec(this.focus_widget)\n    }\n  }\n}\n","import FormBase from './form_base.js'\nimport FormWidget from '../widgets/form.js'\n\n/**\n * Class representing a consent form.\n * @extends FormBase\n */\nexport default class FormConsent extends FormBase {\n  /**\n     * Create a form which shows some simple text.\n     * @param {Object} experiment - The experiment item to which the item belongs.\n     * @param {String} name - The unique name of the item.\n     * @param {String} script - The script containing the properties of the item.\n     */\n  constructor (experiment, name, script) {\n    // Inherited.\n    super(experiment, name, script, 'form_consent', 'A simple consent form')\n\n    // Define and set the public properties.\n    this.decline_form = null\n  }\n\n  /** Implements the complete phase of an item. */\n  _complete () {\n    // Check if the concense form is completed or the decline sub form.\n    if (this.decline_form !== null) {\n      // Hide the default form.\n      this.decline_form._canvas._container.visible = false\n      this.form._canvas._container.visible = true\n      this.decline_form = null\n\n      // Re-run the consense form.\n      this.run()\n    } else {\n      // Check if the consent status is shown.\n      if (this.experiment.vars.get('accept_status') === true) {\n        // Accept button is selected, check the checkbox status.\n        if (this.experiment.syntax.remove_quotes(this.experiment.vars.get('checkbox_status')) === this.vars.get('checkbox_text')) {\n          // Go to the next form, so continue the closure.\n          super._complete()\n        } else {\n          console.log('decline form')\n          // Create the decline message form.\n          this.decline_form = new FormWidget(this.experiment, [1], [1], 10, ['50', '50', '50', '50'], 'gray', this, 5000, false)\n\n          // Create the text widget.\n          var widget = this.experiment.items._newWidgetClass('label', this.decline_form, {text: this.vars.decline_message, center: 'yes'})\n\n          // Add the widget to the parent form.\n          this.decline_form.set_widget(widget, [0, 0], 1, 1)\n\n          // Hide the default form.\n          this.form._canvas._container.visible = false\n          this.decline_form._canvas._container.visible = true\n\n          // Execute the decline form.\n          this.decline_form._exec(null)\n        }\n      } else {\n        // Decline button pressed, stop the experiment.\n        this.experiment._runner.exit()\n      }\n    }\n  }\n\n  /** Implements the run phase of an item. */\n  run () {\n    // Inherited.\n    super.run()\n  }\n}\n","import FormBase from './form_base.js'\n\n/**\n * Class representing a form with multiple choise item.\n * @extends FormBase\n */\nexport default class FormMultipleChoice extends FormBase {\n  /**\n     * Create a form which shows some simple text.\n     * @param {Object} experiment - The experiment item to which the item belongs.\n     * @param {String} name - The unique name of the item.\n     * @param {String} script - The script containing the properties of the item.\n     */\n  constructor (experiment, name, script) {\n    // Inherited.\n    super(experiment, name, script, 'form_multiple_choice', 'A simple multiple choise item')\n  }\n\n  /** Implements the complete phase of an item. */\n  _complete () {\n    // Inherited.\n    super._complete()\n  }\n\n  /** Implements the run phase of an item. */\n  prepare () {\n    //\n    this.vars.cols = '1;1;'\n    this.vars.rows = '1;1;'\n    this._widgets = []\n\n    this._widgets.push(this.syntax.split('0 0 2 1 label text=\"[form_title]\"'))\n    this._widgets.push(this.syntax.split('0 1 2 1 label center=no text=\"[question]\"'))\n    // Add the individual labels.\n    for (var i = 0; i < this.options.length; i++) {\n      this._widgets.push(this.syntax.split('0 ' + String(i + 2) + ' 2 1 checkbox group=group1 center=no text=\"' + this.options[i] + '\"'))\n      this.vars.rows = this.vars.rows + '1;'\n    }\n    this._widgets.push(this.syntax.split('0 ' + String(i + 3) + ' 2 2 button text=\"[button_text]\"'))\n    this.vars.rows = this.vars.rows + '1;1;'\n\n    // Inherited prepare.\n    super.prepare()\n  }\n\n  /** Implements the run phase of an item. */\n  run () {\n    // Inherited.\n    super.run()\n  }\n}\n","import FormBase from './form_base.js'\n\n/**\n * Class representing a form text display item.\n * @extends FormBase\n */\nexport default class FormTextDisplay extends FormBase {\n  /**\n     * Create a form which shows some simple text.\n     * @param {Object} experiment - The experiment item to which the item belongs.\n     * @param {String} name - The unique name of the item.\n     * @param {String} script - The script containing the properties of the item.\n     */\n  constructor (experiment, name, script) {\n    // Inherited.\n    super(experiment, name, script, 'form_text_display', 'A simple text display form')\n  }\n\n  /** Implements the complete phase of an item. */\n  _complete () {\n    // Inherited.\n    super._complete()\n  }\n\n  /** Implements the run phase of an item. */\n  run () {\n    // Inherited.\n    super.run()\n  }\n}\n","import FormBase from './form_base.js'\n\n/**\n * Class representing a form text display item.\n * @extends Item\n */\nexport default class FormTextInput extends FormBase {\n  /**\n     * Create a form which shows some simple text.\n     * @param {Object} pExperiment - The experiment item to which the item belongs.\n     * @param {String} pName - The unique name of the item.\n     * @param {String} pScript - The script containing the properties of the item.\n     */\n  constructor (experiment, name, script) {\n    // Inherited.\n    super(experiment, name, script, 'form_text_input', 'A simple text input form')\n  }\n\n  /** Implements the complete phase of an item. */\n  _complete () {\n    // Inherited.\n    super._complete()\n  }\n\n  /** Implements the run phase of an item. */\n  run () {\n    // Inherited.\n    super.run()\n  }\n}\n","import { Texture, Sprite } from 'pixi.js'\nimport {\n  constants\n} from '../system/constants.js'\n\n/** Class representing a video. */\nexport default class Video {\n  /**\n   * Create a video object which controls the video device.\n   * @param {Object} experiment - The experiment to which the video belongs.\n   * @param {String} src - The video source name.\n   */\n  constructor (experiment, source) {\n    // Set class parameter properties.\n    this._experiment = experiment\n\n    // Set the class public properties.\n    this.audio = true\n    this.duration = 'keypress'\n    this.full_screen = false\n\n    // Set the class pivate properties.\n    this._playing = false\n    this._script = null\n\n    // Create the video instance\n    if (source !== null) {\n      // Set the video object.\n      this._video = source.data\n\n      // create a video texture from the video.\n      this._texture = Texture.from(source.data)\n\n      // create a new Sprite using the video texture (yes it's that easy)\n      this._videoSprite = new Sprite(this._texture)\n      this._video.pause()\n\n      // Set the event anchors.\n      this._video.onended = this._experiment._runner._events._videoEnded.bind(this)\n      this._video.onplay = this._experiment._runner._events._videoPlay.bind(this)\n    }\n  }\n\n  /** Update the video rendering. */\n  _update () {\n    if (this._playing === true) {\n      // Update the renderer.\n      this._experiment._runner._renderer.render(this._videoSprite)\n\n      // execute script.\n      if ((this._script !== null) && (this._event_handler_always === true)) {\n        // Start the parser\n        this._experiment._runner._pythonParser._run(null, this._script)\n      }\n    }\n  }\n\n  /** Play the actual video. */\n  play () {\n    // Enable the video playing.\n    this._video.play()\n\n    // Set the volume\n    this._video.volume = (this.audio === true) ? 1 : 0\n\n    // Check if the video must be scaled.\n    if (this.full_screen === true) {\n      this._videoSprite.width = this._experiment._runner._renderer.width\n      this._videoSprite.height = this._experiment._runner._renderer.height\n    }\n\n    // Render the first frame.\n    this._experiment._runner._renderer.render(this._videoSprite)\n\n    // Set the play toggle.\n    this._playing = true\n  }\n\n  /** Stop playing the video. */\n  stop () {\n    // Pause the actual sound.\n    this._video.pause()\n    this._playing = false\n  }\n\n  /** Set the blocking of the sound. */\n  wait () {\n    this._experiment._runner._events._run(-1, constants.RESPONSE_VIDEO, [])\n  }\n}\n","// Control elements\r\nimport Loop from '../items/loop.js'\r\nimport Sequence from '../items/sequence.js'\r\nimport Coroutines from '../items/coroutines.js'\r\n// Slides\r\nimport Sketchpad from '../items/sketchpad.js'\r\nimport Feedback from '../items/feedback.js'\r\n// Scripts\r\nimport InlineScript from '../items/inline_script.js'\r\nimport InlineJavaScript from '../items/inline_javascript.js'\r\n// Responses\r\nimport KeyboardResponse from '../items/keyboard_response.js'\r\nimport MouseResponse from '../items/mouse_response'\r\nimport Logger from '../items/logger.js'\r\n// Audio\r\nimport Sampler from '../items/sampler.js'\r\nimport Synth from '../items/synth.js'\r\n\r\n// Elements\r\nimport Arrow from '../elements/arrow.js'\r\nimport Circle from '../elements/circle.js'\r\nimport Ellipse from '../elements/ellipse.js'\r\nimport Fixdot from '../elements/fixdot.js'\r\nimport Gabor from '../elements/gabor.js'\r\nimport ImageElement from '../elements/image.js' // Image is a reserved JS class\r\nimport Line from '../elements/line.js'\r\nimport Noise from '../elements/noise.js'\r\nimport Rect from '../elements/rect.js'\r\nimport TextLine from '../elements/textline.js'\r\n\r\n// Widgets\r\nimport ButtonWidget from '../widgets/button.js'\r\nimport CheckBoxWidget from '../widgets/checkbox.js'\r\nimport FormWidget from '../widgets/form.js'\r\nimport ImageWidget from '../widgets/image_widget.js'\r\nimport ImageButtonWidget from '../widgets/image_button.js'\r\nimport LabelWidget from '../widgets/label.js'\r\nimport RatingScaleWidget from '../widgets/rating_scale.js'\r\nimport TextInputWidget from '../widgets/text_input.js'\r\nimport Themes from '../widgets/themes.js'\r\n\r\n// Plugins\r\nimport AdvancedDelay from '../plugins/advanced_delay.js'\r\nimport FormBase from '../plugins/form_base.js'\r\nimport FormConsent from '../plugins/form_consent.js'\r\nimport FormMultipleChoice from '../plugins/form_multiple_choice.js'\r\nimport FormTextDisplay from '../plugins/form_text_display.js'\r\nimport FormTextInput from '../plugins/form_text_input.js'\r\nimport MediaPlayer from '../plugins/media_player.js'\r\nimport Notepad from '../plugins/notepad.js'\r\nimport RepeatCycle from '../plugins/repeat_cycle.js'\r\nimport ResetFeedback from '../plugins/reset_feedback.js'\r\nimport TouchResponse from '../plugins/touch_response.js'\r\n\r\n/**\r\n * this variable maps the string representation of each element to the corresponding\r\n * class names.\r\n * @type {Object}\r\n */\r\nexport const itemClasses = {\r\n  // Items\r\n  loop: Loop,\r\n  sequence: Sequence,\r\n  sketchpad: Sketchpad,\r\n  feedback: Feedback,\r\n  inline_script: InlineScript,\r\n  inline_javascript: InlineJavaScript,\r\n  keyboard_response: KeyboardResponse,\r\n  mouse_response: MouseResponse,\r\n  logger: Logger,\r\n  sampler: Sampler,\r\n  synth: Synth,\r\n  coroutines: Coroutines,\r\n  // Elements\r\n  arrow: Arrow,\r\n  circle: Circle,\r\n  ellipse: Ellipse,\r\n  fixdot: Fixdot,\r\n  gabor: Gabor,\r\n  image: ImageElement,\r\n  line: Line,\r\n  noise: Noise,\r\n  rect: Rect,\r\n  textline: TextLine,\r\n  // Widgets\r\n  button_widget: ButtonWidget,\r\n  checkbox_widget: CheckBoxWidget,\r\n  form_widget: FormWidget,\r\n  image_button_widget: ImageButtonWidget,\r\n  image_widget: ImageWidget,\r\n  label_widget: LabelWidget,\r\n  rating_scale_widget: RatingScaleWidget,\r\n  text_input_widget: TextInputWidget,\r\n  themes: Themes,\r\n  // Plugins\r\n  advanced_delay: AdvancedDelay,\r\n  form_base: FormBase,\r\n  form_consent: FormConsent,\r\n  form_multiple_choice: FormMultipleChoice,\r\n  form_text_display: FormTextDisplay,\r\n  form_text_input: FormTextInput,\r\n  media_player_mpy: MediaPlayer,\r\n  notepad: Notepad,\r\n  repeat_cycle: RepeatCycle,\r\n  reset_feedback: ResetFeedback,\r\n  touch_response: TouchResponse\r\n}\r\n\r\nexport const constants = {\r\n  // Type of used collection mode.\r\n  PRESSES_ONLY: 1,\r\n  RELEASES_ONLY: 2,\r\n  PRESSES_AND_RELEASES: 3,\r\n\r\n  // Type of response used.\r\n  RESPONSE_NONE: 0,\r\n  RESPONSE_DURATION: 1,\r\n  RESPONSE_KEYBOARD: 2,\r\n  RESPONSE_MOUSE: 3,\r\n  RESPONSE_SOUND: 4,\r\n  RESPONSE_AUTOKEYBOARD: 5,\r\n  RESPONSE_AUTOMOUSE: 6,\r\n\r\n  // Running status of an item.\r\n  STATUS_NONE: 0,\r\n  STATUS_BUILD: 1,\r\n  STATUS_INITIALIZE: 2,\r\n  STATUS_EXECUTE: 3,\r\n  STATUS_FINALIZE: 4,\r\n\r\n  // Definition of the event loop status contstants.\r\n  TIMER_NONE: 0,\r\n  TIMER_WAIT: 1,\r\n  TIMER_EXIT: 2,\r\n  TIMER_PAUSE: 3,\r\n  TIMER_RESUME: 4,\r\n  TIMER_DONE: 5,\r\n  TIMER_BREAK: 6,\r\n  TIMER_ERROR: 7,\r\n  TIMER_FORM: 8\r\n}\r\n","import Item from '../items/item.js'\nimport Video from '../backends/video.js'\n\n/**\n * Class representing a video player item.\n * @extends Item\n */\nexport default class MediaPlayer extends Item {\n  /**\n     * Create a video player plugin item which plays videos.\n     * @param {Object} experiment - The experiment item to which the item belongs.\n     * @param {String} name - The unique name of the item.\n     * @param {String} script - The script containing the properties of the item.\n     */\n  constructor (experiment, name, script) {\n    // Inherited.\n    super(experiment, name, script)\n\n    // Define and set the public properties.\n    this.description = 'A video player'\n\n    // Define and set the private properties.\n    this._script_executed = false\n\n    // Process the script.\n    this.from_string(script)\n  }\n\n  /** Implements the complete phase of an item. */\n  _complete () {\n    if (this._script_executed === false) {\n      // Stop the video playing.\n      this._video_player.stop()\n\n      // execute script.\n      if ((this._video_player._script !== null) && (this.vars.get('event_handler_trigger') === 'on keypress')) {\n        // Set the execute toggle.\n        this._script_executed = true\n\n        // Execute the script code.\n        this._runner._pythonParser._run(this, this._video_player._script)\n      } else {\n        // Inherited.\n        super._complete()\n      }\n    } else {\n      // Inherited.\n      super._complete()\n    }\n  }\n\n  /** Implements the update phase of an item. */\n  _update (response) {\n    // Update the video canvas.\n    this._video_player._update()\n  }\n\n  /** Implements the prepare phase of an item. */\n  prepare () {\n    // Opens the video file for playback.\n    this._video = this.experiment.pool[this.vars.get('video_src')]\n    this._video_player = new Video(this.experiment, this._video)\n\n    // Set the inline code options.\n    if (this.vars.event_handler !== '') {\n      this._video_player._script = this._runner._pythonParser._parse(this.vars.event_handler)\n    }\n    this._video_player._event_handler_always = (this.vars.event_handler_trigger === 'after every frame')\n\n    // Set the audio option.\n    this._video_player.audio = (this.vars.get('playaudio') === 'yes')\n\n    // Set the full screen option (if enabled).\n    this._video_player.full_screen = (this.vars.get('resizeVideo') === 'yes')\n\n    // Adjust the duration parameter from sound to video if defined.\n    if (this.vars.duration === 'sound') {\n      this.vars.duration = 'video'\n    }\n    this._video_player.duration = this.vars.duration\n\n    // Inherited.\n    super.prepare()\n  }\n\n  /** Implements the run phase of an item. */\n  run () {\n    // Set the onset time.\n    this.set_item_onset()\n    this.set_sri()\n\n    // Start the video player.\n    this._video_player.play()\n\n    // Start response processing.\n    this.process_response()\n  }\n}\n","import Item from '../items/item.js'\r\nimport { constants } from '../system/constants.js'\r\n\r\n/**\r\n * Class representing a notepad item.\r\n * @extends Item\r\n */\r\nexport default class Notepad extends Item {\r\n  /**\r\n     * Create a notepad plugin item which only shows some text in the console.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited.\r\n    super(experiment, name, script)\r\n\r\n    // Define and set the public properties.\r\n    this.description = 'A simple notepad to document your experiment. This plug-in does nothing.'\r\n\r\n    // Read the item definition string.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    // sequence is finalized.\r\n    this._status = constants.STATUS_FINALIZE\r\n\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Complete the current cycle.\r\n    this._complete()\r\n  }\r\n}\r\n","import Item from '../items/item.js'\r\nimport { constants } from '../system/constants.js'\r\n\r\n/**\r\n * Class representing a repeat cycle item.\r\n * @extends Item\r\n */\r\nexport default class RepeatCycle extends Item {\r\n  /**\r\n     * Create a repeat cycle item which repeat a cycle within a loop.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited.\r\n    super(experiment, name, script)\r\n\r\n    // Define and set the public properties.\r\n    this.description = 'Optionally repeat a cycle from a loop'\r\n\r\n    // Process the script.\r\n    this.from_string(script)\r\n  }\r\n\r\n  _complete () {\r\n    // sequence is finalized.\r\n    this._status = constants.STATUS_FINALIZE\r\n\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /** Implements the prepare phase of an item. */\r\n  prepare () {\r\n    // Inherited.\r\n    super.prepare()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Prepare the condtion for which the repeat_cycle must fire.\r\n    const condition = this.syntax.compile_cond(this.vars.get('condition'))\r\n    // Run item only one time.\r\n    if (this._status !== constants.STATUS_FINALIZE) {\r\n      if (this.experiment._runner._pythonWorkspace._eval(condition) === true) {\r\n        this.experiment.vars.repeat_cycle = 1\r\n      }\r\n\r\n      // Complete the current cycle.\r\n      this._complete()\r\n    }\r\n  }\r\n}\r\n","import Item from '../items/item.js'\r\nimport { constants } from '../system/constants.js'\r\n\r\n/**\r\n * Class representing a reset feedback item.\r\n * @extends Item\r\n */\r\nexport default class ResetFeedback extends Item {\r\n  /**\r\n     * Create a reset feedback  item which resets the feedback values.\r\n     * @param {Object} experiment - The experiment item to which the item belongs.\r\n     * @param {String} name - The unique name of the item.\r\n     * @param {String} script - The script containing the properties of the item.\r\n     */\r\n  constructor (experiment, name, script) {\r\n    // Inherited.\r\n    super(experiment, name, script)\r\n\r\n    // Define and set the public properties.\r\n    this.description = 'Resets the feedback variables, such as \"avg_rt\" and \"acc\"'\r\n\r\n    // Read the item definition string.\r\n    this.from_string(script)\r\n  }\r\n\r\n  /** Implements the complete phase of an item. */\r\n  _complete () {\r\n    // sequence is finalized.\r\n    this._status = constants.STATUS_FINALIZE\r\n\r\n    // Inherited.\r\n    super._complete()\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Run item only one time.\r\n    if (this._status !== constants.STATUS_FINALIZE) {\r\n      // Run the item.\r\n      this.experiment.reset_feedback()\r\n\r\n      // Complete the current cycle.\r\n      this._complete()\r\n    }\r\n  }\r\n}\r\n","import MouseResponse from '../items/mouse_response.js'\n\n/**\n * Class representing a reset feedback item.\n * @extends Item\n */\nexport default class TouchResponse extends MouseResponse {\n  /**\n     * Create a reset feedback  item which resets the feedback values.\n     * @param {Object} experiment - The experiment item to which the item belongs.\n     * @param {String} name - The unique name of the item.\n     * @param {String} script - The script containing the properties of the item.\n     */\n  constructor (experiment, name, script) {\n    // Inherited.\n    super(experiment, name, script)\n\n    // Define and set the public properties.\n    this.description = 'A grid-based response item, convenient for touch screens'\n  }\n\n  /** Resets all item variables to their default value. */\n  reset () {\n    // Inherited.\n    super.reset()\n    this.vars.set('allowed_responses', null)\n\n    // Resets all item variables to their default value.\n    this.vars._ncol = 2\n    this.vars._nrow = 1\n  }\n\n  /** Implements the prepare phase of an item. */\n  prepare () {\n    // Temp hack\n    this.experiment.vars.correct = -1\n\n    // Inherited.\n    super.prepare()\n  }\n\n  /**\n     * Process a mouse click response.\n     * @param {Object} pRetval - The mouse response to process.\n     */\n  process_response_mouseclick (retval) {\n    super.process_response_mouseclick(retval)\n    // Calulate the row, column and cell.\n    this.col = Math.floor(\n        (this.experiment.vars.cursor_x + this.experiment.vars.width / 2) /\n        (this.experiment.vars.width / this.vars._ncol)\n    )\n    this.row = Math.floor(\n        (this.experiment.vars.cursor_y + this.experiment.vars.height / 2) /\n        (this.experiment.vars.height / this.vars._nrow)\n    )\n    this.cell = this.row * this.vars._ncol + this.col + 1\n    this.experiment.vars.response = this.cell\n    this.synonyms = [this.experiment.vars.get('response')]\n  }\n}\n","import {\n  constants\n} from './constants.js'\n\nimport isFunction from 'lodash/isFunction'\nimport isPlainObject from 'lodash/isPlainObject'\n\n/** Class representing a debugger. */\nexport default class Debugger {\n  /**\n   * Create a debugger which handles errors and messahes during an session.\n   * @param {Object} runner - The runner class to which the debugger belongs.\n   */\n  constructor (runner) {\n    // Create and set private properties.\n    this._runner = runner // Parent runner attached to the debugger.\n\n    // Create and set public properties.\n    this.enabled = true // Enable the debugger.\n    this.error = false // True if an error occured.\n    this.messageLog = [] // Arraty with alle log messages.\n  }\n\n  /** Initialize the debugger object class. */\n  _initialize () {\n    // Clear the log.\n    this.messageLog = []\n  }\n\n  /** Finalize the debugger object class. */\n  _finalize () {\n    // If enabled push the messages to the javascript console.\n    if (this.enabled === true) {\n      console.log(this.messageLog)\n    }\n\n    // Clear the log.\n    this.messageLog = []\n  }\n\n  /**\n   * Show a fatal error to the user and stops the running of the experiment.\n   * @param {String} errorText - The error shown to the user.\n   */\n  addError (errorText, context = null) {\n    // Set the error flag.\n    this.error = true\n\n    // Set status of the event system to break.\n    this._runner._events.state = constants.TIMER_ERROR\n\n    // Throw the exception.\n    console.error('OSWeb has stopped running due to a fatal error.')\n    console.error(errorText)\n\n    if (isPlainObject(context)) {\n      if (context.notify === true && isFunction(this._runner._onError)) {\n        const url = context.url || null\n        this._runner._onError(errorText, url)\n      }\n    }\n  }\n\n  /**\n   * Add a message to the debugger list.\n   * @param {String} message - The message to be added to the list.\n   */\n  addMessage (messageText) {\n    // Push the error message to the log.\n    this.messageLog.push(messageText)\n\n    if (this.enabled === true) {\n      console.log(messageText)\n    }\n  }\n\n  /**\n   * Mirror function for the AddMessage method.\n   * @param {String} messageText - The message to be added to the list.\n   */\n  msg (messageText) {\n    // Push the error message to the log.\n    this.addMessage(messageText)\n  }\n}\n","import {\n  isNumber\n} from 'lodash'\n\n/** Class representing a convertor. */\nexport default class Convertor {\n  /**\n   * Create a convertor which converts an osexp script to a JSON object stucture.\n   * @param {Object} runner - The runner class to which the debugger belongs.\n   */\n  constructor (runner) {\n    // Create and set private properties.\n    this.item = null // Current item to process.\n    this.runner = runner // Parent runner attached to the debugger.\n    this.variable = null // Container for global multiline variable.\n    this.variabelName = '' // Name of a global multiline variable.\n  }\n\n  /**\n   * Strip additional quotes for value token.\n   * @param {String} value - The value to check and (optional) convert.\n   * @return {String} - The converted value.\n   */\n  parseValue (value) {\n    // Strip additional quotes.\n    if ((value.length >= 4) && (value.substr(0, 1) === '\"') && (value.substr(value.length - 1, 1) === '\"')) {\n      return value.substr(1, value.length - 2)\n    } else {\n      return value\n    }\n  }\n\n  /**\n   * Process a single line within the osexp script.\n   * @param {String} line - The string line to parse.\n   */\n  parseLine (line) {\n    // Split a line into items and process them.\n    var items = line.match(/(\".*?\"|[^\"\\s]+)+(?=\\s*|\\s*$)/g)\n\n    // if defined process a single line.\n    if (items !== null) {\n      // Select action on first token.\n      switch (items[0]) {\n        case 'define':\n          // Process a define statement.\n          this.item = this.runner._itemStore.newItem(items[1], items[2], '')\n          break\n        case 'draw':\n          // Create the element.\n          var element = this.runner._itemStore._newElementClass(items[1], this.item, '')\n\n          // Split the properties and process them.\n          for (var i = 2; i < items.length; i++) {\n            var pair = items[i].split('=', 2)\n            element.properties[pair[0]] = pair[1]\n          }\n\n          // Add the element to the item.\n          this.item.elements.push(element)\n          break\n        case 'run':\n          if (this.item.type === 'sequence') {\n            // Process a run statement for a sequence item.\n            this.item.items.push({\n              'item': items[1],\n              'cond': items[2]\n            })\n          } else {\n            // Process a run statement for a loop item.\n            this.item.vars.item = items[1]\n          }\n          break\n        case 'set':\n          // Process a set statement.\n          this.item.vars[items[1]] = this.parseValue(items[2])\n          break\n        case 'setcycle':\n          // Process a setcycle statement.\n          var value = this.parseValue(items[3])\n\n          // Convert the python expression to javascript.\n          if (value[0] === '=') {\n            // Parse the python statement.\n            value = this.runner._pythonParser._prepare(value.slice(1))\n            if (value !== null) {\n              value = value.body[0]\n            }\n          } else {\n            // Check if the value is numeric\n            value = isNumber(value) ? Number(value) : value\n          }\n\n          // Set the matrix with the proper values.\n          if (this.item.matrix[items[1]] === undefined) {\n            this.item.matrix[items[1]] = {}\n          }\n          this.item.matrix[items[1]][items[2]] = value\n          break\n        case 'widget':\n          // Remove the widget token from the list.\n          items.shift()\n\n          // Add the element to the item.\n          this.item._widgets.push(items)\n          break\n        default:\n          // check for multiline variables.\n          if ((items[0].length > 5) && (items[0].substr(0, 2) === '__') && (items[0].substr(-2) === '__')) {\n            // Start of end of the multiline variable.\n            if (items[0] === '__end__') {\n              this.item.vars[this.variableName] = this.variable\n              this.variable = null\n            } else {\n              this.variableName = items[0].substr(2, items[0].length - 4)\n              this.variable = []\n            }\n          } else {\n            if (this.variable !== null) {\n              this.variable.push(line)\n            }\n          }\n      }\n    } else {\n      if (this.variable !== null) {\n        this.variable.push('')\n      } else {\n        // Return to default level.\n        this.item = this.runner._experiment\n      }\n    }\n  }\n\n  /** Initialize the debugger object class. */\n  parseScript (script) {\n    // Set first item.\n    this.item = this.runner._experiment\n\n    // Split the script into lines.\n    if (script !== null) {\n      // Split the script into lines.\n      var lines = script.split('\\n')\n      for (var i = 0; i < lines.length; i++) {\n        // Parse a single line\n        this.parseLine(lines[i])\n      }\n    }\n  }\n}\n","import { constants } from '../system/constants.js'\r\nimport { Ticker } from 'pixi.js'\r\n\r\n/** Class representing the event system. */\r\nexport default class Events {\r\n  /** The events class controls the running of an experiment. */\r\n  constructor (runner) {\r\n    // Create and set private properties.\r\n    this._currentItem = null // The current active item.\r\n    this._keyDownEvent = null // Container for last key event.\r\n    this._keyDownHandler = null // Key down event handler.\r\n    this._keyPressMode = constants.PRESSES_ONLY // Keyboard press mode.\r\n    this._keyUpHandler = null // Key up event handler.\r\n    this._mouseDownEvent = null // Container for last mouse event.\r\n    this._mouseDownHandler = null // Mouse down event handler.\r\n    this._mouseMoveEvent = null // Container for last mouse move event.\r\n    this._mouseMoveHandler = null // Mouse move event handler.\r\n    this._mousePressMode = constants.PRESSES_ONLY // Mouse press mode.\r\n    this._mouseUpHandler = null // Mouse up event handler.\r\n    this._runner = runner // Parent runner class.\r\n    this._responseGiven = false // Valid response toggle\r\n    this._responseList = null // Items to respond on.\r\n    this._responseType = constants.RESPONSE_NONE // Set type of response (0 = none, 1 = keyboard, 2 = mouse, 3 = sound).\r\n    this._soundHasEnded = false // Sound play is finished.\r\n    this._state = constants.TIMER_NONE // Current status of the runner.\r\n    this._statePrevious = constants.TIMER_NONE // Previous state, used when pausing experiment.\r\n    this._timeHandler = null // Timing event handler.\r\n    this._timeOut = -1 // Duration before timeout occures.\r\n    this._timeStamp = -1 // Moment of update checking.\r\n    this._videoHasEnded = false // Video play is finished.\r\n\r\n    // Definition of the conversion table to convert keycodes to OpenSesame codes.\r\n    this._KEY_CODES = [\r\n      '', '', '', '', '', '', 'help', '', 'backspace', 'tab', '', '', 'clear', 'enter', 'enter_special', '', 'shift', 'ctrl', 'alt', 'pause', // 00  .. 19\r\n      'caps', '', '', '', '', '', '', 'escape', '', '', '', '', 'space', 'page up', 'page down', 'end', 'home', 'left', 'up', 'right', // 20  .. 39\r\n      'down', 'select', 'print', 'execute', 'print screen', 'insert', 'delete', '', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', // 40  .. 59\r\n      '<', '=', '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', // 60  .. 79\r\n      'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'left meta', 'right meta', 'menu', '', '', 'kp0', 'kp1', 'kp2', 'kp3', // 80  .. 99\r\n      'kp4', 'kp5', 'kp6', 'kp7', 'kp8', 'kp9', 'kp_multiply', 'kp_plus', '', 'kp_minus', 'kp_period', 'kp_divide', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', // 100 .. 119\r\n      'f9', 'f10', 'f11', 'f12', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 120 .. 139\r\n      '', '', '', '', 'numlock', 'scrollock', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 140 .. 159\r\n      '^', '!', '\"', '#', '$', '%', '&', '_', '(', ')', '*', '+', '|', '_', '{', '}', '~', '', '', '', // 160 .. 179\r\n      '', '', '', '', '', '', ';', '=', ',', '-', '.', '/', '`', '', '', '', '', '', '', '', // 180 .. 199\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '[', // 200 .. 219\r\n      '\\\\', ']', '\\'', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 220 .. 239\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '' // 240 .. 255\r\n    ]\r\n\r\n    // Definition of the conversion table to convert shift keycodes to OpenSesame codes.\r\n    this._KEY_SHIFTCODES = [\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'pause', // 00  .. 19\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 20  .. 39\r\n      '', '', '', '', '', '', '', '', ')', '!', '@', '#', '$', '%', '^', '&', '*', '(', '', ':', // 40  .. 59\r\n      '', '+', '', '', '', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', // 60  .. 79\r\n      'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'y', 'z', '', '', '', '', '', '', '', '', '', '', // 80  .. 99\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 100 .. 119\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 120 .. 139\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 140 .. 159\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '_', '', '', '', '', '', '', // 160 .. 179\r\n      '', '', '', '', '', '', '', '', '<', '', '>', '?', '~', '', '', '', '', '', '', '', // 180 .. 199\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '{', // 200 .. 219\r\n      '|', '}', '\"', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', // 220 .. 239\r\n      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '' // 240 .. 255\r\n    ]\r\n  }\r\n\r\n  /** Initialize the event system. */\r\n  _initialize () {\r\n    // Create and set the keyboard event listeners.\r\n    this._keyDownHandler = this._keyDown.bind(this)\r\n    this._keyUpHandler = this._keyUp.bind(this)\r\n    window.addEventListener('keydown', this._keyDownHandler)\r\n    window.addEventListener('keyup', this._keyUpHandler)\r\n\r\n    // Create and set the mouse event listeners.\r\n    this._mouseDownHandler = this._mouseDown.bind(this)\r\n    this._mouseMoveHandler = this._mouseMove.bind(this)\r\n    this._mouseUpHandler = this._mouseUp.bind(this)\r\n    this._touchStartHandler = this._touchStart.bind(this)\r\n    this._runner._renderer.view.addEventListener('mousedown', this._mouseDownHandler)\r\n    this._runner._renderer.view.addEventListener('mousemove', this._mouseMoveHandler)\r\n    this._runner._renderer.view.addEventListener('mouseup', this._mouseUpHandler)\r\n    this._runner._renderer.view.addEventListener('touchstart', this._touchStartHandler)\r\n\r\n    // Set the current item to the experiment object.\r\n    this._currentItem = this._runner._experiment\r\n    this._state = constants.TIMER_NONE\r\n\r\n    // Create the time handler and start the experiment.\r\n    this._timeHandler = new Ticker()\r\n    this._timeHandler.add(this._time.bind(this))\r\n    this._timeHandler.start()\r\n  }\r\n\r\n  /** Finalize the event system. */\r\n  _finalize () {\r\n    // Remove the keyboard event listeners.\r\n    window.removeEventListener('keydown', this._keyDownHandler)\r\n    window.removeEventListener('keyup', this._keyUpHandler)\r\n\r\n    // Remove the mouse event listeners.\r\n    this._runner._renderer.view.removeEventListener('mousedown', this._mouseDownHandler)\r\n    this._runner._renderer.view.removeEventListener('mousemove', this._mouseMoveHandler)\r\n    this._runner._renderer.view.removeEventListener('mouseup', this._mouseUpHandler)\r\n    this._runner._renderer.view.removeEventListener('touchstart', this._touchStartHandler)\r\n\r\n    // Stop the timing event listener.\r\n    this._timeHandler.stop()\r\n    this._timeHandler.remove(this._time)\r\n\r\n    // Clear the properties.\r\n    this._currentItem = null\r\n    this._mouseDownEvent = null\r\n    this._mouseMoveEvent = null\r\n    this._responseList = null\r\n    this._timeHandler = null\r\n  }\r\n\r\n  /**\r\n     * Convert a keyboard code to a OpenSesame code (including special characters ctrl/shift/alt).\r\n     * @param {Object} event - The keyboard event to process.\r\n     * @return {String} - The converted keyboard code.\r\n     */\r\n  _convertKeyCode (event) {\r\n    // Check for special characters\r\n    var key = ''\r\n    if ((event.shiftKey === true) && (event.keyCode !== 16)) {\r\n      // Shift key pressed with other key, so convert shift keys.\r\n      key = this._KEY_SHIFTCODES[event.keyCode]\r\n    } else if ((event.shiftKey === true) && (event.keyCode === 16)) {\r\n      // Shift code pressed, check for location (left or right)\r\n      key = (event.location === 1) ? 'lshift' : 'rshift'\r\n    } else if ((event.ctrlKey === true) && (event.keyCode === 17)) {\r\n      // Ctrl code pressed, check for location (left or right)\r\n      key = (event.location === 1) ? 'lctrl' : 'rctrl'\r\n    } else if ((event.altKey === true) && (event.keyCode === 18)) {\r\n      // Alt code pressed, check for location (left or right)\r\n      key = (event.location === 1) ? 'lalt' : 'ralt'\r\n    } else {\r\n      // Convert standard keycode.\r\n      key = this._KEY_CODES[event.keyCode]\r\n    }\r\n\r\n    // Return function result.\r\n    return key\r\n  }\r\n\r\n  /**\r\n     * Event handler for retrieving key down events.\r\n     * @param {Object} event - system keydown event.\r\n     */\r\n  _keyDown (event) {\r\n    // Store the keyboard event.\r\n    this._keyDownEvent = {\r\n      'event': event,\r\n      'rtTime': this._runner._experiment.clock.time()\r\n    }\r\n\r\n    // Check for esc key to pause the experiment.\r\n    if ((event.keyCode === 27) && (this._state !== constants.TIMER_PAUSE)) {\r\n      // Set system to paused.\r\n      this._statePrevious = this._state\r\n      this._state = constants.TIMER_PAUSE\r\n\r\n      // Show the pause screen.\r\n      this._runner._screen._showPauseScreen()\r\n    } else if ((this._state === constants.TIMER_WAIT) &&\r\n      ((this._keyPressMode === constants.PRESSES_ONLY) ||\r\n      (this._keyPressMode === constants.PRESSES_AND_RELEASES))) {\r\n      // Process the event.\r\n      return this._processKeyboardEvent(event, 1)\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Event handler for retrieving key up events.\r\n     * @param {Object} event - system keyup event.\r\n     */\r\n  _keyUp (event) {\r\n    // Only select this event when the collection mode is set for this.\r\n    if ((this._state === constants.TIMER_WAIT) && ((this._keyPressMode === constants.RELEASES_ONLY) ||\r\n      (this._keyPressMode === constants.PRESSES_AND_RELEASES))) {\r\n      // Process the event.\r\n      return this._processKeyboardEvent(event, 0)\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Process and convert keyboard events into response objects.\r\n     * @param {Object} event - system keyboard event.\r\n     * @param {Number} keyboardState - type of keyboard event.\r\n     */\r\n  _processKeyboardEvent (event, keyboardState) {\r\n    // Create a new keyboard response object.\r\n    const keyboardResponse = {\r\n      'event': event,\r\n      'rtTime': this._runner._experiment.clock.time(),\r\n      'state': keyboardState,\r\n      'type': constants.RESPONSE_KEYBOARD\r\n    }\r\n\r\n    // Convert response to proper keyboard token.\r\n    keyboardResponse.resp = this._convertKeyCode(event)\r\n\r\n    // Process the response to the current object.\r\n    if ((this._responseType === constants.RESPONSE_KEYBOARD) &&\r\n      ((this._responseList === null) ||\r\n      (this._responseList.indexOf(keyboardResponse.resp) >= 0))) {\r\n      // Process the current item.\r\n      if (this._currentItem !== null) {\r\n        // Process the response.\r\n        this._currentItem._update(keyboardResponse)\r\n      }\r\n\r\n      // Set the valid response given toggle.\r\n      this._responseGiven = true\r\n    }\r\n    return keyboardResponse\r\n  }\r\n\r\n  /** Prevent the right mouse context menu from showing. */\r\n  _mouseContext (event) {\r\n    // Prevent default action.\r\n    event.preventDefault()\r\n\r\n    // Return false to prevent the context menu from pushing up.\r\n    return false\r\n  }\r\n\r\n  /** Store the last mouse move event for later use. */\r\n  _mouseMove (event) {\r\n    // Store the mouse move event and its timestamp for use in the mouse class.\r\n    this._mouseMoveEvent = {\r\n      'event': event,\r\n      'rtTime': this._runner._experiment.clock.time()\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Event handler for touch start events, which for now are translated to\r\n     * moudown events.\r\n     * @param {Object} event - system touchstart event.\r\n     */\r\n  _touchStart (event) {\r\n    event.button = 0\r\n    event.clientX = event.changedTouches[0].clientX\r\n    event.clientY = event.changedTouches[0].clientY\r\n    this._mouseDown(event)\r\n  }\r\n\r\n  /**\r\n     * Event handler for retrieving mouse down events.\r\n     * @param {Object} event - system mousedown event.\r\n     */\r\n  _mouseDown (event) {\r\n    // Store the mouse down event and its timestamp for use in the mouse class.\r\n    this._mouseDownEvent = {\r\n      'event': event,\r\n      'rtTime': this._runner._experiment.clock.time()\r\n    }\r\n\r\n    // Only select this event when the collection mode is set for this.\r\n    if ((this._state === constants.TIMER_WAIT) && ((this._mousePressMode === constants.PRESSES_ONLY) || (this._mousePressMode === constants.PRESSES_AND_RELEASES))) {\r\n      // Process the event.\r\n      return this._processMouseEvent(event, 1)\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Event handler for retrieving mouse up events.\r\n     * @param {Object} event - system mouseup event.\r\n     */\r\n  _mouseUp (event) {\r\n    // Only select this event when the collection mode is set for this.\r\n    if ((this._state === constants.TIMER_WAIT) && ((this._mousePressMode === constants.RELEASES_ONLY) || (this._mousePressMode === constants.PRESSES_AND_RELEASES))) {\r\n      // Process the event.\r\n      this._processMouseEvent(event, 0)\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Process and convert mouse events into response objects.\r\n     * @param {Object} event - system mouse event.\r\n     * @param {Number} mouseState - type of mouse event.\r\n     */\r\n  _processMouseEvent (event, mouseState) {\r\n    // Create a mouse response object.\r\n    var mouseResponse = {\r\n      'event': event,\r\n      'rtTime': this._runner._experiment.clock.time(),\r\n      'state': mouseState,\r\n      'type': constants.RESPONSE_MOUSE\r\n    }\r\n\r\n    // Adjust mouse response.\r\n    mouseResponse.resp = String(event.button + 1)\r\n\r\n    // Process the response to the current object.\r\n    if ((this._responseType === constants.RESPONSE_MOUSE) && ((this._responseList === null) ||\r\n      (this._responseList.indexOf(mouseResponse.resp) >= 0))) {\r\n      // Process the response to the current object.\r\n      if (this._currentItem !== null) {\r\n        this._currentItem._update(mouseResponse)\r\n      }\r\n\r\n      // Set the valid response given toggle.\r\n      this._responseGiven = true\r\n    }\r\n    return mouseResponse\r\n  }\r\n\r\n  /**\r\n     * Event handler for sound event processing.\r\n     * @param {Object} event - sound end event.\r\n     */\r\n  _audioEnded (sampler) {\r\n    // If duration isequal to sound exit the sound item.\r\n    if (sampler.duration === 'sound') {\r\n      this.proceed()\r\n    }\r\n  }\r\n\r\n  /** Definition of methods for video event processing. */\r\n  _videoEnded (event) {\r\n    // If duration is set to video end respons to this.\r\n    var video = this\r\n    if (video.duration === 'video') {\r\n      video._experiment._runner._events._videoHasEnded = true\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Event handler for video play processing.\r\n     * @param {Object} event - sound end event.\r\n     */\r\n  _videoPlay (event) {\r\n  }\r\n\r\n  /**\r\n     * Event handler for experiment execution.\r\n     * @param {Object} event - system timer event.\r\n     */\r\n  _time (event) {\r\n    // Select the proper state.\r\n    switch (this._state) {\r\n      case constants.TIMER_NONE:\r\n        // Do nothing in the loop\r\n        break\r\n      case constants.TIMER_WAIT:\r\n        // Set current time stamp\r\n        this._timeStamp = this._currentItem.clock.time()\r\n\r\n        // Check if a time out occures or a valid response is given.\r\n        if (((this._timeOut === -1) && ((this._responseGiven === true) || (this._videoHasEnded === true))) ||\r\n                    ((this._timeOut > 0) && ((this._responseType === constants.RESPONSE_KEYBOARD) || (this._responseType === constants.RESPONSE_MOUSE)) && (this._responseGiven === true)) ||\r\n                    ((this._timeOut > 0) && ((this._timeStamp - this._currentItem.experiment.vars.get('time_' + this._currentItem.name)) > this._timeOut))) {\r\n          this.proceed()\r\n        } else {\r\n          // Update the current item without response.\r\n          this._currentItem._update(null)\r\n        }\r\n        break\r\n      case constants.TIMER_PAUSE:\r\n        // Do nothing in the loop\r\n        break\r\n      case constants.TIMER_RESUME:\r\n        // Do nothing in the loop\r\n        break\r\n      case constants.TIMER_BREAK:\r\n      case constants.TIMER_EXIT:\r\n        // Adjus the status.\r\n        this._state = constants.TIMER_NONE\r\n\r\n        // Exit the runner.\r\n        this._runner._finalize()\r\n        break\r\n      case constants.TIMER_FORM:\r\n        // Update the current item without response.\r\n        this._currentItem._update(null)\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Execute a stimulus/response wait period for a certain item.\r\n     * @param {Number} timeout - maximum time to wait for a response.\r\n     * @param {Number} responseType - type of response to wait for.\r\n     * @param {Array} responseList - list of acceptable respones.\r\n     */\r\n  _run (timeOut, responseType, responseList) {\r\n    // Set the event run|ning properties.\r\n    this._responseList = responseList\r\n    this._responseType = responseType\r\n    this._timeOut = timeOut\r\n\r\n    // Activate the event running.\r\n    this._responseGiven = false\r\n    this._soundHasEnded = false\r\n    this._state = constants.TIMER_WAIT\r\n    this._videoHasEnded = false\r\n  }\r\n\r\n  proceed () {\r\n    // Adjust the status.\r\n    this._state = constants.TIMER_NONE\r\n\r\n    // Remove the items from the general stack.\r\n    this._runner._itemStack.pop()\r\n\r\n    // Execute the post-run phase after duration is finished or response is received.\r\n    this._currentItem._complete()\r\n  }\r\n}\r\n","import { isFunction } from 'lodash'\r\n\r\n/** Class representing a parameter processor. */\r\nexport default class Parameters {\r\n  /**\r\n     * Create an session class which stores information about the client system.\r\n     * @param {Runner} runner - The runner class to which the debugger belongs.\r\n     */\r\n  constructor (runner) {\r\n    // Create and set private properties.\r\n    this._itemCounter = 0 // Number of active parameter.\r\n    this._parameters = [] // All parameters to process.\r\n    this._runner = runner // Parent runner attached to the session object.\r\n  }\r\n\r\n  /** Initialize the parameters class. */\r\n  _initialize () {\r\n    // Check if subject parameter is already defined.\r\n    if (this._runner._subject !== null) {\r\n      // Set the subject number\r\n      this._runner._experiment.set_subject(this._runner._subject)\r\n\r\n      // Parameters are processed, next phase.\r\n      this._runner._screen._setupClickScreen()\r\n    } else {\r\n      // Update inroscreen.\r\n      this._runner._screen._updateIntroScreen('Retrieving input parameters.')\r\n\r\n      // Set properties if defined.\r\n      var parameter = {\r\n        dataType: 'number',\r\n        defaultValue: '0',\r\n        name: 'subject_nr',\r\n        title: 'Starting the experiment',\r\n        prompt: 'Please enter the subject number',\r\n        promptEnabled: true\r\n      }\r\n\r\n      // Add the subject parameter to the parameters list.\r\n      this._parameters.push(parameter)\r\n\r\n      // Process the Parameters.\r\n      this._processParameters()\r\n    }\r\n  }\r\n\r\n  /** Process all parameters within the parameter list. */\r\n  _processParameters () {\r\n    // Process all items for which a user input is required.\r\n    if (this._itemCounter < this._parameters.length) {\r\n      // Process a  parameter.\r\n      this._processParameter(this._parameters[this._itemCounter])\r\n    } else {\r\n      // Transfer the startup info to the context.\r\n      this._transferParameters()\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Callback function for dialog when aits OK button has been clicked.\r\n     * @param {Object} parameter - The parameter to set.\r\n     * @param {String} value - The value to set.\r\n     */\r\n  _onParamConfirm (parameter, value) {\r\n    // Get the response information\r\n    parameter.response = value\r\n\r\n    // Increase the counter.\r\n    this._itemCounter++\r\n\r\n    // Continue processing.\r\n    this._processParameters()\r\n  }\r\n\r\n  /** Callback function for dialog when its cancel button has been clicked. */\r\n  _onParamCancel () {\r\n    // Exit the runner.\r\n    this._runner._exit()\r\n  }\r\n\r\n  /**\r\n     * Process a single parameter\r\n     * @param {Object} parameter - The parameter which must be processed.\r\n     */\r\n  _processParameter (parameter) {\r\n    // Check if a user request is required.\r\n    if (parameter.promptEnabled === true) {\r\n      // Use passed function that displays a prompt. This leaves the display\r\n      // of the prompt to the library or system that implements osweb.\r\n      if (isFunction(this._runner._prompt)) {\r\n        this._runner._prompt(parameter.title, parameter.prompt,\r\n          parameter.defaultValue, parameter.dataType,\r\n          this._onParamConfirm.bind(this, parameter), this._onParamCancel.bind(this))\r\n      } else {\r\n        // Fallback to the window prompt if no function has been passed.\r\n        const result = window.prompt(parameter.prompt, parameter.defaultValue)\r\n\r\n        if (result === null) {\r\n          this._onParamCancel()\r\n        } else {\r\n          this._onParamConfirm(parameter, result)\r\n        }\r\n      }\r\n    } else {\r\n      // Assign default value to the Startup item.\r\n      parameter.response = parameter.defaultValue\r\n\r\n      // Increase the counter.\r\n      this._itemCounter++\r\n\r\n      // Continue processing.\r\n      this._processParameters()\r\n    }\r\n  }\r\n\r\n  /** Transfer the startup info items to the context. */\r\n  _transferParameters () {\r\n    // Transfer the startup info items to the context.\r\n    for (var i = 0; i < this._parameters.length; i++) {\r\n      // Additional run for subject_nr\r\n      if (this._parameters[i].name === 'subject_nr') {\r\n        this._runner._experiment.set_subject(this._parameters[i].response)\r\n      } else {\r\n        this._runner._experiment.vars.set(this._parameters[i].name,\r\n          this._parameters[i].response)\r\n      }\r\n    }\r\n\r\n    // Parameters are processed, next phase.\r\n    this._runner._screen._setupClickScreen()\r\n  }\r\n}\r\n","import { isFunction } from 'lodash'\r\nimport { Container, Sprite, Graphics, Text } from 'pixi.js'\r\nimport { VERSION_NUMBER } from '../index.js'\r\n\r\n/** Class representing a Screen. */\r\nexport default class Screen {\r\n  /**\r\n   * Create an introduction screen which handles the start of the experiment.\r\n   * @param {Object} runner - The runner class to which the screen belongs.\r\n   */\r\n  constructor (runner) {\r\n    // Set class parameter properties.\r\n    this._runner = runner // Parent runner attached to the screen object.\r\n\r\n    // Set class properties.\r\n    this._active = true // If true the introduction screen is shown.\r\n    this._click = true // If true all is started with a mouse click.\r\n    this._container = null //  Container which holds the screen info.\r\n    this._exit = false // Exit toggle to prevent dialog when closing experiment.\r\n  }\r\n\r\n  screenCenter () {\r\n    return {\r\n      x: this._runner._renderer.width / 2,\r\n      y: this._runner._renderer.height / 2\r\n    }\r\n  }\r\n\r\n  /** Initialize the fullscreen mode if enabled. */\r\n  _fullScreenInit () {\r\n    // Check if fullscreen must be enabled.\r\n    if (this._runner._fullScreen === true) {\r\n      // Get the container element.\r\n      var element = this._runner._container\r\n\r\n      // Go full-screen\r\n      if (element.requestFullscreen) {\r\n        document.addEventListener('fullscreenchange', (e) => {\r\n          this._fullScreenChanged(e)\r\n        })\r\n        document.addEventListener('fullscreenerror', (e) => {\r\n          this._fullScreenError(e)\r\n        })\r\n        element.requestFullscreen()\r\n      } else if (element.webkitRequestFullscreen) {\r\n        document.addEventListener('webkitfullscreenchange', (e) => {\r\n          this._fullScreenChanged(e)\r\n        })\r\n        document.addEventListener('webkitfullscreenerror', (e) => {\r\n          this._fullScreenError(e)\r\n        })\r\n        element.webkitRequestFullscreen()\r\n      } else if (element.mozRequestFullScreen) {\r\n        document.addEventListener('mozfullscreenchange', (e) => {\r\n          this._fullScreenChanged(e)\r\n        })\r\n        document.addEventListener('mozfullscreenerror', (e) => {\r\n          this._fullScreenError(e)\r\n        })\r\n        element.mozRequestFullScreen()\r\n      } else if (element.msRequestFullscreen) {\r\n        document.addEventListener('MSFullscreenChange', (e) => {\r\n          this._fullScreenChanged(e)\r\n        })\r\n        document.addEventListener('MSFullscreenError', (e) => {\r\n          this._fullScreenError(e)\r\n        })\r\n        element.msRequestFullscreen()\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Finalize the fullscreen mode if if was enabled. */\r\n  _fullScreenExit () {\r\n    // Check if fullscreen must be enabled.\r\n    if (this._runner._fullScreen === true) {\r\n      // Set the exit toggle.\r\n      this._exit = true\r\n\r\n      // Exit the full screen mode.\r\n      if (document.exitFullscreen) {\r\n        document.exitFullscreen()\r\n      } else if (document.webkitExitFullscreen) {\r\n        document.webkitExitFullscreen()\r\n      } else if (document.mozCancelFullScreen) {\r\n        document.mozCancelFullScreen()\r\n      } else if (document.msExitFullscreen) {\r\n        document.msExitFullscreen()\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Event handler which responds to full-screen change. */\r\n  _fullScreenChanged () {\r\n    // Check if we are dropping out of full-screen.\r\n    if (document.fullscreenElement ||\r\n      document.webkitFullscreenElement ||\r\n      document.mozFullScreenElement ||\r\n      document.msFullscreenElement) {\r\n      // Scale the canvas\r\n      switch (this._runner._scaleMode) {\r\n        case 'noScale':\r\n          // Default mode, no scaling, canbas is centered on the screen.\r\n          this._runner._renderer.view.style.top = '0px'\r\n          this._runner._renderer.view.style.bottom = '0px'\r\n          this._runner._renderer.view.style.left = '0px'\r\n          this._runner._renderer.view.style.right = '0px'\r\n          this._runner._renderer.view.style.right = '0px'\r\n          this._runner._renderer.view.style.margin = 'auto'\r\n          this._runner._renderer.view.style.display = 'block'\r\n          this._runner._renderer.view.style.position = 'absolute'\r\n          this._runner._renderer.render(this._runner._experiment._currentCanvas._container)\r\n          break\r\n        case 'showAll':\r\n          // Default mode, no scaling, canbas is centered on the screen.\r\n          this._runner._renderer.view.style.top = '0px'\r\n          this._runner._renderer.view.style.bottom = '0px'\r\n          this._runner._renderer.view.style.left = '0px'\r\n          this._runner._renderer.view.style.right = '0px'\r\n          this._runner._renderer.view.style.right = '0px'\r\n          this._runner._renderer.view.style.margin = 'auto'\r\n          this._runner._renderer.view.style.display = 'block'\r\n          this._runner._renderer.view.style.position = 'absolute'\r\n          if ((this._runner._container.clientWidth - this._runner._experiment.vars.width) >\r\n            (this._runner._container.clientHeight - this._runner._experiment.vars.height)) {\r\n            let ar = (this._runner._container.clientHeight / this._runner._experiment.vars.height)\r\n            this._runner._renderer.resize(Math.round(this._runner._experiment.vars.width * ar), this._runner._container.clientHeight)\r\n            this._runner._experiment._scale_x = Math.round(this._runner._experiment.vars.width * ar) / this._runner._experiment.vars.width\r\n            this._runner._experiment._scale_y = (this._runner._container.clientHeight / this._runner._experiment.vars.height)\r\n          } else {\r\n            let ar = (this._runner._container.clientWidth / this._runner._experiment.vars.width)\r\n            this._runner._renderer.resize(this._runner._container.clientWidth, Math.round(this._runner._experiment.vars.height * ar))\r\n            this._runner._experiment._scale_x = (this._runner._container.clientWidth / this._runner._experiment.vars.width)\r\n            this._runner._experiment._scale_y = Math.round(this._runner._experiment.vars.height * ar) / this._runner._experiment.vars.height\r\n          }\r\n          this._runner._experiment._currentCanvas._container.scale.x = this._runner._experiment._scale_x\r\n          this._runner._experiment._currentCanvas._container.scale.y = this._runner._experiment._scale_y\r\n          this._runner._renderer.render(this._runner._experiment._currentCanvas._container)\r\n          break\r\n        case 'exactFit':\r\n          // Fit to the exact window size (cropping).\r\n          this._runner._experiment._scale_x = (this._runner._container.clientWidth / this._runner._experiment.vars.width)\r\n          this._runner._experiment._scale_y = (this._runner._container.clientHeight / this._runner._experiment.vars.height)\r\n\r\n          // Reize the current canvas.\r\n          this._runner._renderer.resize(this._runner._container.clientWidth, this._runner._container.clientHeight)\r\n          this._runner._experiment._currentCanvas._container.scale.x = this._runner._experiment._scale_x\r\n          this._runner._experiment._currentCanvas._container.scale.y = this._runner._experiment._scale_y\r\n          this._runner._renderer.render(this._runner._experiment._currentCanvas._container)\r\n          break\r\n      }\r\n    } else {\r\n      // Check for exiting experiment.\r\n      if (this._exit === false) {\r\n        // Resclae to 1Fit to the exact window size (cropping).\r\n        this._runner._experiment._scale_x = 1\r\n        this._runner._experiment._scale_y = 1\r\n\r\n        // Fit to the exact window size (cropping).\r\n        this._runner._renderer.resize(this._runner._experiment.vars.width, this._runner._experiment.vars.height)\r\n        this._runner._experiment._currentCanvas._container.scale.x = 1\r\n        this._runner._experiment._currentCanvas._container.scale.y = 1\r\n        this._runner._renderer.render(this._runner._experiment._currentCanvas._container)\r\n\r\n        // Open Sesame is running, request subject to continue of to stop.\r\n        if (isFunction(this._runner._confirm)) {\r\n          this._runner._confirm('Leaving full-screen mode, pausing experiment.',\r\n            'Please press ok the resume the experiment otherwise cancel to stop.',\r\n            this._onFullScreenConfirm.bind(this), this._onFullScreenCancel.bind(this))\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Event handler which responds to full-screen change errors. */\r\n  _fullScreenError () {\r\n    // Show error message.\r\n    this._runner.debugger.addError('Could not start full-screen mode, experiment stopped.')\r\n  }\r\n\r\n  /** Event handler to respond to dialog ok conmfirmation. */\r\n  _onFullScreenConfirm () {\r\n    // Get the container element.\r\n    var element = this._runner._container\r\n    // Go full-screen\r\n    if (element.requestFullscreen) {\r\n      element.requestFullscreen()\r\n    } else if (element.webkitRequestFullscreen) {\r\n      element.webkitRequestFullscreen()\r\n    } else if (element.mozRequestFullScreen) {\r\n      element.mozRequestFullScreen()\r\n    } else if (element.msRequestFullscreen) {\r\n      element.msRequestFullscreen()\r\n    }\r\n  }\r\n\r\n  /** Event handler to respond to dialog cancel confirmation. */\r\n  _onFullScreenCancel () {\r\n    // Exit the experiment.\r\n    this._runner._finalize()\r\n  }\r\n\r\n  /** Set the introscreen elements. */\r\n  _setupIntroScreen () {\r\n    // Check if introscreen is used.\r\n    if (this._active === true) {\r\n      // Define introscreen elements.\r\n      this._introScreen = new Container()\r\n\r\n      const center = this.screenCenter()\r\n\r\n      const logoPath = (typeof logoSrc === 'undefined') ? 'img/opensesame.png' : logoSrc\r\n\r\n      const oswebLogo = Sprite.from(logoPath)\r\n      const oswebTitle = new Text('OSWeb', {\r\n        fontFamily: 'Arial',\r\n        fontSize: 26,\r\n        fill: '#FFFFFF'\r\n      })\r\n      const versionInfo = new Text(VERSION_NUMBER, {\r\n        fontFamily: 'Arial',\r\n        fontSize: 16,\r\n        fill: '#FFFFFF'\r\n      })\r\n\r\n      const copyrightText = new Text(\r\n        `Copyright Jaap Bos, Daniel Schreij & Sebastiaan Mathot, 2016 - ${(new Date()).getFullYear()}`,\r\n        {\r\n          fontFamily: 'Arial',\r\n          fontSize: 12,\r\n          fill: '#FFFFFF'\r\n        }\r\n      )\r\n\r\n      oswebLogo.width = oswebLogo.height = 150\r\n\r\n      oswebLogo.position.set(center.x - oswebLogo.width / 2, 50)\r\n      oswebTitle.position.set(center.x - oswebTitle.width / 2, 215)\r\n      versionInfo.position.set(center.x - versionInfo.width / 2, 250)\r\n      copyrightText.position.set(\r\n        center.x - copyrightText.width / 2,\r\n        center.y * 2 - copyrightText.height * 2\r\n      )\r\n\r\n      this._statusText = new Text('', {\r\n        fontFamily: 'Arial',\r\n        fontSize: 18,\r\n        fill: '#FFFFFF'\r\n      })\r\n      this._statusText.position.set(\r\n        center.x - this._statusText.width / 2,\r\n        center.y\r\n      )\r\n      this._introScreen.addChild(oswebLogo, oswebTitle,\r\n        versionInfo, copyrightText, this._statusText)\r\n\r\n      // Show the introduction screen.\r\n      this._runner._renderer.render(this._introScreen)\r\n    }\r\n  }\r\n\r\n  /** Check if the experiment must be clicked to start. */\r\n  _setupClickScreen () {\r\n    // Check if the experiment must be clicked to start.\r\n    if (this._click === true) {\r\n      // Update inroscreen.\r\n\r\n      const text = `\r\n    Your participation to this experiment should be anonymous.\r\n        Never provide any personal or sensitive information\r\n            (e.g. credit card or social security numbers).\r\n\r\n                    Click here with the mouse to begin.`\r\n\r\n      this._updateIntroScreen(text)\r\n\r\n      // Setup the mouse click response handler.\r\n      var clickHandler = function (event) {\r\n        // Remove the handler.\r\n        this._runner._renderer.view.removeEventListener('click', clickHandler)\r\n        this._runner._renderer.view.removeEventListener('touchstart', clickHandler)\r\n\r\n        // Finalize the introscreen elements.\r\n        this._clearIntroScreen()\r\n\r\n        // Start the task.\r\n        this._runner._initialize()\r\n      }.bind(this)\r\n\r\n      // Set the temporary mouse click.\r\n      this._runner._renderer.view.addEventListener('click', clickHandler, false)\r\n      this._runner._renderer.view.addEventListener('touchstart', clickHandler, false)\r\n    } else {\r\n      // Finalize the introscreen elements.\r\n      this._clearIntroScreen()\r\n\r\n      // Start the runner.\r\n      this._runner._initialize()\r\n    }\r\n  }\r\n\r\n  /** Clear the introscreen elements. */\r\n  _clearIntroScreen () {\r\n    // Update the introscreen elements.\r\n    if (this._active === true) {\r\n      // Clear the stage by temoving al the child elements.\r\n      for (var i = this._introScreen.children.length - 1; i >= 0; i--) {\r\n        this._introScreen.removeChild(this._introScreen.children[i])\r\n      };\r\n      this._runner._renderer.render(this._introScreen)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the progress bar used when loading the file pool.\r\n   * @param {Number} percentage - The percentage (0-100) of the progress bar.\r\n   */\r\n  _updateProgressBar (percentage) {\r\n    const center = this.screenCenter()\r\n\r\n    const xOuter = 200\r\n    const wOuter = 400\r\n    const hOuter = 20\r\n    const yOuter = center.y + 2 * hOuter\r\n\r\n    if (this._active === true) {\r\n      // Select the stage.\r\n      switch (percentage) {\r\n        case -1:\r\n          this._progressBarOuter = new Graphics()\r\n          this._progressBarOuter.lineStyle(1, 0xFFFFFF, 1)\r\n          this._progressBarOuter.drawRect(xOuter, yOuter, wOuter, hOuter)\r\n          this._progressBarOuter.x = 0\r\n          this._progressBarOuter.y = 0\r\n          this._progressBarInner = new Graphics()\r\n          this._progressBarInner.lineStyle(1, 0xFFFFFF, 1)\r\n          this._progressBarInner.drawRect(xOuter + 2, yOuter + 2, 1, hOuter - 4)\r\n          this._progressBarInner.x = 0\r\n          this._progressBarInner.y = 0\r\n          this._introScreen.addChild(this._progressBarInner)\r\n          this._introScreen.addChild(this._progressBarOuter)\r\n          this._runner._renderer.render(this._introScreen)\r\n          break\r\n        case 100:\r\n          this._introScreen.removeChild(this._progressBarInner)\r\n          this._introScreen.removeChild(this._progressBarOuter)\r\n          this._runner._renderer.render(this._introScreen)\r\n          break\r\n        default:\r\n          this._progressBarOuter.beginFill(0xFFFFFF)\r\n          this._progressBarOuter.drawRect(xOuter + 2, yOuter + 2, Math.round(percentage * (wOuter - 4)), hOuter - 4)\r\n          this._progressBarOuter.endFill()\r\n          this._runner._renderer.render(this._introScreen)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the introscreen elements.\r\n   * @param {String} text - The text which must be updated.\r\n   */\r\n  _updateIntroScreen (text) {\r\n    // Update the introscreen elements.\r\n    if (this._active === true) {\r\n      const center = this.screenCenter()\r\n      this._statusText.text = text\r\n      this._statusText.position.set(\r\n        center.x - this._statusText.width / 2,\r\n        center.y\r\n      )\r\n      this._runner._renderer.render(this._introScreen)\r\n    }\r\n  }\r\n\r\n  /** Show the pause screen. */\r\n  _showPauseScreen () {\r\n    // Open Sesame is running, request subject to continue of to stop.\r\n    if (isFunction(this._runner._confirm)) {\r\n      this._runner._confirm('Esc key pressed, pausing experiment.',\r\n        'Please press ok the resume the experiment otherwise cancel to stop.',\r\n        this._onPauseScreenConfirm.bind(this), this._onPauseScreenCancel.bind(this))\r\n    }\r\n  }\r\n\r\n  /** Event handler to respond to dialog ok conmfirmation. */\r\n  _onPauseScreenConfirm () {\r\n    // Restore the old state.\r\n    this._runner._events._state = this._runner._events._statePrevious\r\n  }\r\n\r\n  /** Event handler to respond to dialog cancel confirmation. */\r\n  _onPauseScreenCancel () {\r\n    // Exit the experiment.\r\n    this._runner._finalize()\r\n  }\r\n}\r\n","/** Class representing a client session information collector. */\r\nexport default class Session {\r\n  /**\r\n     * Create an session object which stores information about the client system.\r\n     * @param {Object} runner - The runner class to which the session belongs.\r\n     */\r\n  constructor (runner) {\r\n    // Create and set private properties.\r\n    this._date = null // Date information container.\r\n    this._runner = runner // Parent runner attached to the session object.\r\n    this._session = null // Session information container.\r\n  }\r\n\r\n  /** Initialize the session. */\r\n  _initialize () {\r\n    // Update the loader text.\r\n    this._runner._screen._updateIntroScreen('Retrieving session information.')\r\n\r\n    // Get the session information.\r\n    this._getSessionInformation()\r\n  }\r\n\r\n  /** Retrieve session information from the client. */\r\n  _getSessionInformation () {\r\n    // Get the session information from the client system.\r\n    this._date = new Date()\r\n    this._session = {\r\n      'browser': {\r\n        'codename': navigator.appCodeName,\r\n        'name': navigator.appName,\r\n        'version': navigator.appVersion\r\n      },\r\n      'date': {\r\n        'startdate': ('0' + this._date.getDate()).slice(-2) + '-' + ('0' + this._date.getMonth()).slice(-2) + '-' + ('0' + this._date.getFullYear()).slice(-2),\r\n        'starttime': ('0' + this._date.getHours()).slice(-2) + ':' + ('0' + this._date.getMinutes()).slice(-2) + ':' + ('0' + this._date.getSeconds()).slice(-2),\r\n        'startdateUTC': ('0' + this._date.getUTCDate()).slice(-2) + '-' + ('0' + this._date.getUTCMonth()).slice(-2) + '-' + ('0' + this._date.getUTCFullYear()).slice(-2)\r\n      },\r\n      'experiment': {\r\n        'debug': 0,\r\n        'parameters': 0,\r\n        'pilot': 0,\r\n        'taskname': 0,\r\n        'taskversion': 0\r\n      },\r\n      'screen': {\r\n        'availableHeight': screen.availHeight,\r\n        'availableWidth': screen.availWidth,\r\n        'colorDepth': screen.colorDepth,\r\n        'height': screen.height,\r\n        'outerheight': window.outerheight,\r\n        'outerwidth': window.outerwidth,\r\n        'pixelDepth': screen.pixelDepth,\r\n        'screenX': window.screenX,\r\n        'screenY': window.screenY,\r\n        'width': screen.width\r\n      },\r\n      'system': {\r\n        'os': navigator.platform\r\n      }\r\n    }\r\n  }\r\n}\r\n","import pako from 'pako'\nimport isFunction from 'lodash/isFunction'\nimport untar from 'js-untar'\n\n/**\n * FileStreamer makes it possible to asynchronously stream a file to another reader\n *\n * @class FileStreamer\n */\nclass FileStreamer {\n  constructor (file, chunkSize = 64 * 1024) {\n    this.file = file\n    this.offset = 0\n    this.chunkSize = chunkSize // bytes\n    this.rewind()\n  }\n  rewind () {\n    this.offset = 0\n  }\n  isEndOfFile () {\n    return this.offset >= this.getFileSize()\n  }\n  readBlock () {\n    const fileReader = new FileReader()\n    const blob = this.file.slice(this.offset, this.offset + this.chunkSize)\n\n    return new Promise((resolve, reject) => {\n      fileReader.onloadend = (event) => {\n        const target = (event.target)\n        if (target.error) {\n          return reject(target.error)\n        }\n\n        this.offset += target.result.byteLength\n\n        resolve({\n          data: target.result,\n          progress: Math.min(this.offset / this.file.size, 1)\n        })\n      }\n\n      fileReader.readAsArrayBuffer(blob)\n    })\n  }\n  getFileSize () {\n    return this.file.size\n  }\n}\n\n/**\n * Decompresses a cpmpressed experiment file\n *\n * @export\n * @param {File} zipfile The file to extract\n * @param {function} onProgress Function to be called during extraction progress. Receives proportion complete\n * @returns array of Files\n */\nexport async function decompress (zipfile, onProgress) {\n  const fs = new FileStreamer(zipfile)\n  const inflator = new pako.Inflate()\n  let block\n\n  while (!fs.isEndOfFile()) {\n    block = await fs.readBlock()\n    inflator.push(block.data, fs.isEndOfFile())\n    if (inflator.err) {\n      throw inflator.msg\n    }\n    if (isFunction(onProgress)) onProgress(block.progress)\n  }\n  return untar(inflator.result.buffer)\n}\n\n/**\n * Converts a File/Blob to a string representation\n *\n * @export\n * @param {File} inputFile The file to convert\n * @returns string\n */\nexport function readFileAsText (inputFile) {\n  const temporaryFileReader = new FileReader()\n\n  return new Promise((resolve, reject) => {\n    temporaryFileReader.onerror = () => {\n      temporaryFileReader.abort()\n      reject(new DOMException('Problem parsing input file.'))\n    }\n\n    temporaryFileReader.onload = () => {\n      resolve(temporaryFileReader.result)\n    }\n    temporaryFileReader.readAsText(inputFile)\n  })\n}\n\n/**\n * Returns current host as detected by browser\n *\n * @returns String\n */\nfunction getHost () {\n  return window.location.origin !== 'null' ? window.location.origin : 'http://nodejs.test'\n}\n\n/**\n * Checks if the passed string contains a valid URL\n *\n * @export\n * @param {String} str The string to check\n * @returns boolean\n */\nexport function parseUrl (str) {\n  try {\n    const host = getHost()\n    return new URL(str, host)\n  } catch (e) {\n    return false\n  }\n}\n","import WebFont from 'webfontloader'\r\nimport {\r\n  decompress,\r\n  readFileAsText,\r\n  parseUrl\r\n} from '../util/files'\r\nimport isString from 'lodash/isString'\r\nimport isObject from 'lodash/isObject'\r\nimport axios from 'axios'\r\n\r\n/** Class representing a information stream processor. */\r\nexport default class Transfer {\r\n  /**\r\n   * Create a transfer object used for streaming information.\r\n   * @param {Object} runner - The runner class to which the transfer belongs.\r\n   */\r\n  constructor (runner) {\r\n    // Create and set private properties.\r\n    this._runner = runner // Parent runner attached to the transfer object.\r\n  }\r\n\r\n  /**\r\n   * Read an osexp file.\r\n   * @param {Object|String} source - A file object or a String containing the experiment or a download URL.\r\n   */\r\n  async _readSource (source) {\r\n    // Check type of object.\r\n    if (!isString(source) && (!isObject(source) || source.constructor !== File)) {\r\n      throw new Error('No osexp source file defined.')\r\n    }\r\n\r\n    // This var will hold the OS script after parsing\r\n    let osScript\r\n\r\n    if (source.constructor === File) {\r\n      // Source is a local file.\r\n      try {\r\n        osScript = await this._readOsexpFromFile(source)\r\n      } catch (e) {\r\n        throw new Error(`Could not read local osexp, ${e}`)\r\n      }\r\n    } else if (isString(source)) {\r\n      // Check if the source string is an URL\r\n      const uri = parseUrl(source)\r\n\r\n      if (uri !== false) {\r\n        // Attempt to download and load the remote experiment\r\n        try {\r\n          const remoteFile = await this.fetch(uri.href)\r\n          osScript = await this._readOsexpFromFile(remoteFile)\r\n        } catch (e) {\r\n          throw new Error(`Could not read remote osexp, ${e}`)\r\n        }\r\n      } else {\r\n        try {\r\n          osScript = this._processScript(source)\r\n        } catch (e) {\r\n          throw new Error(`Could not read source string, ${e}\\n\\n${source}`)\r\n        }\r\n      }\r\n    }\r\n    // Read in and generate the webfonts\r\n    await this._readWebFonts()\r\n\r\n    return osScript\r\n  }\r\n\r\n  /**\r\n   * Reads in an osexp from a string\r\n   *\r\n   * @param {File|String} osexpFile The osexp to parse, can be a string or a File containing a string\r\n   * @returns boolean\r\n   * @memberof Transfer\r\n   */\r\n  async _readExpFile (osexp) {\r\n    if ([File, Blob].includes(osexp.constructor)) {\r\n      osexp = await readFileAsText(osexp)\r\n    }\r\n    return this._processScript(osexp)\r\n  }\r\n\r\n  /**\r\n   * Reading and extracting an osexp file from a file location.\r\n   * @param {Object} file - A file object containing the experiment.\r\n   */\r\n  async _readOsexpFromFile (osexpFile) {\r\n    try {\r\n      return await this._readExpFile(osexpFile)\r\n    } catch (e) {\r\n      this._runner._debugger.addMessage(`Could not read osexp file as plain text: ${e.message}.\\nFile is probably binary`)\r\n    }\r\n    // Reading and extracting an osexp file from a file location.\r\n    const files = await decompress(\r\n      osexpFile,\r\n      (progress) => this._runner._screen._updateProgressBar(progress)\r\n    )\r\n\r\n    // Find the script in the array of extracted files. Throw an error if it isn't found.\r\n    const expFileIndex = files.findIndex((item) => item.name === 'script.opensesame')\r\n    if (expFileIndex === -1) throw new Error('Could not locate experiment script')\r\n    // Pop the script out of the file array and proccess it\r\n    const expFile = files.splice(expFileIndex, 1)[0]\r\n    const script = await this._readExpFile(expFile.blob)\r\n\r\n    // According to the zlib convention followed by the pako library we use to decompress\r\n    // the osexp file, files have a type of 0, so filter these out.\r\n    const poolFiles = files.filter(\r\n      (item) => item.type === '0'\r\n    )\r\n    // Process the file pool items\r\n    await this._processOsexpPoolItems(poolFiles)\r\n    return script\r\n  }\r\n\r\n  /**\r\n   * Reads an osexp file from a remote server, if its type is indicated to be\r\n   * 'text/plain' (opposed to being zipped)\r\n   * @param  {string} url The url at which the osexp can be found\r\n   * @return {void}\r\n   */\r\n  async fetch (url) {\r\n    const response = await axios.get(url, {\r\n      responseType: 'blob',\r\n      onDownloadProgress: (event) => {\r\n        if (event.lengthComputable) {\r\n          this._runner._screen._updateProgressBar(event.loaded / event.total)\r\n        }\r\n      }\r\n    })\r\n    let res\r\n    if (/Edge/.test(navigator.userAgent)) {\r\n      res = new Blob([response.data])\r\n      res.name = 'downloaded.osexp'\r\n    } else {\r\n      res = new File([response.data], 'downloaded.osexp')\r\n    }\r\n    return res\r\n  }\r\n\r\n  /**\r\n   * Process an osexp script\r\n   * @param  {string} contents - The script contents\r\n   * @return {boolean} - True if script was successfully processed, false otherwise\r\n   */\r\n  _processScript (contents) {\r\n    if (contents.substr(0, 3) !== '---') {\r\n      throw new Error('Specified script file is not valid OpenSesame script')\r\n    }\r\n\r\n    // Disable the progressbar.\r\n    this._runner._screen._updateProgressBar(100)\r\n    // Set the script paramter.\r\n    // this._runner._script = contents\r\n    return contents\r\n  }\r\n\r\n  /**\r\n   * Asynchronously iterate over file pool files and generate items for them.\r\n   *\r\n   * @param {array} poolFiles The array containing file pool files\r\n   * @returns void\r\n   * @memberof Transfer\r\n   */\r\n  async _processOsexpPoolItems (poolFiles) {\r\n    // Async iterator that handles each file in the poolFiles array\r\n    const asyncIterator = {\r\n      currentIndex: 0,\r\n      next () { // All the action happens here\r\n        const currentFile = poolFiles[this.currentIndex]\r\n\r\n        // If currentFile is undefined, then the array has been depleted and all\r\n        // files have been processed. This ends the async iteration properly\r\n        if (!currentFile) {\r\n          return {\r\n            value: undefined,\r\n            done: true\r\n          }\r\n        }\r\n\r\n        // Generate the item.\r\n        const item = {\r\n          data: null,\r\n          folder: currentFile.name.match(/(.*)[/\\\\]/)[1] || '',\r\n          name: currentFile.name.replace(/^.*[\\\\/]/, '').replace(\r\n            /U\\+([0-9A-F]{4})/g, (whole, group1) => {\r\n              // Parse encoded characters back to their unicode counterparts\r\n              return String.fromCharCode(parseInt(group1, 16))\r\n            }\r\n          ),\r\n          size: currentFile.size,\r\n          type: 'undefined'\r\n        }\r\n\r\n        // Determine the file type and generate the appropriate osweb item\r\n        const ext = currentFile.name.substr(currentFile.name.lastIndexOf('.') + 1)\r\n        if (['jpg', 'jpeg', 'png', 'bmp'].includes(ext.toLowerCase())) {\r\n          // Create a new file pool mage item.\r\n          const img = new Image()\r\n          img.src = currentFile.getBlobUrl()\r\n          item.data = img\r\n          item.type = 'image'\r\n        } else if (['wav', 'ogg'].includes(ext.toLowerCase())) {\r\n          const ado = new Audio()\r\n          ado.src = currentFile.getBlobUrl()\r\n          item.data = ado\r\n          item.type = 'sound'\r\n        } else if (['ogv', 'mp4', 'm4v'].includes(ext.toLowerCase())) {\r\n          const ado = document.createElement('VIDEO')\r\n          ado.src = currentFile.getBlobUrl()\r\n          item.data = ado\r\n          item.type = 'video'\r\n        };\r\n        // Increment the counter.\r\n        this.currentIndex++\r\n\r\n        return {\r\n          value: item,\r\n          done: false\r\n        }\r\n      },\r\n      // for-await calls this on whatever it's passed, so\r\n      // iterators tend to return themselves.\r\n      [Symbol.asyncIterator] () {\r\n        return this\r\n      }\r\n    }\r\n\r\n    // Iterate over the file pool items\r\n    for await (const item of asyncIterator) {\r\n      // Add the item to the virtual pool.\r\n      this._runner._pool.add(item)\r\n\r\n      // Update the progress bar.\r\n      this._runner._screen._updateProgressBar(asyncIterator.currentIndex / poolFiles.length)\r\n    }\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Read in webfonts\r\n   *\r\n   * @returns Promise\r\n   * @memberof Transfer\r\n   */\r\n  async _readWebFonts () {\r\n    // Update the introscreen\r\n    this._runner._screen._updateProgressBar(100)\r\n    this._runner._screen._updateIntroScreen('Retrieving required webfonts.')\r\n\r\n    return new Promise((resolve, reject) => {\r\n      // Load the required fonts using webfont.\r\n      WebFont.load({\r\n        google: {\r\n          families: ['Droid Sans', 'Droid Serif', 'Droid Sans Mono'],\r\n          urls: ['//fonts.googleapis.com/css?family=Droid Sans',\r\n            '//fonts.googleapis.com/css?family=Droid Serif',\r\n            '//fonts.googleapis.com/css?family=Droid Sans Mono'\r\n          ]\r\n        },\r\n        active: () => resolve(),\r\n        inactive: () => reject(new Error('Could not load webfonts'))\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Writing experiment result data to a location.\r\n   * @param {String} target - An addres to store result data.\r\n   * @param {Object} resultData - The result data itself to store.\r\n   */\r\n  _writeDataFile (target, resultData) {\r\n    // Check if the target and resultData are defined.\r\n    if ((target !== null) && (resultData !== null)) {\r\n      // Add the data as a form element.\r\n      var data = new FormData()\r\n      data.append('data', resultData.toString())\r\n\r\n      // Create the request.\r\n      var xhr = new XMLHttpRequest()\r\n      xhr.open('post', target + '?file=subject-' + this._runner._experiment.vars['subject_nr'], true)\r\n\r\n      // Send the actual data.\r\n      return xhr.send(data)\r\n    }\r\n  }\r\n}\r\n","/** Class representing an item stack. */\r\nexport default class ItemStack {\r\n  /**\r\n   * Create an stack array for running items.\r\n   * @param {Object} runner - The runner to which the item stack belongs.\r\n   */\r\n  constructor (runner) {\r\n    // Create and set private properties.\r\n    this._items = [] // Container for all items.\r\n    this._runner = runner // Parent runner attached to the item stack class.\r\n  }\r\n\r\n  /** Clear the entire item stack. */\r\n  clear () {\r\n    // Clears the stack.\r\n    this._items = []\r\n  }\r\n\r\n  /**\r\n   * Push a new item onto the item stack.\r\n   * @param {Object} item - The item to add to the item stack.\r\n   * @param {String} phase - The phase in which the stack exists.\r\n   */\r\n  push (item, phase) {\r\n    // Create the stack item.\r\n    const stackItem = {\r\n      'item': item,\r\n      'phase': phase\r\n    }\r\n\r\n    // Push the item onto the stack.\r\n    this._items.push(stackItem)\r\n  }\r\n\r\n  /**\r\n   * Pops the last item from the stack.\r\n   * @return {Object} - The last added item from the stack.\r\n   */\r\n  pop () {\r\n    // Pops the last item from the stack.\r\n    return this._items.pop()\r\n  }\r\n}\r\n","// This itemClasses variable is a temporary solution. We should think of a simpler\r\n// method of converting string names (e.g. keyboard_response) to the associated\r\n// class names (e.g. KeyboardResponse), without relying on eval.\r\nimport {\r\n  itemClasses\r\n} from '../system/constants.js'\r\n\r\n/** Class representing an item store. */\r\nexport default class ItemStore {\r\n  /**\r\n   * Create an item store for all OpenSesame items.\r\n   * @param {Object} runner - The runner to which the item store belongs.\r\n   */\r\n  constructor (runner) {\r\n    // Set the class private properties.\r\n    this._items = {} // All the unique items in the item store.\r\n    this._runner = runner // Parent runner attached to the item store.\r\n  }\r\n\r\n  /** Clear all the items in the store. */\r\n  _clean_up () {\r\n    // Clear the items.\r\n    this._items = {}\r\n  }\r\n\r\n  /**\r\n   * Checks of the classname is defined within the osweb namespace.\r\n   * @param {String} className - name of the class to check.\r\n   * @return {Boolean} - True if the class is valid within the opsweb context.\r\n   */\r\n  _isClass (className) {\r\n    // Return true if the classname is found in the item classes.\r\n    return (className in itemClasses)\r\n  }\r\n\r\n  /**\r\n   * Add a new OpenSesame element to a sketchpad item.\r\n   * @param {String} type -type of the element to be created.\r\n   * @param {Object} sketchpad - sketchpad item to which the item belongs.\r\n   * @param {String} script - string definition of the ites.\r\n   * @return {Object} - The item which wass created.\r\n   */\r\n  _newElementClass (type, sketchpad, string) {\r\n    // Create the element.\r\n    var element = new itemClasses[type](sketchpad, string)\r\n\r\n    // Return the element\r\n    return element\r\n  }\r\n\r\n  /**\r\n   * Add a new OpenSesame item to the experiment.\r\n   * @param {String} type -type of the item to be created.\r\n   * @param {Object} experiment - experiment item to which the item belongs.\r\n   * @param {String} name - name of the item to be created.\r\n   * @param {String} script - string definition of the ites.\r\n   * @return {Object} - The item which was created.\r\n   */\r\n  _newItemClass (type, experiment, name, script) {\r\n    // Create the element.\r\n    var element = new itemClasses[type](experiment, name, script)\r\n\r\n    // Set the type of the item.\r\n    element.type = type\r\n\r\n    // Return the element\r\n    return element\r\n  }\r\n\r\n  /**\r\n   * Add a new OpenSesame widget to the experiment.\r\n   * @param {String} type -type of the widget to be created.\r\n   * @param {Object} form - form to which the widget belongs.\r\n   * @param {String} variables - variabled belonging to the widget.\r\n   * @return {Object} - The widget which was created.\r\n   */\r\n  _newWidgetClass (type, form, variables) {\r\n    // Create the widget.\r\n    var widget = new itemClasses[type + '_widget'](form, variables)\r\n\r\n    // Return the element\r\n    return widget\r\n  }\r\n\r\n  /**\r\n   * Executes the prepare and the run phase of an item.\r\n   * @param {String} name - name of the item to prepare and run\r\n   * @param {String} parent - parent of the item.\r\n   */\r\n  execute (name, parent) {\r\n    // Prepare the item.\r\n    this.prepare(name, parent)\r\n    // Remove the prepare phase call of the item from the stack\r\n    this._runner._itemStack.pop()\r\n    // Run the item.\r\n    this.run(name, parent)\r\n  }\r\n\r\n  /**\r\n   * Create an array with all the items in the store.\r\n   * @return {Array} - An array containing all the items.\r\n   */\r\n  items () {\r\n    // Create a list o keys.\r\n    var items = []\r\n    for (var key in this._items) {\r\n      items.push([key, this._items[key]])\r\n    }\r\n\r\n    // Returns a list of item names.\r\n    return items\r\n  }\r\n\r\n  /**\r\n   * Create an array with all the names of the items in the store.\r\n   * @return {Array} - An array containing all the names.\r\n   */\r\n  keys () {\r\n    // Create a list o keys.\r\n    var keys = []\r\n    for (var key in this._items) {\r\n      keys.push(key)\r\n    }\r\n\r\n    // Returns a list of item names.\r\n    return keys\r\n  }\r\n\r\n  /**\r\n   * Create a new OpenSesame item and add it to the item store.\r\n   * @param {String} type - type of item to add.\r\n   * @param {String} name - unique name of the item to add.\r\n   * @param {String} script - script containing definitions of the item.\r\n   */\r\n  newItem (type, name, script) {\r\n    // Check if the element is part of the osweb name space\r\n    if (this._isClass(type) === true) {\r\n      // Add the new item as property of items.\r\n      this._items[name] = this._newItemClass(type, this._runner._experiment, name, script)\r\n\r\n      return this._items[name]\r\n    } else {\r\n      // Unknown class definition, show error message.\r\n      this._runner._debugger.addError('The item \"' + type + '\" is not yet supported by osweb', {\r\n        notify: true,\r\n        url: 'https://osdoc.cogsci.nl/manual/osweb/#supported-functionality'\r\n      })\r\n      this._runner.exit()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the prepare phase of an item, and updates the item stack.\r\n   * @param {String} name - name of the item to prepare.\r\n   * @param {String} parent - parent of the item.\r\n   */\r\n  prepare (name, parent) {\r\n    // Add item to the stack.\r\n    this._runner._itemStack.push(name, 'prepare')\r\n\r\n    // Prepare the item.\r\n    this._items[name]._parent = parent\r\n    this._items[name].prepare()\r\n  }\r\n\r\n  /**\r\n   * Executes the run phase of an item, and updates the item stack.\r\n   * @param {String} name - name of the item to run.\r\n   * @param {String} pParent - parent of the item.\r\n   */\r\n  run (name, parent) {\r\n    // Set the current and its parent item.\r\n    this._runner._events._currentItem = this._items[name]\r\n    this._runner._events._currentItem._parent = parent\r\n\r\n    // Executes the run phase of an item, and updates the item stack.\r\n    this._runner._itemStack.push(name, 'run')\r\n    this._items[name].run()\r\n  }\r\n\r\n  /**\r\n   * Create a valid name for an item within the OpenSesame context.\r\n   * @param {String} itemType - type of the item for which a name must be build.\r\n   * @param {String} suggestion - An suggestion how to build up the name.\r\n   * @return {String} - A valid string name for the given item.\r\n   */\r\n  valid_name (itemType, suggestion) {\r\n    // Check the optional parameters.\r\n    suggestion = (typeof suggestion === 'undefined') ? null : suggestion\r\n\r\n    let name\r\n    if (suggestion === null) {\r\n      name = 'new_' + itemType\r\n    } else {\r\n      name = this._runner._experiment.syntax.sanitize(suggestion, true, false)\r\n    }\r\n\r\n    // Create a unique name.\r\n    var i = 1\r\n    var uniqueName = name\r\n    while (this._items.hasOwnProperty(uniqueName) === true) {\r\n      uniqueName = name + '_' + String(i)\r\n      i++\r\n    }\r\n\r\n    // Return function result\r\n    return uniqueName\r\n  }\r\n\r\n  /**\r\n   * Create an array with all the values (items) in the store.\r\n   * @return {Array} - An array containing all the items.\r\n   */\r\n  values () {\r\n    // Create a list o keys.\r\n    var values = []\r\n    for (var key in this._items) {\r\n      values.push(this._items[key])\r\n    }\r\n\r\n    // Returns a list of item names.\r\n    return values\r\n  }\r\n}\r\n","/** Class representing a file pool. */\r\nexport default class FilePoolStore {\r\n  /**\r\n   * Create a file store object for all stimuli files.\r\n   * @param {Object} runner - The runner to which the file store belongs.\r\n   */\r\n  constructor (runner) {\r\n    // Create and set private properties.\r\n    this._items = [] // Container for all pool items.\r\n    this._runner = runner // Parent runner attached to the file pool.\r\n  }\r\n\r\n  /** Clear all the items in the store. */\r\n  _clean_up () {\r\n    // Clear the items.\r\n    this._items = []\r\n  }\r\n\r\n  /**\r\n   * General function for adding an item to the pool.\r\n   * @param {Object} item - The item which is added to the pool.\r\n   */\r\n  add (item, new_name) {\r\n    // Check parameter new_name.\r\n    new_name = (typeof new_name === 'undefined') ? null : new_name\r\n\r\n    // Set the new name of the item.\r\n    if (new_name !== null) {\r\n      item.name = new_name\r\n    }\r\n\r\n    // Add the item to the pool.\r\n    this._items.push(item)\r\n\r\n    // Link the item as property\r\n    this[item.name] = item\r\n  }\r\n\r\n  /**\r\n   * Should return the fallback folder bunt osweb this is not functional.\r\n   * @return {null} - always null due to the nature of osweb.\r\n   */\r\n  fallback_folder () {\r\n    // Always returns null because this function is not possible.\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Create an array with all the files in the store.\r\n   * @return {Array} - An array containing all the files.\r\n   */\r\n  files () {\r\n    // Create a list o keys.\r\n    var files = []\r\n    for (var i = 0; i < this._items.length; i++) {\r\n      files.push(this._items[i])\r\n    }\r\n\r\n    // Returns a list of item names.\r\n    return files\r\n  }\r\n\r\n  /**\r\n   * Renames a file in the pool folder.\r\n   * @param {String} old_path - The olod file name.\r\n   * @param {String} new_path - The new file name.\r\n   */\r\n  rename (old_path, new_path) {\r\n    for (var i = 0; i < this._items.length; i++) {\r\n      // Check for the old_name.\r\n      if (this._items[i].name === old_path) {\r\n        // Set the new property name.\r\n        this[new_path] = this._items[i]\r\n\r\n        // Remove the old property name.\r\n        delete this[old_path]\r\n\r\n        // Set the new name.\r\n        this._items[i].name = new_path\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates and returns the total size in bytes of all thje fioles.\r\n   * @return {Number} - The size of all files in bytes.\r\n   */\r\n  size () {\r\n    // Create a list of keys.\r\n    var size = 0\r\n    for (var i = 0; i < this._items.length; i++) {\r\n      size = size + this._items[i].size\r\n    }\r\n\r\n    // Returns a list of item names.\r\n    return size\r\n  }\r\n}\r\n","import {\r\n  isNumber,\r\n  toNumber,\r\n  isObject,\r\n  isString\r\n} from 'lodash'\r\n\r\n/** Class representing a syntax checker. */\r\nexport default class Syntax {\r\n  /**\r\n   * Create a syntax checker within OpenSesame.\r\n   * @param {Object} runner - The runner to which the syntax checker belongs.\r\n   */\r\n  constructor (runner) {\r\n    // Create and set private properties.\r\n    this._runner = runner // Parent runner attached to the syntax class.\r\n    this.isNumber = isNumber // attach lodash function to class;\r\n  }\r\n\r\n  /**\r\n   * Compile a os condition for further processing.\r\n   * @param {String} cnd - The condition to compile.\r\n   * @param {Boolean} bytecode - The condition is converted to a python AST tree.\r\n   * @return {String} - The compiled condition.\r\n   */\r\n  compile_cond (cnd, bytecode) {\r\n    // Check for conditional paramters.\r\n    bytecode = (typeof bytecode === 'undefined') ? true : bytecode\r\n\r\n    if (cnd.toLowerCase() === 'always') {\r\n      return true\r\n    } else if (cnd.toLowerCase() === 'never') {\r\n      return false\r\n    } else {\r\n      if (cnd[0] === '=') {\r\n        cnd = cnd.substr(1)\r\n      } else {\r\n        cnd = this.remove_quotes(cnd)\r\n        // Scan for literals (strings, ßnumbers, etc).\r\n        cnd = cnd.replace(/(?!(?:and|or|not)\\b)(?:\".*?\"|'.*?'|\\[(?:\\w+?|=.+)\\]|\\b\\w+\\b)/g, (match, offset, string) => {\r\n          if (string[offset] === '[' && string[offset + match.length - 1] === ']') {\r\n            // Check if match is a variable.\r\n            if (string[offset - 1] === '\\\\' && string[offset - 2] !== '\\\\') {\r\n              // Check if the current match is escaped, and simpl\\w+?|=.+y return it untouched if so.\r\n              return `\"${match}\"`\r\n            }\r\n            // Check if the variable contains a Python expression\r\n            if (match[1] === '=') {\r\n              const expression = match.substring(2, match.length - 1)\r\n              const ast = this._runner._pythonParser._parse(expression)\r\n              return this._runner._pythonParser._run_statement(ast)\r\n            }\r\n\r\n            // Return the var. notation otherwise\r\n            const content = match.substring(1, match.length - 1)\r\n            return `var.${content}`\r\n          } else if ([`\"`, `'`].includes(string[offset]) &&\r\n            string[offset] === string[offset + match.length - 1]) {\r\n            // Check if match is between quotes. Don't do anything then\r\n            return match\r\n          } else if (!Number.isNaN(Number(match))) {\r\n            return Number(match)\r\n          } else {\r\n            return `\"${match}\"`\r\n          }\r\n        })\r\n\r\n        // Handle operators.\r\n        cnd = cnd.replace(/([^!<>=\\-+*])(=)([^=])/g, '$1==$3')\r\n      }\r\n    }\r\n    if (bytecode === true) {\r\n      return this._runner._pythonParser._parse(cnd)\r\n    } else {\r\n      return cnd\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts a string to a float or integer if possible.\r\n   * @param {String|Number} value -The variable to convert to a number.\r\n   * @return {String|Number} - An number or float if variable could be converted, original value otherwise.\r\n   */\r\n  convert_if_numeric (value) {\r\n    var result = Number(value)\r\n    return Number.isNaN(result) ? value : result\r\n  }\r\n\r\n  /**\r\n   * Counts the quotes occuring inside the provided string.\r\n   * @param {String} line - The string line to count the quotes in.\r\n   * @return {Number} - The number of quotes counted.\r\n   */\r\n  count_quotes (line) {\r\n    var res = 0\r\n    var in_entity = false\r\n    for (var i = 0; i < line.length; i++) {\r\n      if ((line[i] === '\\\\' && !in_entity) || in_entity) { // reverse the flag\r\n        in_entity = !in_entity\r\n      } else if (line[i] === '\"' && !in_entity) { // an unescaped \"\r\n        res += 1\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n  /**\r\n   * Evaluate a given text with optional variable definitions.\r\n   * @param {Boolean|Number|Object|String} txt - The text to evaluate.\r\n   * @param {Object} vars - The variables used for evaluation.\r\n   * @param {Boolean} addQuotes - The add quotes toggle.\r\n   * @return {Boolean|Number|Object|String} - The result of the evaluated text.\r\n   */\r\n  eval_text (text, vars, addQuotes = false) {\r\n    // if pTxt is an object then it is a parsed python expression.\r\n    if (isObject(text)) return this._runner._pythonParser._run_statement(text)\r\n    // if pTxt is already a number simply return it\r\n    if (isNumber(text)) return text\r\n    // Try to convert text to a number. If this succeeds return it.\r\n    if ((text !== '') && !isNaN(toNumber(text))) return toNumber(text)\r\n    text = this.escapeBrackets(text)\r\n    /** The replacer function detects variable entries in the passed text\r\n    and replaces them with variable values as found in OpenSesame's var store */\r\n    let result = text.replace(/\\[(\\w+|=.+?)\\]/g, (match, content, offset, string) => {\r\n      // Check if contents of [] start with an =. In this case they should be\r\n      // evaluated as a Python statement\r\n      content = this.unescapeBrackets(content)\r\n      if (content[0] === '=') {\r\n        // Convert python statement to ast tree and run it.\r\n        const ast = this._runner._pythonParser._parse(content.substring(1, content.length))\r\n        return this._runner._pythonParser._run_statement(ast)\r\n      } else {\r\n        let value\r\n        try {\r\n          if ((typeof vars === 'undefined') || (vars === null) || (typeof vars[content] === 'undefined')) {\r\n            value = this._runner._experiment.vars[content]\r\n          } else {\r\n            value = vars[content]\r\n          }\r\n          // Value could still be an expression, so evaluate again\r\n          if (typeof value === 'undefined') {\r\n            throw new ReferenceError(`Variable '${content}' not present in var store`)\r\n          }\r\n          if (isString(value)) {\r\n            if (value !== '') {\r\n              value = this.eval_text(value, vars, addQuotes)\r\n            }\r\n          }\r\n        } catch (err) {\r\n          this._runner._debugger.addError(`Could not resolve variable '${content}': ${err.message}`)\r\n          throw err\r\n        }\r\n        if (addQuotes === true) {\r\n          // Temporary hack for string types.\r\n          return isString(value) ? `\"${value}\"` : value\r\n        } else {\r\n          return value\r\n        }\r\n      }\r\n    })\r\n    // Try to convert the result to a number again. If this succeeds return it.\r\n    if (result !== '') {\r\n      let nr = toNumber(result)\r\n      if (!isNaN(nr)) return nr\r\n    }\r\n    // Check if content has additional quotes\r\n    return this.strip_slashes(this.unescapeBrackets(result))\r\n  }\r\n\r\n  /**\r\n   * Wraps and escapes a text so that it can safely be embedded in a\r\n        command string. For example:\r\n        He said: \"hi\"\r\n        would become:\r\n        \"He said: \\\"hi\\\"\"\r\n   * @param  {string} s The string to wrap\r\n   * @return {string}   The wrapped string\r\n   */\r\n  safe_wrap (s) {\r\n    // If s is a number, return untouched.\r\n    if (!isNumber(s)) {\r\n      // see if there are any non-alphanumeric characters.\r\n      // Wrap the value in quotes if so.\r\n      if (/[^a-z0-9_]/i.test(s)) {\r\n        s = '\"' + this.add_slashes(s) + '\"'\r\n      }\r\n    } else {\r\n      s = Number(s)\r\n    }\r\n    return s\r\n  }\r\n\r\n  /**\r\n   * Add escape slashes to the given string\r\n   * @param  {string} str The string to escape.\r\n   * @return {string}     The escaped string.\r\n   */\r\n  add_slashes (str) {\r\n    return str.replace(/\\\\/g, '\\\\\\\\')\r\n      .replace(/\\u0008/g, '\\\\b')\r\n      .replace(/\\t/g, '\\\\t')\r\n      .replace(/\\n/g, '\\\\n')\r\n      .replace(/\\f/g, '\\\\f')\r\n      .replace(/\\r/g, '\\\\r')\r\n      .replace(/'/g, '\\\\\\'')\r\n      .replace(/\"/g, '\\\\\"')\r\n  }\r\n\r\n  /**\r\n   * Strip escape slashes from the given string.\r\n   * @param {String} line - The string to strip from escape backslashes\r\n   * @return {String} - The stripped string.\r\n   */\r\n  strip_slashes (line) {\r\n    // Negative lookbehinds require ECMA2018, therefore we fall\r\n    // back to a more clunky technique\r\n    // return line.replace(/(?<!\\\\)\\\\(?=['\"\\\\])/mg, '')\r\n    return line.replace(/\\\\(?=['\"])/mg, '').replace(/\\\\\\\\/mg, '\\\\')\r\n  }\r\n\r\n  /**\r\n   * Parses an instruction line of OpenSesame script\r\n   * @param {String} line - The line to parse\r\n   * @return {Array} - An array with command, list of arguments and an object with keyword arguments.\r\n   */\r\n  parse_cmd (line) {\r\n    // Check if quoted strings are properly closed.\r\n    if (this.count_quotes(line) % 2 !== 0) {\r\n      // Unequal number of quotes detected. Can't be right.\r\n      this._runner._debugger.addError('Invalid script definition, parsing error: ' + \" '\" + line + \"'\")\r\n    }\r\n\r\n    // Split the string line.\r\n    var tokens = this.split(line)\r\n    var cmd = tokens.shift()\r\n    var args = []\r\n    var kwargs = {}\r\n\r\n    for (var i = 0; i < tokens.length; i++) {\r\n      var value = tokens[i]\r\n      // Monster regex, splits into key/value pair.\r\n      let parsed = value.split(/(?:(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"))|(?:(\\w+)=(?:(?:(-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)|(\\w+))|(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")))/gm).filter(Boolean)\r\n      // parsed will have length 1 if the variable has no keyword, and will be\r\n      // of length 2 (split over the = symbol) if the variable had a keyword\r\n      if (parsed.length < 2) {\r\n        args.push(this.convert_if_numeric(this.sanitize(parsed[0])))\r\n      } else {\r\n        kwargs[parsed[0]] = this.convert_if_numeric(this.sanitize(parsed[1]))\r\n      }\r\n    }\r\n    return [cmd, args, kwargs]\r\n  }\r\n\r\n  create_cmd (cmd, args, kwargs) {\r\n    var result = cmd\r\n    if (typeof (args) !== 'undefined' && args instanceof Array && args.length > 0) {\r\n      for (var i = 0; i < args.length; i++) {\r\n        result += ' ' + this.safe_wrap(args[i])\r\n      }\r\n    }\r\n    if (typeof (kwargs) !== 'undefined' && args instanceof Object) {\r\n      for (var key in kwargs) {\r\n        result += ' ' + key + '=' + this.safe_wrap(kwargs[key])\r\n      }\r\n    }\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Remove additional quotes from a string line.\r\n   * @param {String} line - The string width additional quotes.\r\n   * @return {String} - Updated string.\r\n   */\r\n  remove_quotes (line) {\r\n    if (line === '\"\"') {\r\n      return ''\r\n    } else if ((line[0] === '\"') && (line[line.length - 1] === '\"')) {\r\n      return line.slice(1, line.length - 1)\r\n    } else if ((line[0] === \"'\") && (line[line.length - 1] === \"'\")) {\r\n      return line.slice(1, line.length - 1)\r\n    } else {\r\n      return line\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove invalid characters (notably quotes) from the string.\r\n   * @param {String} line - The string to restrecut.\r\n   * @param {Boolean} strict - If true use strict conversion (not implemented yet).\r\n   * @param {Boolean} allowVars -If true allow variable definitions in the string (not implemented yet).\r\n   * @return {String} - The restructured string.\r\n   */\r\n  sanitize (line, strict, allowVars) {\r\n    // Replace quotes.\r\n    line = line.replace(/^\"(.+(?=\"$))\"$/, '$1')\r\n\r\n    // Replace slashes and return result.\r\n    return this.strip_slashes(line)\r\n  }\r\n\r\n  /**\r\n   * Return an array with tokens ignoring whitespaces within.\r\n   * @param {String} line - line the line to split in tokens\r\n   * @return {Array} - The list of tokens\r\n   */\r\n  split (line) {\r\n    var result = line.match(/(?:[^\\s\"]+|\"[^\"]*\")+/g)\r\n    return (result !== null) ? result : []\r\n  }\r\n\r\n  /**\r\n   * Replaces all escaped brackets by a placeholder string of the format\r\n   * `%%OPEN:1:%%`\r\n   * @param {String} text - The text to escape.\r\n   * @return {String} - The escaped text.\r\n   */\r\n  escapeBrackets (text) {\r\n    let result = text.replace(/\\\\+[[\\]]/g, (match, content, offset, str) => {\r\n      let NBrackets = match.length - 1\r\n      if (NBrackets % 2 === 1) {\r\n        let chartype = match[match.length - 1] === '[' ? 'OPEN' : 'CLOSE'\r\n        return `%%${chartype}:${NBrackets}:%%`\r\n      }\r\n      return match\r\n    })\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Replaces all placeholder strings by escaped brackets.\r\n   * `%%OPEN:1:%%`\r\n   * @param {String} text - The text to unescape.\r\n   * @return {String} - The unescaped text.\r\n   */\r\n  unescapeBrackets (text) {\r\n    let result = text.replace(/%%(OPEN|CLOSE):\\d+:%%/g, (match, content, offset, str) => {\r\n      let chartype = match.substr(2, 4) === 'OPEN' ? '[' : ']'\r\n      let i1 = match.indexOf(':') + 1\r\n      let i2 = match.lastIndexOf(':')\r\n      let nBrackets = parseInt(match.substr(i1, i2 - i1))\r\n      return Array(nBrackets).join('\\\\') + chartype\r\n    })\r\n    return result\r\n  }\r\n}\r\n","import filbert from 'filbert'\r\n\r\n/** Class implementing a python math library. */\r\nexport default class PythonMath {\r\n  /**\r\n     * Create a python AST runner.\r\n     * @param {Object} runner - The runner to which the library belongs.\r\n     */\r\n  constructor (runner) {\r\n    // Set class parameter properties.\r\n    this._runner = runner // Parent runner attached to the library.\r\n\r\n    // Set class properties.\r\n    this.e = Math.E\r\n    this.pi = Math.PI\r\n  }\r\n\r\n  /** Initialization phase of the python_math class. */\r\n  _initialize () {\r\n    // Insert math library methods into the python interpreter.\r\n    filbert.pythonRuntime.imports['math'] = {}\r\n    filbert.pythonRuntime.imports['math']['ceil'] = this.ceil\r\n    filbert.pythonRuntime.imports['math']['copysign'] = this.copysign\r\n    filbert.pythonRuntime.imports['math']['fabs'] = this.fabs\r\n    filbert.pythonRuntime.imports['math']['factorial'] = this.factorial\r\n    filbert.pythonRuntime.imports['math']['floor'] = this.floor\r\n    filbert.pythonRuntime.imports['math']['fmod'] = this.fmod\r\n    filbert.pythonRuntime.imports['math']['frexp'] = this.frexp\r\n    filbert.pythonRuntime.imports['math']['fsum'] = this.fsum\r\n    filbert.pythonRuntime.imports['math']['acos'] = this.acos\r\n    filbert.pythonRuntime.imports['math']['asin'] = this.asin\r\n    filbert.pythonRuntime.imports['math']['atan'] = this.atan\r\n    filbert.pythonRuntime.imports['math']['atan2'] = this.atan2\r\n    filbert.pythonRuntime.imports['math']['cos'] = this.cos\r\n    filbert.pythonRuntime.imports['math']['hypot'] = this.hypot\r\n    filbert.pythonRuntime.imports['math']['sin'] = this.sin\r\n    filbert.pythonRuntime.imports['math']['tan'] = this.tan\r\n    filbert.pythonRuntime.imports['math']['e'] = this.e\r\n    filbert.pythonRuntime.imports['math']['pi'] = this.pi\r\n  }\r\n\r\n  /** Import 'ceil' function for osweb script. */\r\n  ceil (x) {\r\n  }\r\n\r\n  /** Import 'copysign' function for osweb script. */\r\n  copysign (x, y) {\r\n  }\r\n\r\n  /** Import 'fabs' function for osweb script. */\r\n  fabs (x) {\r\n  }\r\n\r\n  /** Import 'factorial' function for osweb script. */\r\n  factorial (x) {\r\n  }\r\n\r\n  /** Import 'floor' function for osweb script. */\r\n  floor (x) {\r\n    return Math.floor(x)\r\n  }\r\n\r\n  /** Import 'fmod' function for osweb script. */\r\n  fmod (x, y) {\r\n  }\r\n\r\n  /** Import 'frexp' function for osweb script. */\r\n  frexp (x) {\r\n  }\r\n\r\n  /** Import 'fsum' function for osweb script. */\r\n  fsum (iterable) {\r\n  }\r\n\r\n  /** Import 'acos' function for osweb script. */\r\n  acos (x) {\r\n    return Math.acos(x)\r\n  }\r\n\r\n  /** Import 'asin' function for osweb script. */\r\n  asin (x) {\r\n    return Math.asin(x)\r\n  }\r\n\r\n  /** Import 'atan' function for osweb script. */\r\n  atan (x) {\r\n    return Math.atan(x)\r\n  }\r\n\r\n  /** Import 'atan2' function for osweb script. */\r\n  atan2 (y, x) {\r\n    return Math.atan2(y, x)\r\n  }\r\n\r\n  /** Import 'cos' function for osweb script. */\r\n  cos (x) {\r\n    return Math.cos(x)\r\n  }\r\n\r\n  /** Import 'hypot' function for osweb script. */\r\n  hypot (x, y) {\r\n  }\r\n\r\n  /** Import 'sin' function for osweb script. */\r\n  sin (x) {\r\n    return Math.sin(x)\r\n  }\r\n\r\n  /** Import 'tan' function for osweb script. */\r\n  tan (x) {\r\n    return Math.tan(x)\r\n  }\r\n}\r\n","import filbert from 'filbert'\r\nimport Canvas from '../backends/canvas.js'\r\n\r\n/** Class implementing a python opensesame library. */\r\nexport default class PythonOpenSesame {\r\n  /**\r\n     * Create a python AST runner.\r\n     * @param {Object} runner - The runner to which the library belongs.\r\n     */\r\n  constructor (runner) {\r\n    // Set class parameter properties.\r\n    this._runner = runner // Parent runner attached to the library.\r\n  }\r\n\r\n  /** Initialization phase of the python_library class. */\r\n  _initialize () {\r\n    this._objects = {}\r\n\r\n    // Insert clock class into the python interpreter.\r\n    filbert.pythonRuntime.imports['clock'] = {}\r\n    filbert.pythonRuntime.imports['clock']['sleep'] = this._runner._experiment.clock.sleep\r\n    filbert.pythonRuntime.imports['clock']['time'] = this._runner._experiment.clock.time\r\n\r\n    // Insert log class into the python interpreter.\r\n    filbert.pythonRuntime.imports['log'] = {}\r\n    filbert.pythonRuntime.imports['log']['close'] = this._runner._experiment._log.close\r\n    filbert.pythonRuntime.imports['log']['open'] = this._runner._experiment._log.open\r\n    filbert.pythonRuntime.imports['log']['write'] = this._runner._experiment._log.write\r\n    filbert.pythonRuntime.imports['log']['write_vars'] = this._runner._experiment._log.write_vars\r\n\r\n    // Insert var class into the python interpreter.\r\n    filbert.pythonRuntime.imports['var'] = this._runner._experiment.vars\r\n    filbert.pythonRuntime.imports['var']['get'] = this._runner._experiment.vars.get\r\n    filbert.pythonRuntime.imports['var']['has'] = this._runner._experiment.vars.has\r\n    filbert.pythonRuntime.imports['var']['set'] = this._runner._experiment.vars.set\r\n    filbert.pythonRuntime.imports['var']['unset'] = this._runner._experiment.vars.unset\r\n\r\n    // Insert general opensesame methods into the python interpreter.\r\n    filbert.pythonRuntime.functions['reset_feedback'] = this._runner._experiment.reset_feedback\r\n    filbert.pythonRuntime.functions['set_subject_nr'] = this._runner._experiment.set_subject\r\n    filbert.pythonRuntime.functions['canvas'] = this.canvas\r\n    filbert.pythonRuntime.functions['copy_sketchpad'] = this.copy_sketchpad\r\n    filbert.pythonRuntime.functions['keyboard'] = this.keyboard\r\n    filbert.pythonRuntime.functions['mouse'] = this.mouse\r\n    filbert.pythonRuntime.functions['pause'] = this.pause\r\n    filbert.pythonRuntime.functions['set_subject_nr'] = this.set_subject_nr\r\n    filbert.pythonRuntime.functions['sometimes'] = this.sometimes\r\n    filbert.pythonRuntime.functions['synth'] = this.synth\r\n    filbert.pythonRuntime.functions['xy_circle'] = this.xy_circle\r\n    filbert.pythonRuntime.functions['xy_distance'] = this.xy_distance\r\n    filbert.pythonRuntime.functions['xy_from_polar'] = this.xy_from_polar\r\n    filbert.pythonRuntime.functions['xy_grid'] = this.xy_grid\r\n    filbert.pythonRuntime.functions['xy_random'] = this.xy_random\r\n    filbert.pythonRuntime.functions['xy_to_polar'] = this.xy_to_polar\r\n  }\r\n\r\n  /** Import 'canvas' function for osweb script. */\r\n  canvas (auto_prepare, style_args) {\r\n    return new Canvas(this._runner._experiment, auto_prepare, style_args)\r\n  }\r\n\r\n  /** Import 'copy_sketchpad' function for osweb script. */\r\n  copy_sketchpad (name) {\r\n  }\r\n\r\n  /** Import 'keyboard' function for osweb script. */\r\n  keyboard (resp_args) {\r\n  }\r\n\r\n  /** Import 'mouse' function for osweb script. */\r\n  mouse (resp_args) {\r\n  }\r\n\r\n  /** Import 'pause' function for osweb script. */\r\n  pause (test) {\r\n  }\r\n\r\n  /** Import 'sampler' function for osweb script. */\r\n  sampler (src, playback_args) {\r\n  }\r\n\r\n  /** Import 'set_response' function for osweb script. */\r\n  set_response (response, response_time, correct) {\r\n  }\r\n\r\n  /** Import 'sometimes' function for osweb script. */\r\n  sometimes (p) {\r\n  }\r\n\r\n  /** Import 'synth' function for osweb script. */\r\n  synth (osc, freq, length, attack, decay) {\r\n  }\r\n\r\n  /** Import 'xy_circle' function for osweb script. */\r\n  xy_circle (n, rho, phi0, pole) {\r\n  }\r\n\r\n  /** Import 'xy_distance' function for osweb script. */\r\n  xy_distance (x1, y1, x2, y2) {\r\n  }\r\n\r\n  /** Import 'xy_from_polar' function for osweb script. */\r\n  xy_from_polar (rho, phi, pole) {\r\n  }\r\n\r\n  /** Import 'xy_grid' function for osweb script. */\r\n  xy_grid (n, spacing, pole) {\r\n  }\r\n\r\n  /** Import 'xy_random' function for osweb script. */\r\n  xy_random (n, width, height, min_dist, pole) {\r\n  }\r\n\r\n  /** Import 'xy_to_polar' function for osweb script. */\r\n  xy_to_polar (x, y, pole) {\r\n  }\r\n}\r\n","import filbert from 'filbert'\n\n/** Class implementing a python random library. */\nexport default class PythonRandom {\n  /**\n     * Create a python AST runner.\n     * @param {Object} runner - The runner to which the library belongs.\n     */\n  constructor (runner) {\n    // Set class parameter properties.\n    this._runner = runner // Parent runner attached to the library.\n  }\n\n  /** Initialization phase of the python_library class. */\n  _initialize () {\n    // Insert math library methods into the python interpreter.\n    filbert.pythonRuntime.imports['random'] = {}\n    filbert.pythonRuntime.imports['random']['random'] = this.random\n    filbert.pythonRuntime.imports['random']['shuffle'] = this.shuffle\n  }\n\n  /** Import 'Random' function for osweb script. */\n  random () {\n    return Math.random()\n  }\n\n  /** Import 'Shuffle' function for osweb script. */\n  shuffle (x, random) {\n    // Fisher-Yates (aka Knuth) Shuffle.\n    var currentIndex = x.length, temporaryValue, randomIndex\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex)\n      currentIndex -= 1\n\n      // And swap it with the current element.\n      temporaryValue = x[currentIndex]\n      x[currentIndex] = x[randomIndex]\n      x[randomIndex] = temporaryValue\n    }\n    return x\n  }\n}\n","/** Class implementing a python string library. */\r\nexport default class PythonString {\r\n  /**\r\n     * Create a python AST runner.\r\n     * @param {Object} runner - The runner to which the library belongs.\r\n     */\r\n  constructor (runner) {\r\n    // Set class parameter properties.\r\n    this._runner = runner // Parent runner attached to the library.\r\n  }\r\n\r\n  /** Initialization phase of the python_library class. */\r\n  _initialize () {\r\n  }\r\n\r\n  /** Import 'capitalize' function for osweb script. */\r\n  capitalize () {\r\n  }\r\n\r\n  /** Import 'center' function for osweb script. */\r\n  center (width, fillchar) {\r\n  }\r\n\r\n  /** Import 'upper' function for osweb script. */\r\n  upper () {\r\n  }\r\n}\r\n","import filbert from 'filbert'\r\nimport PythonMath from './python_math.js'\r\nimport PythonOpenSesame from './python_opensesame.js'\r\nimport PythonRandom from './python_random.js'\r\nimport PythonString from './python_string.js'\r\nimport toNumber from 'lodash/toNumber'\r\n\r\n/** Class implementing a python AST interpreter. */\r\nexport default class PythonParser {\r\n  /**\r\n     * Create a python AST runner.\r\n     * @param {Object} runner - The runner to which the AST object belongs.\r\n     */\r\n  constructor (runner) {\r\n    // Set class parameter properties.\r\n    this._runner = runner // Parent runner attached to the AST object.\r\n\r\n    // Set class properties.\r\n    this.python_math = new PythonMath(this._runner)\r\n    this.python_opensesame = new PythonOpenSesame(this._runner)\r\n    this.python_random = new PythonRandom(this._runner)\r\n    this.python_string = new PythonString(this._runner)\r\n\r\n    // Definition of private properties.\r\n    this._classes = {} // Accessible classes within the script code.\r\n    this._function_stack = [] // Function call stack.\r\n    this._global_return_value = null // Global return value for blocking calls.\r\n    this._inline_script = null // Parent inline_script item.\r\n    this._node = null // Current active node.\r\n    this._onConsole = null\r\n    this._stack = 0 // Stack counter (hack to precent stack overflow).\r\n    this._statement = null // process one statement or an script.\r\n    this._status = 0 // Status of the walker.\r\n    this._variables = {} // Object containing all global objects and variables.\r\n  }\r\n\r\n  /** Initialization phase of the python class. */\r\n  _initialize () {\r\n    // Set the python variable connections with opensesame.\r\n    this._variables['clock'] = this._runner._experiment.clock\r\n    this._variables['exp'] = this._runner._experiment\r\n    this._variables['items'] = this._runner._itemStore\r\n    this._variables['pool'] = this._runner._pool\r\n    this._variables['var'] = this._runner._experiment.vars\r\n\r\n    // Set the console handler.\r\n    if (this._runner._onConsole !== null) {\r\n      this._onConsole = this._runner._onConsole\r\n    }\r\n\r\n    // Initialize internal libraries to the interpreter.\r\n    this.python_math._initialize()\r\n    this.python_opensesame._initialize()\r\n    this.python_random._initialize()\r\n    this.python_string._initialize()\r\n  }\r\n\r\n  /**\r\n     * Create a python AST runner.\r\n     * @param {String} script - Parse a python script using the filbert library.\r\n     */\r\n  _parse (script) {\r\n    // Check if the script exists.\r\n    if (script !== '\"\"') {\r\n      var locations = false\r\n      var parseFn = filbert.parse\r\n      var ranges = false\r\n\r\n      // Try to parse the script.\r\n      try {\r\n        var code = script\r\n        var ast = parseFn(code, {\r\n          locations: locations,\r\n          ranges: ranges })\r\n        return ast\r\n      } catch (e) {\r\n        this._runner._debugger.addError('Script parsing error: ' + e.message)\r\n        return null\r\n      }\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Get the context part of a identifier (before the dot '.').\r\n     * @param {String} identifier - Full name of the identifier.\r\n     */\r\n  _get_context (identifier) {\r\n    // Split the identifer\r\n    var items = identifier.value.split('.')\r\n\r\n    if ((items[0] === '__pythonRuntime') && (items[1] === 'imports')) {\r\n      return this._variables[items[2]]\r\n    } else {\r\n      // Return the object context\r\n      if (this._variables[items[0]] !== undefined) {\r\n        return this._variables[items[0]]\r\n      } else {\r\n        return window[items[0]]\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Get an element form a library of the variable container.\r\n     * @param {String} element - Full name of the element to retrieve.\r\n     * @return {Object} - The given element found in the context.\r\n     */\r\n  _get_element (element) {\r\n    // Split the identifier name space.\r\n    var items = element.value.split('.')\r\n\r\n    // Check if the identifier is part of the internal scope.\r\n    if (items[0] === '__pythonRuntime') {\r\n      // Check if the identifier is part of the import scope.\r\n      if (items[1] === 'imports') {\r\n        var import_lib = filbert.pythonRuntime.imports[items[2]]\r\n        let value = import_lib[items[3]]\r\n        // Attempt to convert the value to a number,\r\n        // if this fails return the original value\r\n        return isNaN(toNumber(value)) ? value : toNumber(value)\r\n      } else {\r\n        var default_lib = filbert.pythonRuntime[items[1]]\r\n        return default_lib[items[2]]\r\n      }\r\n    } else {\r\n      // No internal scope, check if it is defined in the global scope\r\n      if (this._variables[items[0]] !== undefined) {\r\n        if (items.length === 1) {\r\n          return this._variables[items[0]]\r\n        } else {\r\n          return this._variables[items[0]][items[1]]\r\n        }\r\n      } else {\r\n        if (window[items[0]] !== undefined) {\r\n          if (items.length === 1) {\r\n            return window[items[0]]\r\n          } else {\r\n            return window[items[0]][items[1]]\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Get the value of an element form a library of the variable container.\r\n     * @param {String} element - Full name of the element to retrieve.\r\n     * @return {Boolean|Number|Object|String} - The value of the given element.\r\n     */\r\n  _get_element_value (element) {\r\n    switch (element.type) {\r\n      case 'identifier':\r\n        // Split the identifier name space.\r\n        var items = element.value.split('.')\r\n\r\n        // Set the element value in the global scope.\r\n        if (items.length === 1) {\r\n          if (this._variables[items[0]] !== undefined) {\r\n            return this._variables[items[0]]\r\n          } else {\r\n            return window[items[0]]\r\n          }\r\n        } else {\r\n          if (items[0].indexOf('__filbertRight') !== -1) {\r\n            if (items[1].indexOf('__filbertIndex') !== -1) {\r\n              var container = this._variables[items[0]]\r\n              var index = this._variables[items[1]]\r\n              return container[index]\r\n            } else {\r\n              if (this._variables[items[0]] !== undefined) {\r\n                return this._variables[items[0]][items[1]]\r\n              } else {\r\n                return window[items[0]][items[1]]\r\n              }\r\n            }\r\n          } else if (items[0] === '__pythonRuntime') {\r\n            if (items[1] === 'imports') {\r\n              const import_lib = filbert.pythonRuntime.imports[items[2]]\r\n              let value = import_lib[items[3]]\r\n              // Attempt to convert the value to a number,\r\n              // if this fails return the original value\r\n              return isNaN(toNumber(value)) ? value : toNumber(value)\r\n            } else {\r\n              var default_lib = filbert.pythonRuntime[items[1]]\r\n              return default_lib[items[2]]\r\n            }\r\n          } else {\r\n            if (this._variables[items[0]] !== undefined) {\r\n              return this._variables[items[0]][items[1]]\r\n            } else {\r\n              return window[items[0]][items[1]]\r\n            }\r\n          }\r\n        }\r\n      case 'literal':\r\n        // return the value of the literal.\r\n        return element.value\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Set the value of an element.\r\n     * @param {String} element - Full name of the element to set.\r\n     * @param {Boolean|Number|Object|String} value - The value for the given element.\r\n     */\r\n  _set_element_value (element, value) {\r\n    // Split the identifier name space.\r\n    var items = element.value.split('.')\r\n\r\n    // Set the element value in the global scope.\r\n    if (items.length === 1) {\r\n      if (window[items[0]] !== undefined) {\r\n        window[items[0]] = value\r\n      } else {\r\n        this._variables[items[0]] = value\r\n      }\r\n    } else {\r\n      if (window[items[0]] !== undefined) {\r\n        window[items[0]][items[1]] = value\r\n      } else {\r\n        this._variables[items[0]][items[1]] = value\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Set the given node to the current node.\r\n     * @param {Object} node - The node to set as current node.\r\n     */\r\n  _set_node (node) {\r\n    // Set the current node as the parent node\r\n    node.parent = this._node\r\n\r\n    // Set the new node as the current node.\r\n    this._node = node\r\n  }\r\n\r\n  /**\r\n     * Set the return value of a node.\r\n     * @param {Boolean|Number|Object|String} value - The return value for the processed node.\r\n     */\r\n  _set_return_value (value) {\r\n    // Create or acces the return_values array.\r\n    this._node.parent.return_values = (typeof this._node.parent.return_values === 'undefined') ? [] : this._node.parent.return_values\r\n\r\n    // Push the value.\r\n    this._node.parent.return_values.push(value)\r\n  }\r\n\r\n  /** Process an AST array expression. */\r\n  _array_expression () {\r\n    // Initialize node specific properties.\r\n    this._node.index = (typeof this._node.index === 'undefined') ? 0 : this._node.index\r\n\r\n    // Check if all nodes in script have been processed.\r\n    if (this._node.index < this._node.elements.length) {\r\n      // Set current node to node in body.\r\n      this._node.index++\r\n      this._set_node(this._node.elements[this._node.index - 1])\r\n\r\n      // Return to the processor.\r\n      this._process_nodes()\r\n    } else {\r\n      // Redefine the return values.\r\n      for (var i = 0; i < this._node.return_values.length; i++) {\r\n        this._node.return_values[i] = this._get_element_value(this._node.return_values[i])\r\n      }\r\n      var return_value = { type: 'literal', value: this._node.return_values }\r\n\r\n      // Set the return value.\r\n      this._set_return_value(return_value)\r\n\r\n      // Reset node index and return to the parent node.\r\n      this._node.index = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n    }\r\n  }\r\n\r\n  /** Process an AST assignment expression. */\r\n  _assignment_expression () {\r\n    // Initialize node specific properties.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n      case 0:\r\n        // process id.\r\n        this._node.status = 1\r\n        this._set_node(this._node.left)\r\n\r\n        // Return to the processor.\r\n        this._process_nodes()\r\n        break\r\n      case 1:\r\n        // Process init.\r\n        this._node.status = 2\r\n        this._set_node(this._node.right)\r\n\r\n        // Return to the processor.\r\n        this._process_nodes()\r\n        break\r\n      case 2:\r\n        // define variables\r\n        var tmp_value\r\n\r\n        // Select binary operator.\r\n        switch (this._node.operator) {\r\n          case '=':\r\n            // Process the init value.\r\n            this._set_element_value(this._node.return_values[0], this._get_element_value(this._node.return_values[1]))\r\n            break\r\n          case '-=':\r\n            tmp_value = this._get_element_value(this._node.return_values[0])\r\n            this._set_element_value(this._node.return_values[0], tmp_value - this._get_element_value(this._node.return_values[1]))\r\n            break\r\n          case '/=':\r\n            tmp_value = this._get_element_value(this._node.return_values[0])\r\n            this._set_element_value(this._node.return_values[0], tmp_value / this._get_element_value(this._node.return_values[1]))\r\n            break\r\n          case '%=':\r\n            tmp_value = this._get_element_value(this._node.return_values[0])\r\n            this._set_element_value(this._node.return_values[0], tmp_value % this._get_element_value(this._node.return_values[1]))\r\n            break\r\n        }\r\n\r\n        // Reset node index and return to the parent node.\r\n        this._node.status = 0\r\n        this._node.return_values = []\r\n        this._node = this._node.parent\r\n        this._process_nodes()\r\n        break\r\n    }\r\n  }\r\n\r\n  /** Process an AST binary expression. */\r\n  _binary_expression () {\r\n    // Initialize status property.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n      case 0:\r\n        // Process object.\r\n        this._node.status = 1\r\n        this._set_node(this._node.left)\r\n\r\n        // Return to the node processor.\r\n        this._process_nodes()\r\n        break\r\n      case 1:\r\n        // Process property\r\n        this._node.status = 2\r\n        this._set_node(this._node.right)\r\n\r\n        // Return to the node processor.\r\n        this._process_nodes()\r\n        break\r\n      case 2:\r\n        // define variables.\r\n        var left = this._get_element_value(this._node.return_values[0])\r\n        var right = this._get_element_value(this._node.return_values[1])\r\n        var return_value = { type: 'literal' }\r\n\r\n        // Select binary operator.\r\n        switch (this._node.operator) {\r\n          case '-':\r\n            return_value.value = left - right\r\n            break\r\n          case '/':\r\n            return_value.value = left / right\r\n            break\r\n          case '==':\r\n            return_value.value = (left === right)\r\n            break\r\n          case '!=':\r\n            return_value.value = (left !== right)\r\n            break\r\n          case '>':\r\n            return_value.value = (left > right)\r\n            break\r\n          case '<':\r\n            return_value.value = (left < right)\r\n            break\r\n          case '>=':\r\n            return_value.value = (left >= right)\r\n            break\r\n          case '<=':\r\n            return_value.value = (left <= right)\r\n            break\r\n          case '%':\r\n            if ((typeof left === 'number') && (typeof right === 'number')) {\r\n              return_value.value = left % right\r\n            } else {\r\n              return_value.value = left.replace(/%s/g, right)\r\n            }\r\n            break\r\n          case 'instanceof':\r\n            return_value.value = left instanceof right\r\n            break\r\n        }\r\n\r\n        // Set the return value.\r\n        this._set_return_value(return_value)\r\n\r\n        // Reset node index and return to the parent node.\r\n        this._node.status = 0\r\n        this._node.return_values = []\r\n        this._node = this._node.parent\r\n        this._process_nodes()\r\n        break\r\n    }\r\n  }\r\n\r\n  /** Process an AST block statement. */\r\n  _block_statement () {\r\n    // Initialize node specific properties.\r\n    this._node.break = (typeof this._node.break === 'undefined') ? false : this._node.break\r\n    this._node.index = (typeof this._node.index === 'undefined') ? 0 : this._node.index\r\n\r\n    // Check if all nodes in script have been processed.\r\n    if ((this._node.index < this._node.body.length) && (this._node.break === false)) {\r\n      // Set current node to node in body.\r\n      this._node.index++\r\n      this._set_node(this._node.body[this._node.index - 1])\r\n\r\n      // Return to the processor.\r\n      this._process_nodes()\r\n    } else {\r\n      // Reset node index and return to the parent node.\r\n      if (this._node.break === true) {\r\n        this._node.break = false\r\n        this._node.parent.break = true\r\n      }\r\n\r\n      this._node.index = 0\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n    }\r\n  }\r\n\r\n  /** Process an AST break statement. */\r\n  _break_statement () {\r\n    // Set break flag for parent element.\r\n    this._node.parent.break = true\r\n\r\n    // Return to the parent node.\r\n    this._node = this._node.parent\r\n    this._process_nodes()\r\n  }\r\n\r\n  /** Process an AST call expression. */\r\n  _call_expression () {\r\n    // Initialize status properties.\r\n    this._node.arguments = (typeof this._node.arguments === 'undefined') ? [] : this._node.arguments\r\n    this._node.index = (typeof this._node.index === 'undefined') ? 0 : this._node.index\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n      case 0:\r\n        // Process arguments and caller.\r\n        if (this._node.index < this._node.arguments.length) {\r\n          // Set current node to next node in list.\r\n          this._node.index++\r\n          this._set_node(this._node.arguments[this._node.index - 1])\r\n\r\n          // Return to the node processessor.\r\n          this._process_nodes()\r\n        } else {\r\n          // Set parent node.\r\n          this._node.status = 1\r\n          this._set_node(this._node.callee)\r\n\r\n          // Return to the node processor.\r\n          this._process_nodes()\r\n        }\r\n        break\r\n      case 1:\r\n        // Get the first return value, which is the name of the caller element.\r\n        var return_value = this._node.return_values.pop()\r\n\r\n        // Get the arguments used on the caller element.\r\n        var tmp_arguments = []\r\n        for (var i = 0; i < this._node.return_values.length; i++) {\r\n          tmp_arguments.push(this._get_element_value(this._node.return_values[i]))\r\n        }\r\n\r\n        var caller = this._get_element(return_value)\r\n        var context = this._get_context(return_value)\r\n\r\n        if ((return_value.value === 'sleep') || (return_value.value === '__pythonRuntime.imports.clock.sleep')) {\r\n          // Adjust the status to special.\r\n          this._node.status = 2\r\n\r\n          // Check the context.\r\n          if (typeof context === 'undefined') {\r\n            context = this\r\n          }\r\n\r\n          // Execute the blocking call.\r\n          caller.apply(context, tmp_arguments)\r\n        } else {\r\n          // Check the context.\r\n          if (typeof context === 'undefined') {\r\n            context = this\r\n          }\r\n\r\n          // Execute the call, check first for internal function call.\r\n          if (this._node.callee.type === 'FunctionExpression') {\r\n            return_value = { type: 'literal', value: caller }\r\n          } else {\r\n            return_value = { type: 'literal', value: caller.apply(context, tmp_arguments) }\r\n          }\r\n\r\n          // Set the return value.\r\n          this._set_return_value(return_value)\r\n\r\n          // Reset node index and return to the parent node.\r\n          this._node.index = 0\r\n          this._node.status = 0\r\n          this._node.return_values = []\r\n          this._node = this._node.parent\r\n          this._process_nodes()\r\n        }\r\n        break\r\n      case 2:\r\n        // Special state used when calling a blocking method (sleep, clock.sleep, keyboard.get_key(), mouse.get_click).\r\n        this._set_return_value(this.global_return_value)\r\n\r\n        // Reset node index and return to the parent node.\r\n        this._node.index = 0\r\n        this._node.status = 0\r\n        this._node.return_values = []\r\n        this._node = this._node.parent\r\n        this._process_nodes()\r\n        break\r\n    }\r\n  }\r\n\r\n  /** Process an AST empty statment. */\r\n  _empty_statement () {\r\n    // Set parent node.\r\n    this._node = this._node.parent\r\n\r\n    // Return to the node processessor.\r\n    this._process_nodes()\r\n  }\r\n\r\n  /** Process an AST expression statement. */\r\n  _expression_statement () {\r\n    // Initialize status property.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    if (this._node.status === 0) {\r\n      // Set parent node.\r\n      this._node.status = 1\r\n      this._set_node(this._node.expression)\r\n\r\n      // Return to the node processor.\r\n      this._process_nodes()\r\n    } else {\r\n      // Set parent node.\r\n      this._node.status = 0\r\n      this._node = this._node.parent\r\n\r\n      // Return to the node processessor.\r\n      this._process_nodes()\r\n    }\r\n  }\r\n\r\n  /** Process an AST for statement. */\r\n  _for_statement () {\r\n    // Initialize status property.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n      case 0:\r\n        // Process object.\r\n        this._node.status = 1\r\n        this._set_node(this._node.init)\r\n\r\n        // Return to the node processessor.\r\n        this._process_nodes()\r\n        break\r\n      case 1:\r\n        // Process object.\r\n        this._node.status = 2\r\n        this._set_node(this._node.test)\r\n\r\n        // Return to the node processessor.\r\n        this._process_nodes()\r\n        break\r\n      case 2:\r\n        // Check if the test node has returned true.\r\n        if (this._node.return_values[0].value === true) {\r\n          // Process object.\r\n          this._node.status = 3\r\n          this._node.return_values = []\r\n          this._set_node(this._node.body)\r\n\r\n          // Return to the node processessor.\r\n          this._process_nodes()\r\n        } else {\r\n          // Range has ended.\r\n          this._node.status = 0\r\n          this._node.return_values = []\r\n          this._node = this._node.parent\r\n\r\n          // Return to the node processessor.\r\n          this._process_nodes()\r\n        }\r\n        break\r\n      case 3:\r\n        // Process object.\r\n        this._node.status = 1\r\n        this._set_node(this._node.update)\r\n\r\n        // Return to the node processessor.\r\n        this._process_nodes()\r\n        break\r\n    }\r\n  }\r\n\r\n  /** Process an AST for in statement. */\r\n  _for_in_statement () {\r\n    // Initialize status property.\r\n    this._node.index = (typeof this._node.index === 'undefined') ? 0 : this._node.index\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n      case 0:\r\n        // Process object.\r\n        this._node.status = 1\r\n        this._set_node(this._node.left)\r\n\r\n        // Return to the node processessor.\r\n        this._process_nodes()\r\n        break\r\n      case 1:\r\n        // Process object.\r\n        this._node.status = 2\r\n        this._set_node(this._node.right)\r\n\r\n        // Return to the node processessor.\r\n        this._process_nodes()\r\n        break\r\n      case 2:\r\n        // Retrieve the range on which the loop travels.\r\n        var tmp_range = this._get_element_value(this._node.return_values[1])\r\n\r\n        // Execute the range.\r\n        if (this._node.index < tmp_range.length) {\r\n          // Set the value of the range.\r\n          this._set_element_value(this._node.return_values[0], tmp_range[this._node.index])\r\n\r\n          // Increase the index.\r\n          this._node.index++\r\n\r\n          // Execute the body.\r\n          this._set_node(this._node.body)\r\n          this._process_nodes()\r\n        } else {\r\n          this._node.index = 0\r\n          this._node.status = 0\r\n          this._node.return_values = []\r\n          this._node = this._node.parent\r\n          this._process_nodes()\r\n        }\r\n        break\r\n    }\r\n  }\r\n\r\n  /** Process an AST function expression. */\r\n  _function_expression () {\r\n    // Initialize status property.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n      case 0:\r\n        // Process defaults.\r\n        this._node.status = 1\r\n        this._set_node(this._node.body)\r\n\r\n        // Return to the node processor.\r\n        this._process_nodes()\r\n        break\r\n      case 1:\r\n        // Remove the last return value from the global function stack.\r\n        var return_value = this._function_stack.pop()\r\n\r\n        // Set the return value\r\n        this._set_return_value(return_value)\r\n\r\n        // Set parent node.\r\n        this._node.status = 0\r\n        this._node.return_values = []\r\n        this._node = this._node.parent\r\n        this._process_nodes()\r\n        break\r\n    }\r\n  }\r\n\r\n  /** Process an AST identifier. */\r\n  _identifier () {\r\n    // Retrieve the identifier information.\r\n    const return_value = { type: 'identifier', value: this._node.name }\r\n\r\n    // Set the return value.\r\n    this._set_return_value(return_value)\r\n\r\n    // Set parent node.\r\n    this._node = this._node.parent\r\n    this._process_nodes()\r\n  }\r\n\r\n  /** Process an AST if statement. */\r\n  _if_statement () {\r\n    // Initialize status property.\r\n    this._node.break = (typeof this._node.break === 'undefined') ? false : this._node.break\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n      case 0:\r\n        // Process object.\r\n        this._node.status = 1\r\n        this._set_node(this._node.test)\r\n\r\n        // Return to the node processor.\r\n        this._process_nodes()\r\n        break\r\n      case 1:\r\n        // Check if expression is true.\r\n        if (this._node.return_values[0].value === true) {\r\n          this._node.status = 2\r\n          this._set_node(this._node.consequent)\r\n\r\n          // Return to the node processor.\r\n          this._process_nodes()\r\n        } else if (this._node.alternate !== null) {\r\n          this._node.status = 2\r\n          this._set_node(this._node.alternate)\r\n\r\n          // Return to the node processor.\r\n          this._process_nodes()\r\n        } else {\r\n          this._node.status = 2\r\n          this._process_nodes()\r\n        }\r\n        break\r\n      case 2:\r\n        // Set parent node.\r\n        if (this._node.break === true) {\r\n          this._node.break = false\r\n          this._node.parent.break = true\r\n        }\r\n        this._node.status = 0\r\n        this._node.return_values = []\r\n        this._node = this._node.parent\r\n        this._process_nodes()\r\n        break\r\n    }\r\n  }\r\n\r\n  /** Process an AST literal. */\r\n  _literal () {\r\n    // Retrieve the identifier information.\r\n    var return_value = { type: 'literal', value: this._node.value }\r\n\r\n    // Set the return value.\r\n    this._set_return_value(return_value)\r\n\r\n    // Set parent node.\r\n    this._node = this._node.parent\r\n    this._process_nodes()\r\n  }\r\n\r\n  /** Process an AST logical expression. */\r\n  _logical_expression () {\r\n    // Initialize status property.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n      case 0:\r\n        // Process object.\r\n        this._node.status = 1\r\n        this._set_node(this._node.left)\r\n\r\n        // Return to the node processor.\r\n        this._process_nodes()\r\n        break\r\n      case 1:\r\n        // Process property\r\n        this._node.status = 2\r\n        this._set_node(this._node.right)\r\n\r\n        // Return to the node processor.\r\n        this._process_nodes()\r\n        break\r\n      case 2:\r\n        // define variables.\r\n        var left = this._get_element_value(this._node.return_values[0])\r\n        var right = this._get_element_value(this._node.return_values[1])\r\n        var return_value = { type: 'literal' }\r\n\r\n        // Select binary operator.\r\n        switch (this._node.operator) {\r\n          case '&&':\r\n            return_value.value = left && right\r\n            break\r\n          case '||':\r\n            return_value.value = left || right\r\n            break\r\n        }\r\n\r\n        // Set the return value.\r\n        this._set_return_value(return_value)\r\n\r\n        // Reset node index and return to the parent node.\r\n        this._node.status = 0\r\n        this._node.return_values = []\r\n        this._node = this._node.parent\r\n        this._process_nodes()\r\n        break\r\n    }\r\n  }\r\n\r\n  /** Process an AST member expression */\r\n  _member_expression () {\r\n    // Initialize status property.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n      case 0:\r\n        // Process object.\r\n        this._node.status = 1\r\n        this._set_node(this._node.object)\r\n\r\n        // Return to the node processessor.\r\n        this._process_nodes()\r\n        break\r\n      case 1:\r\n        // Process property\r\n        this._node.status = 2\r\n        this._set_node(this._node.property)\r\n\r\n        // Return to the node processessor.\r\n        this._process_nodes()\r\n        break\r\n      case 2:\r\n        // Build the combing return value.\r\n        var return_value = { type: 'identifier', value: this._node.return_values[0].value + '.' + this._node.return_values[1].value }\r\n\r\n        // Set the return value\r\n        this._set_return_value(return_value)\r\n\r\n        // Reset node index and return to the parent node.\r\n        this._node.status = 0\r\n        this._node.return_values = []\r\n        this._node = this._node.parent\r\n        this._process_nodes()\r\n        break\r\n    }\r\n  }\r\n\r\n  /** Process an AST new expression. */\r\n  _new_expression () {\r\n    // Initialize status properties.\r\n    this._node.arguments = (typeof this._node.arguments === 'undefined') ? [] : this._node.arguments\r\n    this._node.index = (typeof this._node.index === 'undefined') ? 0 : this._node.index\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    if (this._node.status === 0) {\r\n      // Process arguments and caller.\r\n      if (this._node.index < this._node.arguments.length) {\r\n        // Set current node to next node in list.\r\n        this._node.index++\r\n        this._set_node(this._node.arguments[this._node.index - 1])\r\n\r\n        // Return to the node processessor.\r\n        this._process_nodes()\r\n      } else {\r\n        // Set parent node.\r\n        this._node.status = 1\r\n        this._set_node(this._node.callee)\r\n\r\n        // Return to the node processor.\r\n        this._process_nodes()\r\n      }\r\n    } else {\r\n      // Get the caller and context element.\r\n      let returnValue = this._node.return_values.pop()\r\n      var caller = this._get_element(returnValue)\r\n      var context = this._get_context(returnValue)\r\n\r\n      // Create the aruments array.\r\n      var tmp_arguments = []\r\n      for (var i = 0; i < this._node.return_values.length; i++) {\r\n        tmp_arguments.push(this._get_element_value(this._node.return_values[i]))\r\n      }\r\n\r\n      // Execute the call.\r\n      returnValue = { type: 'literal', value: caller.apply(context, tmp_arguments) }\r\n\r\n      // Set the return value\r\n      this._set_return_value(returnValue)\r\n\r\n      // Reset node index and return to the parent node.\r\n      this._node.index = 0\r\n      this._node.status = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n    }\r\n  }\r\n\r\n  /** Process an AST program. */\r\n  _program () {\r\n    // Initialize node specific properties.\r\n    this._node.index = (typeof this._node.index === 'undefined') ? 0 : this._node.index\r\n\r\n    // Check if all nodes in script have been processed.\r\n    if (this._node.index < this._node.body.length) {\r\n      // Set current node to node in body.\r\n      this._node.index++\r\n      this._set_node(this._node.body[this._node.index - 1])\r\n\r\n      // Return to the processor.\r\n      this._process_nodes()\r\n    } else {\r\n      // Change status and end the running process.\r\n      this._node.index = 0\r\n      this._status = 2\r\n\r\n      // Complete the inline item.\r\n      if (this._inline_script !== null) {\r\n        this._inline_script._complete()\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Process an AST return statement. */\r\n  _return_statement () {\r\n    // Initialize status property.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n      case 0:\r\n        // Process object.\r\n        this._node.status = 1\r\n        this._set_node(this._node.argument)\r\n\r\n        // Return to the node processessor.\r\n        this._process_nodes()\r\n        break\r\n      case 1:\r\n        // Set return value.\r\n        const returnValue = { type: 'identifier', value: this._node.return_values[0].value }\r\n\r\n        // Set the return value\r\n        this._function_stack.push(returnValue)\r\n\r\n        // Reset node index and return to the parent node.\r\n        this._node.status = 0\r\n        this._node.return_values = []\r\n        this._node = this._node.parent\r\n        this._process_nodes()\r\n        break\r\n    }\r\n  }\r\n\r\n  /** Process an AST unary expression. */\r\n  _unary_expression () {\r\n    // Initialize node specific properties.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    if (this._node.status === 0) {\r\n      // Set parent node.\r\n      this._node.status = 1\r\n      this._set_node(this._node.argument)\r\n\r\n      // Return to the node processor.\r\n      this._process_nodes()\r\n    } else {\r\n      var return_value = { type: 'literal' }\r\n\r\n      // process the operator.\r\n      switch (this._node.operator) {\r\n        case '!' :\r\n          return_value.value = !(this._node.return_values[0].value)\r\n          break\r\n        case '-' :\r\n          return_value.value = -(this._node.return_values[0].value)\r\n          break\r\n      }\r\n\r\n      // Set the return value\r\n      this._set_return_value(return_value)\r\n\r\n      // Return to the node processessor.\r\n      this._node.status = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n    }\r\n  }\r\n\r\n  /** Process an AST update expression. */\r\n  _update_expression () {\r\n    // Initialize node specific properties.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    if (this._node.status === 0) {\r\n      // Set parent node.\r\n      this._node.status = 1\r\n      this._set_node(this._node.argument)\r\n\r\n      // Return to the node processor.\r\n      this._process_nodes()\r\n    } else {\r\n      // Process the init value.\r\n      switch (this._node.operator) {\r\n        case '++' :\r\n          this._set_element_value(this._node.return_values[0], this._get_element_value(this._node.return_values[0]) + 1)\r\n          break\r\n      }\r\n\r\n      // Return to the node processessor.\r\n      this._node.status = 0\r\n      this._node.return_values = []\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n    }\r\n  }\r\n\r\n  /** Process an AST variable declaration. */\r\n  _variable_declaration () {\r\n    // Initialize node specific properties.\r\n    this._node.index = (typeof this._node.index === 'undefined') ? 0 : this._node.index\r\n\r\n    // Check if all nodes in script have been processed.\r\n    if (this._node.index < this._node.declarations.length) {\r\n      // Set current node to next node in list.\r\n      this._node.index++\r\n      this._set_node(this._node.declarations[this._node.index - 1])\r\n\r\n      // Return to the processor.\r\n      this._process_nodes()\r\n    } else {\r\n      // Reset node index and return to the parent node.\r\n      this._node.index = 0\r\n      this._node = this._node.parent\r\n      this._process_nodes()\r\n    }\r\n  }\r\n\r\n  /** Process an AST variable declarator. */\r\n  _variable_declarator () {\r\n    // Initialize node specific properties.\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n      case 0:\r\n        // process id.\r\n        this._node.status = 1\r\n        this._set_node(this._node.id)\r\n\r\n        // Return to the processor.\r\n        this._process_nodes()\r\n        break\r\n      case 1:\r\n        // Process init.\r\n        this._node.status = 2\r\n        this._set_node(this._node.init)\r\n\r\n        // Return to the processor.\r\n        this._process_nodes()\r\n        break\r\n      case 2:\r\n        // Process the init value.\r\n        this._set_element_value(this._node.return_values[0], this._get_element_value(this._node.return_values[1]))\r\n\r\n        // Reset node index and return to the parent node.\r\n        this._node.status = 0\r\n        this._node.return_values = []\r\n        this._node = this._node.parent\r\n        this._process_nodes()\r\n        break\r\n    }\r\n  }\r\n\r\n  /** Process an AST while statement. */\r\n  _while_statement () {\r\n    // Initialize status property.\r\n    this._node.break = (typeof this._node.break === 'undefined') ? false : this._node.break\r\n    this._node.status = (typeof this._node.status === 'undefined') ? 0 : this._node.status\r\n\r\n    // Process the current status.\r\n    switch (this._node.status) {\r\n      case 0:\r\n        // Check for the break flag.\r\n        if (this._node.break === true) {\r\n          this._node.break = false\r\n          // Set parent node.\r\n          this._node.status = 0\r\n          this._node.return_values = []\r\n          this._node = this._node.parent\r\n          this._process_nodes()\r\n        } else {\r\n          // Process object.\r\n          this._node.status = 1\r\n          this._set_node(this._node.test)\r\n\r\n          // Return to the node processeor.\r\n          this._process_nodes()\r\n        }\r\n        break\r\n      case 1:\r\n        // Check if expression is true.\r\n        if (this._node.return_values[0].value === true) {\r\n          // Reset the test\r\n          this._node.status = 0\r\n          this._node.return_values = []\r\n\r\n          // execute the body.\r\n          this._set_node(this._node.body)\r\n\r\n          // Return to the node processor.\r\n          this._process_nodes()\r\n        } else {\r\n          // Set parent node.\r\n          this._node.status = 0\r\n          this._node.return_values = []\r\n          this._node = this._node.parent\r\n          this._process_nodes()\r\n        }\r\n        break\r\n    }\r\n  }\r\n\r\n  /** Process all AST nodes. */\r\n  _process_nodes () {\r\n    // Select type of processing.\r\n    if (this._statement === null) {\r\n      // Script processing.\r\n      this._process_nodes_jump()\r\n    } else {\r\n      if (this._node === this._statement) {\r\n        // Return the result value of the expression.\r\n        return (this._node.body[0].return_values[0].value)\r\n      } else {\r\n        // Statement processing.\r\n        this._process_nodes_timeout()\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Process a single AST nodes (timeout is for non-blocking) */\r\n  _process_nodes_jump () {\r\n    // Increase the stack counter.\r\n    this._stack++\r\n    if (this._stack > 500) {\r\n      // Clear the stack.\r\n      this._stack = 0\r\n\r\n      // Process nodes with a timeout (this is a hack for clearing the browser cache.\r\n      setTimeout(function () {\r\n        this._process_nodes_timeout()\r\n      }.bind(this), 1)\r\n    } else {\r\n      // Process the nodes without a timeout.\r\n      this._process_nodes_timeout()\r\n    }\r\n  }\r\n\r\n  /** Process a single AST nodes (timeout is for non-blocking) */\r\n  _process_nodes_timeout () {\r\n    // Select the type of node to process\r\n    switch (this._node.type) {\r\n      case 'ArrayExpression':\r\n        this._array_expression()\r\n        break\r\n      case 'AssignmentExpression':\r\n        this._assignment_expression()\r\n        break\r\n      case 'BinaryExpression':\r\n        this._binary_expression()\r\n        break\r\n      case 'BlockStatement':\r\n        this._block_statement()\r\n        break\r\n      case 'BreakStatement':\r\n        this._break_statement()\r\n        break\r\n      case 'CallExpression':\r\n        this._call_expression()\r\n        break\r\n      case 'EmptyStatement':\r\n        this._empty_statement()\r\n        break\r\n      case 'ExpressionStatement':\r\n        this._expression_statement()\r\n        break\r\n      case 'ForStatement':\r\n        this._for_statement()\r\n        break\r\n      case 'ForInStatement':\r\n        this._for_in_statement()\r\n        break\r\n      case 'FunctionExpression':\r\n        this._function_expression()\r\n        break\r\n      case 'Identifier':\r\n        this._identifier()\r\n        break\r\n      case 'IfStatement':\r\n        this._if_statement()\r\n        break\r\n      case 'Literal':\r\n        this._literal()\r\n        break\r\n      case 'LogicalExpression':\r\n        this._logical_expression()\r\n        break\r\n      case 'MemberExpression':\r\n        this._member_expression()\r\n        break\r\n      case 'NewExpression':\r\n        this._new_expression()\r\n        break\r\n      case 'Program':\r\n        this._program()\r\n        break\r\n      case 'ReturnStatement':\r\n        this._return_statement()\r\n        break\r\n      case 'UnaryExpression':\r\n        this._unary_expression()\r\n        break\r\n      case 'UpdateExpression':\r\n        this._update_expression()\r\n        break\r\n      case 'VariableDeclaration':\r\n        this._variable_declaration()\r\n        break\r\n      case 'VariableDeclarator':\r\n        this._variable_declarator()\r\n        break\r\n      case 'WhileStatement':\r\n        this._while_statement()\r\n        break\r\n      default:\r\n        this._runner._debugger.addError('Invalid node type to process: ' + this._node.type)\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Run a single line python AST statement.\r\n     * @param {Object} ast_tree - The AST tree to run.\r\n     * @return {Boolean|Number|Object|String} - The result value of the AST evaluation.\r\n     */\r\n  _run_statement (ast_tree) {\r\n    this._node = ast_tree.body[0]\r\n    this._node.parent = ast_tree\r\n    this._statement = ast_tree\r\n\r\n    // Adjust status of partser to running and start the process.\r\n    this._status = 1\r\n\r\n    // Process the nodes.\r\n    this._process_nodes()\r\n\r\n    // Return the result value of the expression.\r\n    let returnValue\r\n    if (ast_tree.body[0].return_values[0].type === 'identifier') {\r\n      returnValue = this._get_element_value(ast_tree.body[0].return_values[0])\r\n    } else {\r\n      returnValue = ast_tree.body[0].return_values[0].value\r\n    }\r\n\r\n    // Clear the return value container for next cycle.\r\n    ast_tree.body[0].return_values = []\r\n\r\n    // Retur value of the statement.\r\n    return returnValue\r\n  }\r\n\r\n  /**\r\n     * Run an AST python script.\r\n     * @param {Object} inline_script - The Inline Script item to which the AST tree belongs.\r\n     * @param {Object} ast_tree - The AST tree to run.\r\n     */\r\n  _run (inline_script, ast_tree) {\r\n    // Set the inline item.\r\n    this._inline_script = inline_script\r\n\r\n    // set the self parameter.\r\n    this._variables['self'] = inline_script\r\n\r\n    // Set the first node and its parent.\r\n    this._node = ast_tree\r\n    this._node.parent = null\r\n    this._statement = null\r\n\r\n    // Adjust status of partser to running and start the process.\r\n    this._status = 1\r\n    this._process_nodes()\r\n  }\r\n}\r\n","import isFunction from 'lodash/isFunction'\r\n\r\n/** Class representing a data logger. */\r\nexport default class Log {\r\n  /**\r\n   * Create a log object which stores all the response data.\r\n   * @param {Object} experiment - The experiment to which the logger belongs.\r\n   */\r\n  constructor (experiment) {\r\n    this._experiment = experiment // Anchor to the experiment object.\r\n  }\r\n\r\n  /**\r\n   * Write one signle line to the message log.\r\n   * @param {Array} varList - Array with variables to write to the log.\r\n   */\r\n  write_vars (varList) {\r\n    const entry = {}\r\n    for (const varName of varList) {\r\n      const value = this._experiment.vars.get(varName, 'NA', false)\r\n      if (isFunction(value)) continue\r\n      entry[varName] = value\r\n    }\r\n    if (isFunction(this._experiment.onLog)) {\r\n      this._experiment.onLog(entry)\r\n    }\r\n    this._experiment._runner._data.push(entry)\r\n  }\r\n}\r\n","import Item from './item.js'\r\nimport JavaScriptWorkspace from '../classes/javascript_workspace.js'\r\nimport Canvas from '../backends/canvas.js'\r\nimport Log from '../backends/log'\r\nimport {\r\n  constants\r\n} from '../system/constants.js'\r\nimport {\r\n  VERSION_NAME,\r\n  VERSION_NUMBER\r\n} from '../index.js'\r\n\r\n/**\r\n * Class representing an Experiment item.\r\n * @extends Item\r\n */\r\nexport default class Experiment extends Item {\r\n  /** The experiment class defines the starting point for an experiment. */\r\n  constructor (experiment, name, script) {\r\n    // Inherited.\r\n    super(experiment, name, script)\r\n\r\n    // Create and set private properties.\r\n    this._canvas = new Canvas(this)\r\n    this._currentCanvas = this._canvas\r\n    this._log = new Log(this)\r\n    this._scale_x = 1 // Scaling of the canvas for fullscreen mode.\r\n    this._scale_y = 1 // Scaling of the canvas for fullscreen mode.\r\n    this._javascriptWorkspace = new JavaScriptWorkspace(this)\r\n\r\n    // Create and set public properties.\r\n    this.debug = this._runner._debugger.enabled\r\n    this.items = this._runner._itemStore\r\n    this.pool = this._runner._pool\r\n\r\n    // Set default variables\r\n    this.vars.start = 'experiment'\r\n    this.vars.title = 'My Experiment'\r\n    this.vars.bidi = 'no'\r\n    this.vars.round_decimals = 2\r\n    this.vars.form_clicks = 'no'\r\n    this.vars.uniform_coordinates = 'no'\r\n    this.vars.sessionid = new Date().valueOf() + Math.floor(Math.random() * 100000)\r\n\r\n    // Sound parameters.\r\n    this.vars.sound_freq = 48000\r\n    this.vars.sound_sample_size = -16\r\n    this.vars.sound_channels = 2\r\n    this.vars.sound_buf_size = 1024\r\n\r\n    // Default backend\r\n    this.vars.canvas_backend = 'xpyriment'\r\n\r\n    // Display parameters.\r\n    this.vars.width = 1024\r\n    this.vars.height = 768\r\n    this.vars.background = 0x000000\r\n    this.vars.foreground = 0xFFFFFF\r\n\r\n    // Font parameters.\r\n    this.vars.font_size = 18\r\n    this.vars.font_family = 'mono'\r\n    this.vars.font_italic = 'no'\r\n    this.vars.font_bold = 'no'\r\n    this.vars.font_underline = 'no'\r\n  }\r\n\r\n  /** Resets the feedback variables (acc, avg_rt, etc.). */\r\n  reset_feedback () {\r\n    this.vars.total_responses = 0\r\n    this.vars.total_correct = 0\r\n    this.vars.total_response_time = 0\r\n    this.vars.avg_rt = 'undefined'\r\n    this.vars.average_response_time = 'undefined'\r\n    this.vars.accuracy = 'undefined'\r\n    this.vars.acc = 'undefined'\r\n  }\r\n\r\n  /**\r\n    * Sets the subject number and parity (even/ odd).\r\n    * @param  {Number} pNr - The subject number to be used.\r\n    */\r\n  set_subject (pNr) {\r\n    // Sets the subject number and parity (even/ odd).\r\n    this.vars.subject_nr = pNr\r\n    if ((pNr % 2) === 0) {\r\n      this.vars.subject_parity = 'even'\r\n    } else {\r\n      this.vars.subject_parity = 'odd'\r\n    }\r\n  }\r\n\r\n  /**\r\n    * Extracts a the definition of a single item from the string.\r\n    * @param {String} script - The script to read the definition form.\r\n    * @return {String} - The definition found from the script.\r\n    */\r\n  read_definition (script) {\r\n    // Extracts a the definition of a single item from the string.\r\n    var line = script.shift()\r\n    var def_str = ''\r\n    while ((line !== null) && (line.length > 0) && (line.charAt(0) === '\\t')) {\r\n      def_str = def_str + line.substring(1) + '\\n'\r\n      line = script.shift()\r\n    }\r\n    return def_str\r\n  }\r\n\r\n  /**\r\n   * Construct the experiment object from OpenSesame script.\r\n   * @param {String} script - The opensesame script contents\r\n   */\r\n  from_string (script) {\r\n    // Split the string into an array of lines.\r\n    if (script !== null) {\r\n      this._source = script.split('\\n')\r\n      var l = this._source.shift()\r\n      while (l != null) {\r\n        // Set the processing of the next line.\r\n        var get_next = true\r\n        try {\r\n          var cmd, args, kwargs;\r\n          // Split the single line into a set of tokens.\r\n          [cmd, args, kwargs] = this._runner._syntax.parse_cmd(l)\r\n        } catch (e) {\r\n          this._runner._debugger.addError('Failed to parse script. Maybe it contains illegal characters or unclosed quotes: ' + e.message)\r\n        }\r\n\r\n        if ((cmd !== null) && (args.length > 0)) {\r\n          // Try to parse the line as variable (or comment)\r\n          if (this.parse_variable(l) === false) {\r\n            if (cmd === 'define') {\r\n              if (args.length === 2) {\r\n                // Get the type, name and definition string of an item.\r\n                var item_type = args[0]\r\n                var item_name = this._runner._syntax.sanitize(args[1])\r\n                var def_str = this.read_definition(this._source)\r\n                this._runner._itemStore.newItem(item_type, item_name, def_str)\r\n              } else {\r\n                this._runner._debugger.addError('Failed to parse definition: ' + l)\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // Get the next line.\r\n        if (get_next === true) {\r\n          l = this._source.shift()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes the clock backend. */\r\n  init_clock () {\r\n    // Initializes the clock backend.\r\n    this.clock._initialize()\r\n  }\r\n\r\n  /** Initializes the canvas backend. */\r\n  init_display () {\r\n    // Initializes the canvas backend.\r\n    this._canvas.init_display(this)\r\n  }\r\n\r\n  /** Event handler for external data retrieval. */\r\n  onLog (data) {\r\n    // Function to be overwritten by external handler\r\n  }\r\n\r\n  /** Implements the run phase of an item. */\r\n  run () {\r\n    // Inherited.\r\n    super.run()\r\n\r\n    // Runs the experiment.\r\n    switch (this._status) {\r\n      case constants.STATUS_INITIALIZE:\r\n        // Adjust the status of the item.\r\n        this._status = constants.STATUS_FINALIZE\r\n\r\n        // Save the date and time, and the version of OpenSesame\r\n        this.vars.datetime = new Date().toString()\r\n        this.vars.opensesame_version = VERSION_NUMBER\r\n        this.vars.opensesame_codename = VERSION_NAME\r\n        this.init_clock()\r\n        this.init_display()\r\n        this.reset_feedback()\r\n\r\n        // Add closing message to debug system.\r\n        this._runner._debugger.addMessage('experiment.run(): experiment started at ' + new Date().toUTCString())\r\n\r\n        if (this._runner._itemStore._items[this.vars.start] !== null) {\r\n          this._runner._itemStack.clear()\r\n          this._runner._itemStore.prepare(this.vars.start, this)\r\n        } else {\r\n          this._runner._debugger.addError('Could not find the item that is the entry point of the experiment: ' + this.vars.start)\r\n        }\r\n        break\r\n      case constants.STATUS_FINALIZE:\r\n        // Add closing message to debug system.\r\n        this._runner._debugger.addMessage('experiment.run(): experiment finished at ' + new Date().toUTCString())\r\n\r\n        // Complete the run process.\r\n        this.end()\r\n        break\r\n    }\r\n  }\r\n\r\n  /** Ends an experiment. */\r\n  end () {\r\n    this._runner._finalize()\r\n  }\r\n}\r\n","import { autoDetectRenderer } from 'pixi.js'\r\nimport {\r\n  constants\r\n} from './constants.js'\r\nimport Debugger from './debugger.js'\r\nimport Convertor from './convertor.js'\r\nimport Events from './events.js'\r\nimport Parameters from './parameters.js'\r\nimport Screen from './screen.js'\r\nimport Session from './session.js'\r\nimport Transfer from './transfer.js'\r\nimport ItemStack from '../classes/item_stack.js'\r\nimport ItemStore from '../classes/item_store.js'\r\nimport PythonWorkspace from '../classes/python_workspace.js'\r\nimport FilePoolStore from '../classes/file_pool_store.js'\r\nimport Syntax from '../classes/syntax.js'\r\nimport PythonParser from '../python/python.js'\r\nimport Experiment from '../items/experiment.js'\r\n\r\n/** Class representing the Runner. */\r\nexport default class Runner {\r\n  /** Create a runner which runs an experiment. */\r\n  constructor (content) {\r\n    // Create and set private properties.\r\n    this._confirm = null // Optionale confirm dialog function.\r\n    this._container = null // HTML: The container (div) element.\r\n    this._data = [] // Experiment result data.\r\n    this._experiment = null // The experiment container.\r\n    this._fullScreen = false // Full screen toggle mode.\r\n    this._mimetype = null // Distinction between text and binanry files.\r\n    this._name = 'noname.exp' // Name of the experiment which is run.\r\n    this._onConsole = null // Event handler for processing print messages.\r\n    this._onFinished = null // Event handler for finishing the experiment.\r\n    this._onLog = null // Event handler to call when logger is encountered.\r\n    this._onError = null // Event handler to call when an error is encountered.\r\n    this._prompt = null // Optional prompt dialog function.\r\n    this._renderer = null // PIXI: The visual stimuli renderer.\r\n    this._scaleMode = 'noScale' // Scale type used for full screen mode.\r\n    this._script = null // Container for the experiment script.\r\n    this._source = null // Link to the source experiment file.\r\n    this._subject = null // If defined containing the subject number.\r\n    this._target = null // Link to the target location for the data.\r\n\r\n    // Create and set private class properties.\r\n    this._debugger = new Debugger(this) // Internal error system.\r\n    this._convertor = new Convertor(this)\r\n    this._events = new Events(this) // The event processor.\r\n    this._itemStack = new ItemStack(this) // The global item stack.\r\n    this._itemStore = new ItemStore(this) // The global item store.\r\n    this._parameters = new Parameters(this) // Parameter processor.\r\n    this._pool = new FilePoolStore(this) // The virtual file pool store.\r\n    this._pythonParser = new PythonParser(this) // Python parser\r\n    this._pythonWorkspace = new PythonWorkspace(this) // Python workspace.\r\n    this._screen = new Screen(this) // Introduction screen renderer.\r\n    this._session = new Session(this) // Session information container.\r\n    this._syntax = new Syntax(this) // The script syntax checker.\r\n    this._transfer = new Transfer(this) // File transfer system.\r\n\r\n    // Create the content container.\r\n    this._setupContent(content)\r\n  }\r\n\r\n  /**\r\n   * Setup the content container which shows all the visual output.\r\n   * @param {String|Object} content - The content (div element) in which the experiment is projected.\r\n   */\r\n  _setupContent (content) {\r\n    // Check if the experiment container is defined.\r\n    if (typeof content !== 'undefined') {\r\n      // Get the div element from the DOM element tree\r\n      this._container = (typeof content === 'string') ? document.getElementById(content) : content\r\n\r\n      // Create and set the experiment canvas.\r\n      this._renderer = autoDetectRenderer(800, 600, {\r\n        antialias: true,\r\n        transparent: false,\r\n        resolution: 1\r\n      })\r\n      this._renderer.backgroundColor = 0x000000\r\n\r\n      // Append the canvas to the container.\r\n      this._container.appendChild(this._renderer.view)\r\n    } else {\r\n      // Show error message.\r\n      this._debugger.addError('No content parameter specified.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup the context from which the experiment is created.\r\n   * @param {Object} context - An JSON object containing information about the experiment.\r\n   */\r\n  async _setupContext (context) {\r\n    // Check if the script parameter is defined.\r\n    if (typeof context !== 'undefined') {\r\n      // Initialize the context parameters.\r\n      // Use ES6 destructuring to determine values and set default ones if\r\n      // required.\r\n      ({\r\n        confirm: this._confirm = null,\r\n        debug: this._debugger.enabled = false,\r\n        fullScreen: this._fullScreen = false,\r\n        introClick: this._screen._click = true,\r\n        introScreen: this._screen._active = true,\r\n        mimetype: this._mimetype = null,\r\n        name: this._name = 'noname.exp',\r\n        onConsole: this._onConsole = null,\r\n        onFinished: this._onFinished = null,\r\n        onLog: this._onLog = null,\r\n        onError: this._onError = null,\r\n        prompt: this._prompt = null,\r\n        scaleMode: this._scaleMode = 'noScale',\r\n        source: this._source = null,\r\n        subject: this._subject = null,\r\n        target: this._target = null\r\n      } = context)\r\n\r\n      // Set up the introscreen.\r\n      this._screen._setupIntroScreen()\r\n\r\n      this._screen._updateIntroScreen('Loading experiment.')\r\n      this._screen._updateProgressBar(-1)\r\n\r\n      // Load the script file, using the source parameter.\r\n      try {\r\n        this._script = await this._transfer._readSource(this._source)\r\n      } catch (e) {\r\n        this._debugger.addError(`Error reading osexp: ${e}`)\r\n        this._exit()\r\n        return\r\n      }\r\n\r\n      // Update the introscreen\r\n      this._screen._updateIntroScreen('Building experiment structure.')\r\n\r\n      // Continue the experiment build.\r\n      this._build()\r\n\r\n      // Initialize the parameters class and request user input.\r\n      this._parameters._initialize()\r\n    } else {\r\n      // Show error message.\r\n      this.debugger.addError('No context parameter specified.')\r\n    }\r\n  }\r\n\r\n  /** Build the experiment system. */\r\n  _build () {\r\n    // Create the experiment item.\r\n    this._experiment = new Experiment(this, this._name, this._script)\r\n    this._convertor.parseScript(this._script)\r\n    this._experiment.from_string(this._script)\r\n\r\n    // Set the onlog event handler (if defined).\r\n    if (this._onLog) {\r\n      this._experiment.onLog = this._onLog\r\n    }\r\n  }\r\n\r\n  /** initialize the runner. */\r\n  _initialize () {\r\n    // Initialize the helper classes.\r\n    this._debugger._initialize()\r\n    this._events._initialize()\r\n    this._pythonParser._initialize()\r\n    this._session._initialize()\r\n\r\n    // Prepare and run the experiment item.\r\n    this._experiment.prepare()\r\n    this._experiment.run()\r\n  }\r\n\r\n  /** finalize the runner. */\r\n  _finalize () {\r\n    // Finalize the event system.\r\n    this._events._finalize()\r\n\r\n    // Finalize the debugger.\r\n    this._debugger._finalize()\r\n\r\n    // Clear the item store and file pool.\r\n    this._itemStore._clean_up()\r\n    this._pool._clean_up()\r\n\r\n    // Exit the runner.\r\n    this._exit()\r\n  }\r\n\r\n  /** Exit the experiment environment and execute the optional callback. */\r\n  _exit () {\r\n    // Leave the full screen mode\r\n    this._screen._fullScreenExit()\r\n\r\n    // Reset te size of the container and the canvas.\r\n    this._experiment._canvas._exitDisplay()\r\n\r\n    // Clear the experiment item.\r\n    this._experiment = null\r\n\r\n    // Check if a callback function is defined.\r\n    if (this._onFinished) {\r\n      // Execute callback function.\r\n      this._onFinished(this._data, this._session._session)\r\n    }\r\n  }\r\n\r\n  /** Exit a running experiment. */\r\n  exit () {\r\n    // Set state of the event system to break.\r\n    this._events._state = constants.TIMER_BREAK\r\n  }\r\n\r\n  /** Run an experiment */\r\n  run (context) {\r\n    // Build the experiment.\r\n    this._setupContext(context)\r\n  }\r\n}\r\n","/* eslint-disable no-extend-native */\n/*\n * OsWeb\n *\n * An experiment research tool written in Javascript (ES2016) and HTML to be\n * used in Qualtrics or other web-based tools. Based upon OpenSesame.\n *\n * Author: drs. J. Bos, D. Schreij & S. Mathot\n *\n * Copyright (c) University of Groningen\n * Faculty of Behavioural and Social Sciences\n * Technical Support Service\n *\n */\n\nimport Runner from './system/runner.js'\n\nexport const VERSION_NAME = OSWEB_VERSION_NAME\nexport const VERSION_NUMBER = OSWEB_VERSION_NO\n\n// Add replaceAll function to string prototype\n// eslint-disable-next-line no-extend-native\nString.prototype.replaceAll = function (str1, str2, ignore) {\n  return this.replace(\n    new RegExp(\n      str1.replace(/([\\/\\,\\!\\\\\\^\\$\\{\\}\\[\\]\\(\\)\\.\\*\\+\\?\\|\\<\\>\\-\\&])/g, '\\\\$&'),\n      (ignore ? 'gi' : 'g')),\n    (typeof (str2) === 'string') ? str2.replace(/\\$/g, '$$$$') : str2)\n}\n\n// Add _pySlide function to string prototype (HACK for the filbert interpreter).\nString.prototype._pySlice = function (start, end, step) {\n  if (end !== null) {\n    return this.slice(start, end)\n  } else {\n    return this.slice(start)\n  }\n}\n\n// Create the osweb library container.\nconst osweb = {\n  printVersionInfo: function () {\n    // Show library name and library version number in the console.\n    console.log(`${VERSION_NAME} v${VERSION_NUMBER}`)\n  },\n  getRunner: function (target) {\n    return new Runner(target)\n  }\n}\n\nexport default osweb\n","/* This is the entry script for the webpack builder\nThis script ties all needed modules or files together and provides the\ncorrect setting for the webpack-devserver\n*/\nimport './scss/osweb.scss'\nimport osweb from './js/osweb/index.js'\n\nif (typeof window !== 'undefined') {\n  window.alertify = require('alertifyjs')\n  require('alertifyjs/build/css/alertify.css')\n  require('alertifyjs/build/css/themes/default.css')\n  window.osweb = osweb\n  window.osweb.printVersionInfo()\n}\n\nif (module.hot) {\n  module.hot.accept()\n}\n","import { Container, Graphics, Sprite, Text, Texture } from 'pixi.js'\nimport Styles from './styles.js'\n\n/** Class representing a drawing canvas. */\nexport default class Canvas {\n  /**\n   * Create a canvas object which is used to show all visual stimuli.\n   * @param {Object} experiment - The experiment to which the canvas belongs.\n   * @param {Boolean} auto_prepare - If true the canvas is prepared after drawing.\n   * @param {Object} style_args - Optional styling argument for the canvas.\n   */\n  constructor (experiment, auto_prepare) {\n    // Create and set public properties.\n    this.auto_prepare = (typeof auto_prepare === 'undefined') ? true : auto_prepare // Set autoprepare toggle (not supported yet).\n    this.experiment = experiment // Anchor to the experiment object.\n\n    // Create and set private properties.\n    this._container = new Container() // Create the container which represents the canvas.\n    this._font_string = 'bold 18px Courier New' // Default font definition string.\n    this._height = this.experiment._runner._renderer.height // Height of the HTML canvas used for drawing.\n    this._styles = new Styles() // The style container.\n    this._width = this.experiment._runner._renderer.width // Width of the HTML canvas used for drawing.\n  }\n\n  /**\n   * Calculate the coordinates for the arraw shape.\n   * @param {Number} sx - The starting x coordinate of the element.\n   * @param {Number} sy - The starting y coordinate of the element.\n   * @param {Number} ex - The ending x coordinate of the element.\n   * @param {Number} ey - The ending y coordinate of the element.\n   * @param {Number} bodyWidth - The width of the element body.\n   * @param {Number} bodyLength - The height of the element body.\n   * @param {Number} headWidth - The width of the element head.\n   * @return {Array} - The coordinates defining the arrow element.\n   */\n  _arrow_shape (sx, sy, ex, ey, bodyWidth, bodyLength, headWidth) {\n    // Length\n    var d = Math.sqrt(Math.pow(ey - sy, 2) + Math.pow(sx - ex, 2))\n    var angle = Math.atan2(ey - sy, ex - sx)\n    var _headWidth = (1 - bodyWidth) / 2.0\n    bodyWidth = bodyWidth / 2.0\n\n    // calculate coordinates\n    var p4 = [ex, ey]\n    var p1 = [sx + bodyWidth * headWidth * Math.cos(angle - Math.PI / 2), sy + bodyWidth * headWidth * Math.sin(angle - Math.PI / 2)]\n    var p2 = [p1[0] + bodyLength * Math.cos(angle) * d, p1[1] + bodyLength * Math.sin(angle) * d]\n    var p3 = [p2[0] + _headWidth * headWidth * Math.cos(angle - Math.PI / 2), p2[1] + _headWidth * headWidth * Math.sin(angle - Math.PI / 2)]\n    var p7 = [sx + bodyWidth * headWidth * Math.cos(angle + Math.PI / 2), sy + bodyWidth * headWidth * Math.sin(angle + Math.PI / 2)]\n    var p6 = [p7[0] + bodyLength * Math.cos(angle) * d, p7[1] + bodyLength * Math.sin(angle) * d]\n    var p5 = [p6[0] + _headWidth * headWidth * Math.cos(angle + Math.PI / 2), p6[1] + _headWidth * headWidth * Math.sin(angle + Math.PI / 2)]\n\n    return [p1, p2, p3, p4, p5, p6, p7]\n  }\n\n  /**\n   * Checks if the supplied string contains HTML markup.\n   * @param {String} str - The string to check.\n   * @return {Boolean} - True if HTML markup was found, false if not.\n   */\n  _containsHTML (str) {\n    let doc\n    try {\n      doc = new DOMParser().parseFromString(str, 'text/html')\n      return Array.from(doc.childNodes).some(node => node.nodeType === 1)\n    } catch (e) {\n      console.error('Could not parse DOM: ' + e.message)\n    }\n  }\n\n  /** Exit the display and return to default settings. */\n  _exitDisplay () {\n    // Clear container.\n    this.clear()\n\n    // Set the cursor visibility to default (visible).\n    this.experiment._runner._renderer.view.style.cursor = 'default'\n\n    //  Set the renderer dimensions.\n    this.experiment._runner._renderer.resize(800, 600)\n\n    // Clear the renderer.\n    this.experiment._runner._renderer.backgroundColor = 0x000000\n    this.experiment._runner._renderer.clear()\n    this.experiment._runner._renderer.render(this._container)\n\n    try {\n      document.body.style.backgroundColor = '#FFFFFF'\n    } catch (e) {\n      console.log('Could not reset body color to white', e)\n    }\n  }\n\n  /**\n   * Checks if addiotional style is defined otherwise use default.\n   * @param {Object} styleArgs - The additional style.\n   * @return {Object} - returns a style object.\n   */\n  _getStyle (styleArgs) {\n    // Check if the supplied style does exist.\n    if (typeof (styleArgs) === 'undefined') {\n      return this._styles\n    } else {\n      const styles = new Styles()\n      // Shorter notation: (but keeping old code in comments if this does not work as expected)\n      Object.assign(styles, styleArgs)\n      // styles._background_color = (typeof (styleArgs._background_color) !== 'undefined') ? styleArgs._background_color : 0x000000\n      // styles._bidi = (typeof (styleArgs._bidi) !== 'undefined') ? styleArgs._bidi : false\n      // styles._color = (typeof (styleArgs._color) !== 'undefined') ? styleArgs._color : 0xffffff\n      // styles._fill = (typeof (styleArgs._fill) !== 'undefined') ? styleArgs._fill : false\n      // styles._font_bold = (typeof (styleArgs._font_bold) !== 'undefined') ? styleArgs._font_bold : true\n      // styles._font_family = (typeof (styleArgs._font_family) !== 'undefined') ? styleArgs._font_family : 'Arial'\n      // styles._font_italic = (typeof (styleArgs._font_italic) !== 'undefined') ? styleArgs._font_italic : false\n      // styles._font_size = (typeof (styleArgs._font_size) !== 'undefined') ? styleArgs._font_size : 24\n      // styles._font_underline = (typeof (styleArgs._font_underline) !== 'undefined') ? styleArgs._font_underline : false\n      // styles._penwidth = (typeof (styleArgs._penwidth) !== 'undefined') ? styleArgs._penwidth : 1\n      return styles\n    }\n  }\n\n  /**\n   * Calculates the height, ascent en descent in pixels for the given font.\n   * @param {String} textLine The line of text.\n   * @param {String} fontFamily The font family to use.\n   * @param {Number} fontSize The size of the font.\n   * @return {Object} object containing the height, ascent en descent of the text.\n   */\n  _getTextBaseline (textLine, fontFamily, fontSize, fontBold) {\n    // Create the text element.\n    const text = document.createElement('span')\n    text.style.fontFamily = fontFamily || 'Arial'\n    text.style.fontWeight = (fontBold === true) ? 'bold' : 'normal'\n    text.style.fontSize = String(fontSize) + 'px'\n    text.innerHTML = textLine\n    // Create the calculation div.\n    const block = document.createElement('div')\n    block.style.display = 'inline-block'\n    block.style.lineHeight = 'normal'\n    // block.style.width = '1px'\n    // block.style.height = '0px'\n    // Create the container div.\n    const div = document.createElement('div')\n    div.append(text, block)\n    document.body.appendChild(div)\n\n    // Set the variables.\n    const result = {}\n    let rect\n    let top1\n    let top2\n\n    // Calculate the ascent\n    block.style.verticalAlign = 'baseline'\n    rect = block.getBoundingClientRect()\n    top1 = rect.top + document.body.scrollTop\n    rect = text.getBoundingClientRect()\n    top2 = rect.top + document.body.scrollTop\n    result.ascent = Math.round(top1 - top2)\n\n    // Calculate the descent and the heigt.\n    block.style.verticalAlign = 'bottom'\n    rect = block.getBoundingClientRect()\n    top1 = rect.top + document.body.scrollTop\n    rect = text.getBoundingClientRect()\n    top2 = rect.top + document.body.scrollTop\n    result.height = Math.round(top1 - top2)\n    result.descent = result.height - result.ascent\n\n    document.body.removeChild(div)\n\n    // Return the result.\n    return result\n  }\n\n  /**\n   * Returns the correct envelop setting to use.\n   * @param {String} env - Envelop parameter.\n   * @return {String} - The envelop type to use.\n   */\n  _match_env (env) {\n    if (['c', 'circular', 'round'].includes(env)) {\n      return 'c'\n    } else if (['g', 'gaussian', 'gauss', 'normal', 'rect', 'square'].includes(env)) {\n      return 'g'\n    } else if (['rectangular', 'rectangle'].includes(env)) {\n      return 'r'\n    } else if (['l', 'linear', 'lin', 'ln'].includes(env)) {\n      return 'l'\n    } else {\n      return 'g'\n    }\n  }\n\n  /**\n   * Parse recursively a HTML based text area and returns a set of text elements.\n   * @param {Object} htmlNode - The html node to process.\n   * @param {Object} textBlock - Object containing the translated text block.\n   * @param {Object} currentStyle - Object containing the current style to use.\n   */\n  _parseHtmlNode (htmlNode, textBlock, currentStyle) {\n    // Create a style for the current leven\n    var elementStyle = this._getStyle(currentStyle)\n\n    // Process the node content itself.\n    switch (htmlNode.nodeType) {\n      case 1:\n        // Select the proper html tag\n        switch (htmlNode.nodeName) {\n          case 'B':\n            // Process bold tag.\n            elementStyle.font_bold = true\n            break\n          case 'BR':\n            // Process break tag, get the total width of the line.\n            textBlock.row.height = (textBlock.row.height > 0) ? textBlock.row.height : textBlock.prev_height\n            textBlock.row.width = (textBlock.x_pos > textBlock.row.width) ? textBlock.x_pos : textBlock.row.width\n            textBlock.width = (textBlock.width > textBlock.row.width) ? textBlock.width : textBlock.row.width\n            textBlock.y_pos = textBlock.y_pos + textBlock.row.height\n            textBlock.x_pos = 4\n            textBlock.height = textBlock.height + textBlock.row.height\n            // new row with elements.\n            textBlock.rows.push(textBlock.row)\n            textBlock.row = {\n              ascent: 0,\n              width: 0,\n              height: 0,\n              text_elements: [],\n              text_dimensions: [],\n              text_underline: []\n            }\n            break\n          case 'I':\n            // Process italic tag.\n            elementStyle.font_italic = true\n            break\n          case 'SPAN':\n            // Get the style tokens.\n            if (htmlNode.attributes.length > 0) {\n              var tokens = htmlNode.attributes[0].value.split(';')\n              // parse through the style tokens.\n              for (var j = 0; j < tokens.length; j++) {\n                var property = tokens[j].slice(0, tokens[j].indexOf(':'))\n                var value = tokens[j].slice(tokens[j].indexOf(':') + 1, tokens[j].length)\n                // Set the supported properties.\n                switch (property) {\n                  case 'color':\n                    elementStyle.color = value\n                    break\n                  case 'font-size':\n                    elementStyle.font_size = value\n                    break\n                  case 'font-family':\n                    elementStyle.font_family = value\n                    break\n                }\n              }\n            }\n            break\n          case 'U':\n            // Process underline tag.\n            elementStyle.font_underline = true\n            break\n        }\n        break\n      case 3:\n        // Create the text style element.\n        var textStyle = {\n          fontFamily: elementStyle.font_family,\n          fontStyle: (elementStyle.font_italic === true) ? 'italic' : 'normal',\n          fontWeight: (elementStyle.font_bold === true) ? 'bold' : 'normal',\n          fontSize: elementStyle.font_size,\n          fill: elementStyle.color\n        }\n\n        // Create the text element and get the dimension.\n        var bounds = {}\n        var textElement = new Text(htmlNode.textContent, textStyle)\n        textElement.getBounds(false, bounds)\n\n        // Get the height and descent (for vertical positioning);\n        var dimension = this._getTextBaseline(htmlNode.textContent, elementStyle.font_family, elementStyle.font_size, elementStyle.font_bold)\n\n        // Position the text element and update the width.\n        textElement.x = textBlock.x_pos\n        textElement.y = textBlock.y_pos\n        textBlock.x_pos = textBlock.x_pos + bounds.width\n        textBlock.row.width = (textBlock.x_pos > textBlock.row.width) ? textBlock.x_pos : textBlock.row.width\n        textBlock.width = (textBlock.width > textBlock.row.width) ? textBlock.width : textBlock.row.width\n        textBlock.row.height = ((bounds.height + 1) > textBlock.row.height) ? bounds.height + 1 : textBlock.row.height\n        textBlock.row.ascent = (dimension.ascent > textBlock.row.ascent) ? dimension.ascent : textBlock.row.ascent\n        textBlock.prev_height = textBlock.row.height\n        textBlock.row.text_elements.push(textElement)\n        textBlock.row.text_dimensions.push(dimension)\n        textBlock.row.text_underline.push(elementStyle.font_underline)\n        break\n    }\n\n    // Process the child nodes recursive (if any).\n    for (var i = 0; i < htmlNode.childNodes.length; i++) {\n      this._parseHtmlNode(htmlNode.childNodes[i], textBlock, elementStyle, (i === (htmlNode.childNodes.length - 1)))\n    }\n  }\n\n  /**\n   * Resizes the container div (osweb_div), which contains all elements on display\n   * @param {Number} width - Width to set.\n   * @param {Number} height -Hheight to set.\n   */\n  _resizeContainer (width, height) {\n    // Set the parent container dimensions.\n    this.experiment._runner._container.style.width = width + 'px'\n    this.experiment._runner._container.style.height = height + 'px'\n  }\n\n  /**\n   * Draws an arrow element on the canvas.\n   * @param {Number} sx - The starting x coordinate of the element.\n   * @param {Number} sy - The starting y coordinate of the element.\n   * @param {Number} ex - The ending x coordinate of the element.\n   * @param {Number} ey - The ending y coordinate of the element.\n   * @param {Number} bodyWidth - The width of the element body.\n   * @param {Number} bodyLength - The height of the element body.\n   * @param {Number} headWidth - The width of the element head.\n   * @param {Object} styleArgs - Optional styling arguments for the element.\n   */\n  arrow (sx, sy, ex, ey, bodyWidth, bodyLength, headWidth, styleArgs) {\n    // Calculate coordinate points for the arrow.\n    var points = this._arrow_shape(sx, sy, ex, ey, bodyWidth, bodyLength, headWidth)\n\n    // Draw the arrow as a polygon.\n    this.polygon(points, styleArgs)\n  }\n\n  /**\n   * Draws an arrow element on the canvas.\n   * @param {Number} sx - The x coordinate of the element.\n   * @param {Number} sy - The y coordinate of the element.\n   * @param {Number} ex - The radius the element.\n   * @param {Object} styleArgs - Optional styling argument for the element.\n   */\n  circle (x, y, r, styleArgs) {\n    // Get the style\n    var elementStyle = this._getStyle(styleArgs)\n\n    // Create a circle element.\n    var circle = new Graphics()\n    circle.lineStyle(elementStyle.penwidth, elementStyle.color, 1)\n    if (elementStyle.fill === true) {\n      circle.beginFill(elementStyle.background_color)\n      circle.drawCircle(0, 0, r)\n      circle.endFill()\n    } else {\n      circle.drawCircle(0, 0, r)\n    }\n    circle.x = x\n    circle.y = y\n\n    // Add the circle element to container.\n    this._container.addChild(circle)\n  }\n\n  /**\n   * Clear the current canvas.\n   * @param {Number} background_color - The color to draw (optional).\n   * @param {Object} style_args - JSON object containing style arguments (optional).\n   */\n  clear (backgroundColor, styleArgs) {\n    // Clear the stage by temoving al the child elements.\n    for (var i = this._container.children.length - 1; i >= 0; i--) {\n      this._container.removeChild(this._container.children[i])\n    }\n  }\n\n  /**\n   * Copies the contents of the passed canvas onto current one.\n   * @param  {osweb.canvas} canvas The source canvas to copy\n   * @return {void}\n   */\n  copy (canvas) {\n    this.clear()\n\n    // Loop over the shapes on the passed canvas and copy them onto the current one\n    for (const shape of canvas._container.children) {\n      this._container.addChild(shape.clone())\n    }\n  }\n\n  /**\n   * Draws an ellipse element on the canvas.\n   * @param {Number} x - The x coordinate of the element.\n   * @param {Number} y - The y coordinate of the element.\n   * @param {Number} w - The width the element.\n   * @param {Number} h - The height the element.\n   * @param {Object} styleArgs - Optional styling argument for the element.\n   */\n  ellipse (x, y, w, h, styleArgs) {\n    // Get the style\n    var elementStyle = this._getStyle(styleArgs)\n\n    // Create an ellipse element.\n    var ellipse = new Graphics()\n    ellipse.lineStyle(elementStyle.penwidth, elementStyle.color, 1)\n    if (elementStyle.fill === true) {\n      ellipse.beginFill(elementStyle.background_color)\n      ellipse.drawEllipse(0, 0, (w / 2), (h / 2))\n      ellipse.endFill()\n    } else {\n      ellipse.drawEllipse(0, 0, (w / 2), (h / 2))\n    }\n    ellipse.x = x + (w / 2)\n    ellipse.y = y + (h / 2)\n\n    // Add the ellipse element to container.\n    this._container.addChild(ellipse)\n  }\n\n  /**\n   * Draws a fixdot element on the canvas.\n   * @param {int} x - The x coordinate of the element.\n   * @param {int} y - The y coordinate of the element.\n   * @param {String} - The style of the fixation dot.\n   * @param {Object} styleArgs - Optional styling argument for the element.\n   */\n  fixdot (x, y, style, styleArgs) {\n    // Check the color and style arguments.\n    style = (typeof style === 'undefined') ? 'default' : style\n\n    // Get the style\n    var elementStyle = this._getStyle(styleArgs)\n\n    if (typeof x === 'undefined') {\n      if (this.uniform_coordinates === true) {\n        x = 0\n      } else {\n        x = this._width / 2\n      }\n    }\n    if (typeof y === 'undefined') {\n      if (this.uniform_coordinates === true) {\n        y = 0\n      } else {\n        y = this._height / 2\n      }\n    }\n\n    var s = 4\n    var h = 2\n    if (style.indexOf('large') !== -1) {\n      s = 16\n    } else if ((style.indexOf('medium') !== -1) || (style === 'default')) {\n      s = 8\n    } else if (style.indexOf('small') !== -1) {\n      s = 4\n    } else {\n      this.experiment._runner._debugger.addError('Unknown style: ' + style)\n    }\n\n    var styles = new Styles()\n    if ((style.indexOf('open') !== -1) || (style === 'default')) {\n      styles._fill = true\n      styles._background_color = elementStyle.color\n      styles._color = elementStyle.color\n      this.ellipse(x - s, y - s, 2 * s, 2 * s, styles)\n      styles._background_color = elementStyle.background_color\n      styles._color = elementStyle.background_color\n      this.ellipse(x - h, y - h, 2 * h, 2 * h, styles)\n    } else if (style.indexOf('filled') !== -1) {\n      styles._fill = true\n      styles._background_color = elementStyle.color\n      styles._color = elementStyle.color\n      this.ellipse(x - s, y - s, 2 * s, 2 * s, styles)\n    } else if (style.indexOf('cross') !== -1) {\n      styles._penwidth = 1\n      styles._color = elementStyle.color\n      this.line(x, y - s, x, y + s, styles)\n      this.line(x - s, y, x + s, y, styles)\n    } else {\n      this.experiment._runner._debugger.addError('Unknown style: ' + style)\n    }\n  }\n\n  /**\n   * Draws a gabor element on the canvas.\n   *\n   * @param {Number} x The x coordinate of the element\n   * @param {Number} y The y coordinate of the element\n   * @param {float} orient The rotation of the element (range between 0 and 1)\n   * @param {float} freq The frequency of the bands\n   * @param {String} env The type of envelope used for the element\n   * @param {*} size The size of the gabor\n   * @param {*} stdev The standard deviation of the guass fade\n   * @param {*} phase The phase of the element (start offset)\n   * @param {*} color1 The first color for the element\n   * @param {*} color2 The second color for the element\n   * @param {*} bgmode The background mode of the element\n   * @memberof Canvas\n   */\n  gabor (x, y, orient, freq, env, size, stdev, phase, color1, color2, bgmode) {\n    // Returns a surface containing a Gabor patch.\n    env = this._match_env(env)\n\n    // Create a temporary canvas to make an image data array.\n    const canvas = document.createElement('canvas')\n    canvas.width = size\n    canvas.height = size\n    const ctx = canvas.getContext('2d')\n    const px = ctx.getImageData(0, 0, size, size)\n\n    // Conver the orientation to radians.\n    orient = Math.PI * orient / -180\n    color1 = this._styles._convertColorValueToRGB(color1)\n    color2 = this._styles._convertColorValueToRGB(color2)\n\n    // rx and ry reflect the real coordinates in the target image\n    for (let rx = 0; rx < size; rx++) {\n      for (let ry = 0; ry < size; ry++) {\n        // Distance from the center\n        const dx = rx - 0.5 * size\n        const dy = ry - 0.5 * size\n\n        // Get the coordinates (x, y) in the unrotated Gabor patch.\n        const t = Math.atan2(dy, dx) + orient\n        const r = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2))\n        const ux = r * Math.cos(t)\n        const uy = r * Math.sin(t)\n        let f\n\n        // Get the amplitude without the envelope (0 .. 1).\n        let amp = 0.5 + 0.5 * Math.cos(2.0 * Math.PI * (ux * freq + phase))\n\n        // The envelope adjustment\n        if (env === 'g') {\n          // $f = exp(-0.5 * pow($x / $std, 2) - 0.5 * pow($y / $std, 2));\n          f = Math.exp(-0.5 * Math.pow(ux / stdev, 2) - 0.5 * Math.pow(uy / stdev, 2))\n        } else if (env === 'l') {\n          f = Math.max(0, (0.5 * size - r) / (0.5 * size))\n        } else if (env === 'c') {\n          if (r > 0.5 * size) {\n            f = 0.0\n          } else {\n            f = 1.0\n          }\n        } else {\n          f = 1.0\n        }\n\n        // Apply the envelope\n        if (bgmode === 'avg') {\n          amp = amp * f + 0.5 * (1.0 - f)\n        } else {\n          amp = amp * f\n        }\n\n        // Recalculate the color values.\n        const color = {\n          r: color1.r * amp + color2.r * (1.0 - amp),\n          g: color1.g * amp + color2.g * (1.0 - amp),\n          b: color1.b * amp + color2.b * (1.0 - amp)\n        }\n\n        // Set the color values at pixel level.\n        var position = rx * 4 + (ry * size * 4)\n        px.data[position] = color.r\n        px.data[position + 1] = color.g\n        px.data[position + 2] = color.b\n        px.data[position + 3] = 255\n      }\n    }\n\n    // Put the calculated data back on the canvas and create an image of it.\n    ctx.putImageData(px, 0, 0)\n\n    // Retrieve the image from the recourses\n    var sprite = new Sprite(Texture.from(canvas))\n\n    // Position the image.\n    sprite.x = x - (size / 2)\n    sprite.y = y - (size / 2)\n\n    // Add the image to the stage.\n    this._container.addChild(sprite)\n  }\n\n  /**\n   * Returns the canvas height\n   * @return {Number} - The height of the canvas in pixels.\n   */\n  get height () {\n    return this._height\n  }\n\n  /**\n   * Returns the canvas width\n   * @return {Number} - The width of the canvas in pixels.\n   */\n  get width () {\n    return this._width\n  }\n\n  /**\n   * Draws an image element on the canvas.\n   * @param {String} fname - The name of the element to draw.\n   * @param {Boolean|Number|String} center - If true the image is centered.\n   * @param {Number} x - The x coordinate of the element.\n   * @param {Number} y - The y coordinate of the element.\n   * @param {Number} scale - The scaling factor of the element.\n   */\n  image (fname, center, x, y, scale) {\n    // Get image from file pool.\n    let name = this.experiment._runner._syntax.remove_quotes(fname)\n    let path = this.experiment._runner._pool[name]\n    if (typeof (path) === 'undefined') {\n      this.experiment._runner._debugger.addError(`\"${fname}\" does not exist`)\n    }\n    let img = path.data\n    // Create a temporary canvas to make an image data array.\n    let canvas = document.createElement('canvas')\n    canvas.width = img.width\n    canvas.height = img.height\n    let ctx = canvas.getContext('2d')\n    ctx.drawImage(img, 0, 0)\n\n    let sprite = new Sprite(Texture.from(canvas))\n\n    // Scale the image.\n    sprite.scale.x = scale\n    sprite.scale.y = scale\n\n    // Position the image\n    if ([1, '1', true, 'yes'].indexOf(center) !== -1) {\n      sprite.x = x - (sprite.width / 2)\n      sprite.y = y - (sprite.height / 2)\n    } else {\n      sprite.x = x\n      sprite.y = y\n    }\n\n    // Add the image to the stage.\n    this._container.addChild(sprite)\n  }\n\n  /**\n   * Initializes the  display container on which the canvas is displayed.\n   * @param {Object} experiment - The experiment to which the canvas belongs.\n   */\n  init_display (experiment) {\n    // Set the dimension properties.\n    this._height = experiment.vars.height\n    this._width = experiment.vars.width\n\n    // Set the renderer dimensions.\n    experiment._runner._renderer.resize(this._width, this._height)\n\n    // Set the renderer background color.\n    experiment._runner._renderer.clear(this._styles._convertColorValue(experiment.vars.background, 'number'))\n    experiment._runner._renderer.backgroundColor = this._styles._convertColorValue(experiment.vars.background, 'number')\n\n    // PIXU: Set the cursor visibility to none (default).\n    experiment._runner._renderer.view.style.cursor = 'none'\n\n    // Start the fullscreen mode (if enabled).\n    experiment._runner._screen._fullScreenInit()\n\n    // Set focus to the experiment canvas.\n    experiment._runner._renderer.view.focus()\n  }\n\n  /**\n   * Draws a line element on the canvas.\n   * @param {Number} sx - The starting x coordinate of the element.\n   * @param {Number} sy - The starting y coordinate of the element.\n   * @param {Number} ex - The ending x coordinate of the element.\n   * @param {Number} ey - The ending y coordinate of the element.\n   * @param {Object} styleArgs - Optional styling argument for the element.\n   */\n  line (sx, sy, ex, ey, styleArgs) {\n    // Get the style\n    var elementStyle = this._getStyle(styleArgs)\n\n    // Create a line element.\n    var line = new Graphics()\n    line.lineStyle(elementStyle.penwidth, elementStyle.color, 1)\n    line.moveTo(0, 0)\n    line.lineTo(ex - sx, ey - sy)\n    line.x = sx\n    line.y = sy\n\n    // Add the line element to container.\n    this._container.addChild(line)\n  }\n\n  /**\n   * Draws a gabor element on the canvas.\n   * @param {Number} x - The x coordinate of the element.\n   * @param {Number} y - The y coordinate of the element.\n   * @param {String} env - The type of envelop used  for the element.\n   * @param {Object} size - Optional styling argument for the element.\n   * @param {Number} stdev - The standard deviation  for the element.\n   * @param {Number|String} color1 - The first color for the element.\n   * @param {Number|String} color2 - Teh second color for the element.\n   * @param {String} bgmode - The type of background mode for the element.\n   */\n  noise (x, y, env, size, stdev, color1, color2, bgmode) {\n    // Returns a surface containing a noise patch.\n    env = this._match_env(env)\n\n    // Create a temporary canvas to make an image data array.\n    var canvas = document.createElement('canvas')\n    canvas.width = size\n    canvas.height = size\n    var ctx = canvas.getContext('2d')\n    var px = ctx.getImageData(0, 0, size, size)\n\n    // Create a surface\n    color1 = this._styles._convertColorValueToRGB(color1)\n    color2 = this._styles._convertColorValueToRGB(color2)\n\n    // rx and ry reflect the real coordinates in the target image\n    for (let rx = 0; rx < size; rx++) {\n      for (let ry = 0; ry < size; ry++) {\n        // Distance from the center\n        const ux = rx - 0.5 * size\n        const uy = ry - 0.5 * size\n        const r = Math.sqrt(Math.pow(ux, 2) + Math.pow(uy, 2))\n        let f\n        // Get the amplitude without the envelope (0 .. 1)\n        var amp = Math.random()\n        // The envelope adjustment\n        if (env === 'g') {\n          f = Math.exp(-0.5 * Math.pow(ux / stdev, 2) - 0.5 * Math.pow(uy / stdev, 2))\n        } else if (env === 'l') {\n          f = Math.max(0, (0.5 * size - r) / (0.5 * size))\n        } else if (env === 'c') {\n          if (r > 0.5 * size) {\n            f = 0.0\n          } else {\n            f = 1.0\n          }\n        } else {\n          f = 1.0\n        }\n\n        // Apply the envelope\n        if (bgmode === 'avg') {\n          amp = amp * f + 0.5 * (1.0 - f)\n        } else {\n          amp = amp * f\n        }\n\n        // Recalculate the collor values.\n        const color = {\n          r: color1.r * amp + color2.r * (1.0 - amp),\n          g: color1.g * amp + color2.g * (1.0 - amp),\n          b: color1.b * amp + color2.b * (1.0 - amp)\n        }\n\n        // Set the color values at pixel level.\n        var position = rx * 4 + (ry * size * 4)\n        px.data[position] = color.r\n        px.data[position + 1] = color.g\n        px.data[position + 2] = color.b\n        px.data[position + 3] = 255\n      }\n    }\n\n    // Put the calculated data back on the canvas and create an image of it.\n    ctx.putImageData(px, 0, 0)\n\n    // Retrieve the image from the recourses\n    var sprite = new Sprite(Texture.from(canvas))\n\n    // Position the image.\n    sprite.x = x - (size / 2)\n    sprite.y = y - (size / 2)\n\n    // Add the image to the stage.\n    this._container.addChild(sprite)\n  }\n\n  /**\n   * Draws a polygon element on the canvas.\n   * @param {Array} verticles - The coordinates of the element.\n   * @param {Object} styleArgs - Optional styling argument for the element.\n   */\n  polygon (verticles, styleArgs) {\n    // Get the style\n    var elementStyle = this._getStyle(styleArgs)\n\n    // Adjust the points.\n    var path = []\n    for (var i = 0; i < verticles.length; i++) {\n      path.push(verticles[i][0])\n      path.push(verticles[i][1])\n    }\n    path.push(verticles[0][0])\n    path.push(verticles[0][1])\n\n    // Create a polygon element.\n    var polygon = new Graphics()\n    polygon.lineStyle(elementStyle.penwidth, elementStyle.color, 1)\n    if (elementStyle.fill === true) polygon.beginFill(elementStyle.background_color)\n    polygon.drawPolygon(path)\n    if (elementStyle.fill === true) polygon.endFill()\n\n    // Add the polygon item to container.\n    this._container.addChild(polygon)\n  }\n\n  /** Implements the prepare phase of a canvas. */\n  prepare () {}\n\n  /**\n   * Draws a rectangle element on the canvas.\n   * @param {Number} x - The x coordinate of the element.\n   * @param {Number} y - The y coordinate of the element.\n   * @param {Number} w - The width of the element.\n   * @param {Number} h - The height of the element.\n   * @param {Object} styleArgs - Optional styling argument for the element.\n   */\n  rect (x, y, w, h, styleArgs) {\n    // Get the style\n    var elementStyle = this._getStyle(styleArgs)\n    // Create a rectangle element.\n    var rectangle = new Graphics()\n    rectangle.lineStyle(elementStyle.penwidth, elementStyle.color, 1)\n    if (elementStyle.fill === true) {\n      rectangle.beginFill(elementStyle.background_color)\n      rectangle.drawRect(0, 0, w, h)\n      rectangle.endFill()\n    } else {\n      rectangle.drawRect(0, 0, w, h)\n    }\n    rectangle.x = x\n    rectangle.y = y\n\n    // Add the rectangle element to container.\n    this._container.addChild(rectangle)\n  }\n\n  /**\n   * Returns the size ion pixels of the canvas.\n   * @return {Array} - The widht an height as an array tupple.\n   */\n  size () {\n    // Create object tuple.\n    var size = {\n      width: this._width,\n      height: this._height\n    }\n    return size\n  }\n\n  /**\n   * Show a canvas on the ptimary canvas.\n   * @param {Object} experiment - The experiment to which the canvas belongs.\n   * @return {Number} - The current time stamp.\n   */\n  show (experiment) {\n    // Check parameter.\n    experiment = (typeof experiment !== 'undefined') ? experiment : this.experiment\n\n    // Add the container to the stage object and update the stage.\n    this.experiment._currentCanvas = this\n\n    // Set the scaling.\n    this._container.scale.x = this.experiment._scale_x\n    this._container.scale.y = this.experiment._scale_y\n\n    // Set renderer background and render the content.\n    this.experiment._runner._renderer.backgroundColor = this._styles._background_color\n    try {\n      const c = this._styles.rgb\n      document.body.style.backgroundColor = `rgb(${c.r},${c.g},${c.b})`\n    } catch (e) {\n      console.error(e)\n    }\n    this.experiment._runner._renderer.render(this._container)\n\n    // Return the current time.\n    if (experiment != null) {\n      return experiment.clock.time()\n    } else {\n      return null\n    }\n  }\n\n  /**\n   * Draws a text element on the canvas.\n   * @param {String} txt - The x coordinate of the element.\n   * @param {Boolean} center - If true the text must be centered.\n   * @param {Number} x - The x coordinate of the element.\n   * @param {Number} y - The y coordinate of the element.\n   * @param {Boolean} html - If true the text parameter contains HTML tags.\n   * @param {Object} styleArgs - Optional styling argument for the element.\n   */\n  text (txt, center, x, y, html, styleArgs) {\n    // Get the style\n    const elementStyle = this._getStyle(styleArgs)\n\n    // Only jump through the HTML rendering hoops if the html == 'yes' and\n    // text actually contains HTML markup.\n    if ((html === 'yes') && (this._containsHTML(txt))) {\n      //  Define the text block object.\n      const textBlock = {\n        element_style: elementStyle,\n        height: 0,\n        row: {\n          ascent: 0,\n          height: 0,\n          text_elements: [],\n          text_dimensions: [],\n          text_underline: [],\n          width: 0\n        },\n        rows: [],\n        styles: [],\n        width: 0,\n        x_pos: 4,\n        y_pos: 0\n      }\n\n      // First create a div container for parsing the html text.\n      const div = document.createElement('div')\n      document.body.appendChild(div)\n      div.style.fontFamily = elementStyle.font_family\n      div.style.fontSize = String(elementStyle.font_size) + 'px'\n      div.style.fontWeight = (elementStyle.font_bold === true) ? 'bold' : 'normal'\n      div.style.lineHeight = 'normal'\n      div.style.display = 'inline-block'\n      div.style.visibility = 'hidden'\n      div.innerHTML = txt\n\n      // Parse the html recursive.\n      this._parseHtmlNode(div, textBlock, elementStyle)\n\n      // Remove the html div.\n      document.body.removeChild(div)\n\n      // Add the last row (if any).\n      if (textBlock.row.text_elements.length !== 0) {\n        textBlock.height = textBlock.height + textBlock.row.height\n        textBlock.rows.push(textBlock.row)\n      }\n\n      // Recalculate the x and y positions depending on height, width and centering.\n      textBlock.y_pos = 0\n      for (let i = 0; i < textBlock.rows.length; i++) {\n        // Parse a textline.\n        for (let j = 0; j < textBlock.rows[i].text_elements.length; j++) {\n          // Check for vertical correction.\n          const adjust = textBlock.rows[i].ascent - textBlock.rows[i].text_dimensions[j].ascent\n          textBlock.rows[i].text_elements[j].y = textBlock.y_pos + adjust\n\n          // Check for horizontal centering.\n          if ([1, '1', true, 'yes'].indexOf(center) !== -1) {\n            textBlock.rows[i].text_elements[j].x = textBlock.rows[i].text_elements[j].x + x - (textBlock.rows[i].width / 2)\n            textBlock.rows[i].text_elements[j].y = textBlock.rows[i].text_elements[j].y + y - (textBlock.height / 2)\n          } else {\n            textBlock.rows[i].text_elements[j].x = textBlock.rows[i].text_elements[j].x + x\n            textBlock.rows[i].text_elements[j].y = textBlock.rows[i].text_elements[j].y + y + 6\n          }\n\n          // if underlined add additional styling.\n          if (textBlock.rows[i].text_underline[j] === true) {\n            this.line(textBlock.rows[i].text_elements[j].x,\n              textBlock.rows[i].text_elements[j].y + textBlock.rows[i].text_dimensions[j].ascent + 7,\n              textBlock.rows[i].text_elements[j].x + textBlock.rows[i].text_elements[j].width,\n              textBlock.rows[i].text_elements[j].y + textBlock.rows[i].text_dimensions[j].ascent + 7,\n              elementStyle)\n          }\n\n          //  Add text element to the stage.\n          this._container.addChild(textBlock.rows[i].text_elements[j])\n        }\n        textBlock.y_pos = textBlock.y_pos + textBlock.rows[i].height\n      }\n    } else {\n      //  Create the text element\n      var textStyle = {\n        fontFamily: elementStyle.font_family,\n        fontSize: elementStyle.font_size,\n        fontWeight: (elementStyle.font_bold === true) ? 'bold' : 'normal',\n        fill: elementStyle.color\n      }\n      var textElement = new Text(txt, textStyle)\n\n      if ([1, '1', true, 'yes'].indexOf(center) !== -1) {\n        textElement.x = x - (textElement.width / 2)\n        textElement.y = y - (textElement.height / 2)\n      } else {\n        textElement.x = x\n        textElement.y = y\n      }\n\n      //  Add text element to the stage.\n      this._container.addChild(textElement)\n    }\n  }\n}\n","import isInteger from 'lodash/isInteger'\n\n/** Class representing a style container. */\nexport default class Styles {\n  /** Styles is a simple class that holds information about the style. */\n  constructor (item) {\n    this._initConstants()\n    // Set class private properties.\n    if (typeof (item) === 'undefined') {\n      this._background_color = 0x000000\n      this._bidi = false\n      this._color = 'white'\n      this._fill = false\n      this._font_bold = false\n      this._font_family = 'Arial'\n      this._font_italic = false\n      this._font_size = 24\n      this._font_underline = false\n      this._html = false\n      this._penwidth = 1\n    } else {\n      this.background_color = item.vars.get('background', 0x000000)\n      this.bidi = item.vars.get('bidi', 'no')\n      this.color = item.vars.get('foreground', 'white')\n      this.fill = item.vars.get('fill', 'no') === 'yes'\n      this.font_bold = item.vars.get('font_bold', 'no')\n      this.font_family = item.vars.get('font_family', 'Arial')\n      this.font_italic = item.vars.get('font_italic', 'no')\n      this.font_size = item.vars.get('font_size', 24)\n      this.font_underline = item.vars.get('font_underline', 'no')\n      this.html = item.vars.get('html', 'no')\n      this.penwidth = item.vars.get('penwidth', 1)\n    }\n  }\n\n  /**\n   * Converts a color value (string, number of rgb to a numeric value for use in PIXI.\n   * @param {String|Number|Object} color - The color to convert.\n   * @return {Number} - The color value.\n   */\n\n  _convertColorValue (color) {\n    var convertedColor = 0\n    // Check if the color definition is a number or a string value.\n    if (typeof (color) === 'string') {\n      // Check if the string is a hex string.\n      if (/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(color) === true) {\n        // Check if hex string is 3 of 6 character based.\n        if (color.length === 4) {\n          // Expand the color to 6 characters.\n          convertedColor = parseInt('0x' + color[1] + color[1] + color[2] + color[2] + color[3] + color[3], 16)\n        } else {\n          convertedColor = parseInt('0x' + color[1] + color[2] + color[3] + color[4] + color[5] + color[6], 16)\n        }\n      } else if (typeof this._DEFAULT_COLOURS[color.toLowerCase()] !== 'undefined') {\n        // Value is a constant color name, convert it.\n        convertedColor = parseInt(this._DEFAULT_COLOURS[color.toLowerCase()], 16)\n      } else if (color.slice(0, 3).toLowerCase() === 'rgb') {\n        // Value is a rgb string number, convert it.\n        var a = color.split('(')[1].split(')')[0]\n        a = a.split(',')\n        var b = a.map(function (x) {\n          // For each array element\n          if (/^\\d+(\\.\\d+)?%$/.test(x)) {\n            // pass\n            x = x.slice(0, -1)\n            x = Math.round((parseInt(x) / 100) * 255)\n            x = x.toString(16)\n          } else {\n            // fail\n            x = parseInt(x).toString(16) // Convert to a base16 string\n          }\n          return (x.length === 1) ? '0' + x : x // Add zero if we get only one character\n        })\n        convertedColor = parseInt('0x' + b.join(''))\n      }\n    } else if (this._isInt(color) === true) {\n      if (color < 256) {\n        // Luminant value, so convert it to gray scale.\n        convertedColor = (256 * 256 * color) + (256 * color) + color\n      } else {\n        // Luminant values above 255 are not supported, return white.\n        convertedColor = 16843008\n      }\n    }\n    // Return the converted color as nubmer value.\n    return convertedColor\n  }\n\n  _convertColorValueToRGB (color) {\n    // Convert the color to numeric values.\n    var convertedColor = this._convertColorValue(color)\n    // Convert colors to rgb format.\n    return {\n      r: convertedColor >> 16,\n      g: convertedColor >> 8 & 0xFF,\n      b: convertedColor & 0xFF\n    }\n  }\n\n  get rgb () {\n    return {\n      r: this._background_color >> 16,\n      g: this._background_color >> 8 & 0xFF,\n      b: this._background_color & 0xFF\n    }\n  }\n\n  set rgb (val) {\n  }\n\n  /**\n   * Checks if the passed value is an integer.\n   * @param {Number} value -  The value to check.\n   * @return {Boolean} - True if passed value is an integer.\n   */\n  _isInt (value) {\n    return isInteger(value)\n  }\n\n  /**\n   * Checks if value is possibly specified as 'yes'/'no' or 1/0 instead of\n   * true or false (as is done in OS script). Convert 'yes' and 'no' values\n   * to booleans\n   * @param {Number|String} value - The value to check.\n   * @return {Boolean} - The original boolean, or true if value was 'yes'.\n   */\n  _checkVal (value) {\n    return [true, 'yes', 1, '1'].indexOf(value) !== -1\n  }\n\n  /**\n   * Get the background_color value.\n   * @return {String} The background_color value.\n   */\n  get background_color () {\n    return this._background_color\n  }\n\n  /**\n   * Set the background_color value.\n   * @param {Number|String} val - The background_color value to set.\n   */\n  set background_color (val) {\n    this._background_color = this._convertColorValue(val, 'number')\n  }\n\n  /**\n   * Get the bidi value.\n   * @return {Boolean} The bidi value.\n   */\n  get bidi () {\n    return this._bidi\n  }\n\n  /**\n   * Set the bidi value.\n   * @param {Boolean} val - The bidi value to set.\n   */\n  set bidi (val) {\n    this._bidi = this._checkVal(val)\n  }\n\n  /**\n   * Get the color value.\n   * @return {String} The color value.\n   */\n  get color () {\n    return this._color\n  }\n\n  /**\n   * Set the color value.\n   * @param {Number|String} val - The color value to set.\n   */\n  set color (val) {\n    this._color = this._convertColorValue(val, 'number')\n  }\n\n  /**\n   * Get the fill value.\n   * @return {Boolean} The fill value.\n   */\n  get fill () {\n    return this._fill\n  }\n\n  /**\n   * Set the fill value.\n   * @param {Boolean} val - The fill value to set.\n   */\n  set fill (val) {\n    this._fill = ([1, '1', true, 'yes'].indexOf(val) !== -1)\n  }\n\n  /**\n   * Get the font_bold value.\n   * @return {Boolean} The font_bold value.\n   */\n  get font_bold () {\n    return this._font_bold\n  }\n\n  /**\n   * Set the font_bold value.\n   * @param {Boolean} val - The font_bold value to set.\n   */\n  set font_bold (val) {\n    this._font_bold = this._checkVal(val)\n  }\n\n  /**\n   * Get the font_family value.\n   * @return {String} The font_family value.\n   */\n  get font_family () {\n    return this._font_family\n  }\n\n  /**\n   * Set the font_family value.\n   * @param {String} val - The font_family value to set.\n   */\n  set font_family (val) {\n    if (val in this._DEFAULT_FONTS) {\n      this._font_family = this._DEFAULT_FONTS[val]\n    } else {\n      this._font_family = val\n    }\n  }\n\n  /**\n   * Get the font_italic value.\n   * @return {Boolean} The font_italic value.\n   */\n  get font_italic () {\n    return this._font_italic\n  }\n\n  /**\n   * Set the font_italic value.\n   * @param {Boolean} val - The font_bold value to set.\n   */\n  set font_italic (val) {\n    this._font_italic = this._checkVal(val)\n  }\n\n  /**\n   * Get the font_size value.\n   * @return {Number} The font_size value.\n   */\n  get font_size () {\n    return this._font_size\n  }\n\n  /**\n   * Set the font_size value.\n   * @param {Number} val - The font_size value to set.\n   */\n  set font_size (val) {\n    if (!this._isInt(val)) {\n      // remove px part\n      this._font_size = Number(val.slice(0, -2))\n    } else {\n      this._font_size = val\n    }\n  }\n\n  /**\n   * Get the font_underline value.\n   * @return {Boolean} The font_underline value.\n   */\n  get font_underline () {\n    return this._font_underline\n  }\n\n  /**\n   * Set the font_underline value.\n   * @param {Boolean} val - The font_underline value to set.\n   */\n  set font_underline (val) {\n    this._font_underline = this._checkVal(val)\n  }\n\n  /**\n   * Get the html value.\n   * @return {Boolean} The html value.\n   */\n  get html () {\n    return this._html\n  }\n\n  /**\n   * Set the html value.\n   * @param {Boolean} val - The html value to set.\n   */\n  set html (val) {\n    this._html = this._checkVal(val)\n  }\n\n  /**\n   * Get the penwidth value.\n   * @return {Boolean} The penwidth value.\n   */\n  get penwidth () {\n    return this._penwidth\n  }\n\n  /**\n   * Set the penwidth value.\n   * @param {Boolean} val - The penwidth value to set.\n   */\n  set penwidth (val) {\n    if (!this._isInt(val)) {\n      this._penwidth = 1\n    }\n    this._penwidth = val\n  }\n\n  _initConstants () {\n    // Set constant default colors.\n    this._DEFAULT_COLOURS = {\n      'aliceblue': '0xf0f8ff',\n      'antiquewhite': '0xfaebd7',\n      'aqua': '0x00ffff',\n      'aquamarine': '0x7fffd4',\n      'azure': '0xf0ffff',\n      'beige': '0xf5f5dc',\n      'bisque': '0xffe4c4',\n      'black': '0x000000',\n      'blanchedalmond': '0xffebcd',\n      'blue': '0x0000ff',\n      'blueviolet': '0x8a2be2',\n      'brown': '0xa52a2a',\n      'burlywood': '0xdeb887',\n      'cadetblue': '0x5f9ea0',\n      'chartreuse': '0x7fff00',\n      'chocolate': '0xd2691e',\n      'coral': '0xff7f50',\n      'cornflowerblue': '0x6495ed',\n      'cornsilk': '0xfff8dc',\n      'crimson': '0xdc143c',\n      'cyan': '0x00ffff',\n      'darkblue': '0x00008b',\n      'darkcyan': '0x008b8b',\n      'darkgoldenrod': '0xb8860b',\n      'darkgray': '0xa9a9a9',\n      'darkgreen': '0x006400',\n      'darkgrey': '0xa9a9a9',\n      'darkkhaki': '0xbdb76b',\n      'darkmagenta': '0x8b008b',\n      'darkolivegreen': '0x556b2f',\n      'darkorange': '0xff8c00',\n      'darkorchid': '0x9932cc',\n      'darkred': '0x8b0000',\n      'darksalmon': '0xe9967a',\n      'darkseagreen': '0x8fbc8f',\n      'darkslateblue': '0x483d8b',\n      'darkslategray': '0x2f4f4f',\n      'darkslategrey': '0x2f4f4f',\n      'darkturquoise': '0x00ced1',\n      'darkviolet': '0x9400d3',\n      'deeppink': '0xff1493',\n      'deepskyblue': '0x00bfff',\n      'dimgray': '0x696969',\n      'dimgrey': '0x696969',\n      'dodgerblue': '0x1e90ff',\n      'firebrick': '0xb22222',\n      'floralwhite': '0xfffaf0',\n      'forestgreen': '0x228b22',\n      'fuchsia': '0xff00ff',\n      'gainsboro': '0xdcdcdc',\n      'ghostwhite': '0xf8f8ff',\n      'gold': '0xffd700',\n      'goldenrod': '0xdaa520',\n      'gray': '0x808080',\n      'grey': '0x808080',\n      'green': '0x008000',\n      'greenyellow': '0xadff2f',\n      'honeydew': '0xf0fff0',\n      'hotpink': '0xff69b4',\n      'indianred ': '0xcd5c5c',\n      'indigo': '0x4b0082',\n      'ivory': '0xfffff0',\n      'khaki': '0xf0e68c',\n      'lavender': '0xe6e6fa',\n      'lavenderblush': '0xfff0f5',\n      'lawngreen': '0x7cfc00',\n      'lemonchiffon': '0xfffacd',\n      'lightblue': '0xadd8e6',\n      'lightcoral': '0xf08080',\n      'lightcyan': '0xe0ffff',\n      'lightgoldenrodyellow': '0xfafad2',\n      'lightgray': '0xd3d3d3',\n      'lightgrey': '0xd3d3d3',\n      'lightgreen': '0x90ee90',\n      'lightpink': '0xffb6c1',\n      'lightsalmon': '0xffa07a',\n      'lightseagreen': '0x20b2aa',\n      'lightskyblue': '0x87cefa',\n      'lightslategray': '0x778899',\n      'lightslategrey': '0x778899',\n      'lightsteelblue': '0xb0c4de',\n      'lightyellow': '0xffffe0',\n      'lime': '0x00ff00',\n      'limegreen': '0x32cd32',\n      'linen': '0xfaf0e6',\n      'magenta': '0xff00ff',\n      'maroon': '0x800000',\n      'mediumaquamarine': '0x66cdaa',\n      'mediumblue': '0x0000cd',\n      'mediumorchid': '0xba55d3',\n      'mediumpurple': '0x9370d8',\n      'mediumseagreen': '0x3cb371',\n      'mediumslateblue': '0x7b68ee',\n      'mediumspringgreen': '0x00fa9a',\n      'mediumturquoise': '0x48d1cc',\n      'mediumvioletred': '0xc71585',\n      'midnightblue': '0x191970',\n      'mintcream': '0xf5fffa',\n      'mistyrose': '0xffe4e1',\n      'moccasin': '0xffe4b5',\n      'navajowhite': '0xffdead',\n      'navy': '0x000080',\n      'oldlace': '0xfdf5e6',\n      'olive': '0x808000',\n      'olivedrab': '0x6b8e23',\n      'orange': '0xffa500',\n      'orangered': '0xff4500',\n      'orchid': '0xda70d6',\n      'palegoldenrod': '0xeee8aa',\n      'palegreen': '0x98fb98',\n      'paleturquoise': '0xafeeee',\n      'palevioletred': '0xd87093',\n      'papayawhip': '0xffefd5',\n      'peachpuff': '0xffdab9',\n      'peru': '0xcd853f',\n      'pink': '0xffc0cb',\n      'plum': '0xdda0dd',\n      'powderblue': '0xb0e0e6',\n      'purple': '0x800080',\n      'red': '0xff0000',\n      'rosybrown': '0xbc8f8f',\n      'royalblue': '0x4169e1',\n      'saddlebrown': '0x8b4513',\n      'salmon': '0xfa8072',\n      'sandybrown': '0xf4a460',\n      'seagreen': '0x2e8b57',\n      'seashell': '0xfff5ee',\n      'sienna': '0xa0522d',\n      'silver': '0xc0c0c0',\n      'skyblue': '0x87ceeb',\n      'slateblue': '0x6a5acd',\n      'slategray': '0x708090',\n      'slategrey': '0x708090',\n      'snow': '0xfffafa',\n      'springgreen': '0x00ff7f',\n      'steelblue': '0x4682b4',\n      'tan': '0xd2b48c',\n      'teal': '0x008080',\n      'thistle': '0xd8bfd8',\n      'tomato': '0xff6347',\n      'turquoise': '0x40e0d0',\n      'violet': '0xee82ee',\n      'wheat': '0xf5deb3',\n      'white': '0xffffff',\n      'whitesmoke': '0xf5f5f5',\n      'yellow': '0xffff00',\n      'yellowgreen': '0x9acd32'\n    }\n\n    // Set constant default fonts.\n    this._DEFAULT_FONTS = {\n      'sans': 'Droid Sans',\n      'serif': 'Droid Serif',\n      'mono': 'Droid Sans Mono',\n      'chinese-japanese-korean': 'WenQuanYi Micro Hei',\n      'arabic': 'Droid Arabic Naskh',\n      'hebrew': 'Droid Sans Hebrew',\n      'hindi': 'Lohit Hindi'\n    }\n  };\n}\n","import CanvasClass from '../backends/canvas'\n\n/**\n * A proxy handler for the VarStore that maps properties onto calls to\n * VarStore.get(), so that variables are automatically evaluated, just like\n * in the OpenSesame `var` API.\n */\nclass VarStoreHandler {\n  get (target, prop) {\n    // The VarStore sets a property on itself to bypass this proxy. This\n    // avoids feedback loops when the VarStore tries to get a variable without\n    // evaluating it.\n    if (target._bypass_proxy === true) {\n      return target[prop]\n    }\n    return typeof target[prop] === 'string'\n      ? target.get(prop, null, true, null, false)\n      : target[prop]\n  }\n}\n\n/**\n * A workspace for executing inline JavaScript code. For now, the workspace is\n * not persistent, and only exposes the vars object.\n */\nexport default class JavaScriptWorkspace {\n  /**\n     * Create a JavaScript workspace.\n     * @param {Object} experiment - The experiment item to which the item belongs.\n     */\n  constructor (experiment) {\n    this.experiment = experiment\n    this.vars_proxy = new Proxy(this.experiment.vars, new VarStoreHandler())\n  }\n\n  /**\n     * Executes JavaScript code in the workspace.\n     * @param {String} js - JavaScript code to execute\n     */\n  _eval (js) {\n    let vars = this.vars_proxy\n    let Canvas = () => new CanvasClass(this.experiment)\n    eval(js)\n  }\n}\n","import {\r\n  isBoolean\r\n} from 'lodash'\r\n\r\n/** Class representing a python workspace. */\r\nexport default class PythonWorkspace {\r\n  /**\r\n   * Create a python workspace object.\r\n   * @param {Object} runner - The runner to which the python workspace belongs.\r\n   */\r\n  constructor (runner) {\r\n    // Set class parameter properties.\r\n    this._runner = runner // Parent runner attached to the python workspace class.\r\n  }\r\n\r\n  /**\r\n   * Evaluate an expression within osweb.\r\n   * @param {Boolean|Object|String} bytecode - The expression to evaluate.\r\n   * @return {Boolean|Number|Object|String} - The result of the evaluated expression.\r\n   */\r\n  _eval (bytecode) {\r\n    // Check wich type of expression must be evaled.\r\n    if (isBoolean(bytecode)) {\r\n      return bytecode\r\n    } else if (typeof bytecode === 'string') {\r\n      // Open sesame script, first check for parameter values.\r\n      bytecode = this._runner._syntax.eval_text(bytecode, null, true)\r\n\r\n      // Evaluate the expression.\r\n      var evalString = this._runner._syntax.remove_quotes(bytecode)\r\n      if (evalString === 'always') {\r\n        return true\r\n      } else if (evalString === 'never') {\r\n        return false\r\n      } else {\r\n        return eval(evalString)\r\n      }\r\n    } else {\r\n      // Python script, run the internal Python interpreter.\r\n      return this._runner._pythonParser._run_statement(bytecode)\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}